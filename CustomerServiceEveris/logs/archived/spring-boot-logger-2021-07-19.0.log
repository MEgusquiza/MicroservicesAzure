2021-07-19 18:28:57,109 INFO [background-preinit] org.hibernate.validator.internal.util.Version : HV000001: Hibernate Validator 6.2.0.Final
2021-07-19 18:28:59,007 DEBUG [main] org.springframework.core.log.CompositeLog : HTTP GET http://localhost:8888/customer_service/default/main
2021-07-19 18:28:59,085 DEBUG [main] org.springframework.core.log.CompositeLog : Accept=[application/json, application/*+json]
2021-07-19 18:29:17,804 DEBUG [main] org.springframework.core.log.CompositeLog : Response 200 OK
2021-07-19 18:29:17,806 DEBUG [main] org.springframework.core.log.CompositeLog : Reading to [org.springframework.cloud.config.environment.Environment]
2021-07-19 18:29:17,885 INFO [main] org.springframework.boot.SpringApplication : No active profile set, falling back to default profiles: default
2021-07-19 18:29:24,870 INFO [main] com.mongodb.diagnostics.logging.SLF4JLogger : Cluster created with settings {hosts=[localhost:27017], mode=SINGLE, requiredClusterType=UNKNOWN, serverSelectionTimeout='30000 ms'}
2021-07-19 18:29:27,585 DEBUG [main] org.springframework.web.reactive.result.method.AbstractHandlerMethodMapping : 6 mappings in 'requestMappingHandlerMapping'
2021-07-19 18:29:27,629 DEBUG [main] org.springframework.web.reactive.handler.SimpleUrlHandlerMapping : Patterns [/webjars/**, /**] in 'resourceHandlerMapping'
2021-07-19 18:29:28,091 INFO [cluster-ClusterId{value='60f60ad46824b307a6a84652', description='null'}-localhost:27017] com.mongodb.diagnostics.logging.SLF4JLogger : Opened connection [connectionId{localValue:1, serverValue:8}] to localhost:27017
2021-07-19 18:29:28,092 INFO [cluster-rtt-ClusterId{value='60f60ad46824b307a6a84652', description='null'}-localhost:27017] com.mongodb.diagnostics.logging.SLF4JLogger : Opened connection [connectionId{localValue:2, serverValue:7}] to localhost:27017
2021-07-19 18:29:28,093 INFO [cluster-ClusterId{value='60f60ad46824b307a6a84652', description='null'}-localhost:27017] com.mongodb.diagnostics.logging.SLF4JLogger : Monitor thread successfully connected to server with description ServerDescription{address=localhost:27017, type=STANDALONE, state=CONNECTED, ok=true, minWireVersion=0, maxWireVersion=9, maxDocumentSize=16777216, logicalSessionTimeoutMinutes=30, roundTripTimeNanos=810409800}
2021-07-19 18:29:30,873 DEBUG [main] org.springframework.web.reactive.result.method.annotation.ControllerMethodResolver : ControllerAdvice beans: none
2021-07-19 18:29:30,930 DEBUG [main] org.springframework.web.server.adapter.HttpWebHandlerAdapter : enableLoggingRequestDetails='false': form data and headers will be masked to prevent unsafe logging of potentially sensitive data
2021-07-19 18:29:33,499 INFO [main] com.netflix.discovery.DiscoveryClient : Initializing Eureka in region us-east-1
2021-07-19 18:29:33,520 INFO [main] com.netflix.discovery.shared.resolver.aws.ConfigClusterResolver : Resolving eureka endpoints via configuration
2021-07-19 18:29:34,300 INFO [main] com.netflix.discovery.DiscoveryClient : Disable delta property : false
2021-07-19 18:29:34,301 INFO [main] com.netflix.discovery.DiscoveryClient : Single vip registry refresh property : null
2021-07-19 18:29:34,302 INFO [main] com.netflix.discovery.DiscoveryClient : Force full registry fetch : false
2021-07-19 18:29:34,302 INFO [main] com.netflix.discovery.DiscoveryClient : Application is null : false
2021-07-19 18:29:34,303 INFO [main] com.netflix.discovery.DiscoveryClient : Registered Applications size is zero : true
2021-07-19 18:29:34,304 INFO [main] com.netflix.discovery.DiscoveryClient : Application version is -1: true
2021-07-19 18:29:34,304 INFO [main] com.netflix.discovery.DiscoveryClient : Getting all instance registry info from the eureka server
2021-07-19 18:29:37,318 DEBUG [main] org.springframework.core.log.CompositeLog : HTTP GET http://localhost:8761/eureka/apps/
2021-07-19 18:29:37,405 DEBUG [main] org.springframework.core.log.CompositeLog : Accept=[application/json, application/*+json]
2021-07-19 18:29:37,652 DEBUG [main] org.springframework.core.log.CompositeLog : Response 200 OK
2021-07-19 18:29:37,664 DEBUG [main] org.springframework.core.log.CompositeLog : Reading to [org.springframework.cloud.netflix.eureka.http.EurekaApplications]
2021-07-19 18:29:37,673 INFO [main] com.netflix.discovery.DiscoveryClient : The response status is 200
2021-07-19 18:29:37,676 INFO [main] com.netflix.discovery.DiscoveryClient : Starting heartbeat executor: renew interval is: 30
2021-07-19 18:29:37,680 INFO [main] com.netflix.discovery.InstanceInfoReplicator : InstanceInfoReplicator onDemand update allowed rate per min is 4
2021-07-19 18:29:37,727 INFO [main] com.netflix.discovery.DiscoveryClient : Discovery Client initialized at timestamp 1626737377716 with initial instances count: 2
2021-07-19 18:29:37,738 INFO [main] com.netflix.discovery.DiscoveryClient$3 : Saw local status change event StatusChangeEvent [timestamp=1626737377738, current=UP, previous=STARTING]
2021-07-19 18:29:37,740 INFO [DiscoveryClient-InstanceInfoReplicator-0] com.netflix.discovery.DiscoveryClient : DiscoveryClient_CUSTOMER_SERVICE/host.docker.internal:customer_service:8090: registering service...
2021-07-19 18:29:37,750 DEBUG [DiscoveryClient-InstanceInfoReplicator-0] org.springframework.core.log.CompositeLog : HTTP POST http://localhost:8761/eureka/apps/CUSTOMER_SERVICE
2021-07-19 18:29:37,753 DEBUG [DiscoveryClient-InstanceInfoReplicator-0] org.springframework.core.log.CompositeLog : Accept=[application/json, application/*+json]
2021-07-19 18:29:37,862 DEBUG [DiscoveryClient-InstanceInfoReplicator-0] org.springframework.core.log.CompositeLog : Writing [InstanceInfo [instanceId = host.docker.internal:customer_service:8090, appName = CUSTOMER_SERVICE, hostName = host.docker.internal, status = UP, ipAddr = 192.168.1.12, port = 8090, securePort = 443, dataCenterInfo = com.netflix.appinfo.MyDataCenterInfo@7deca9d1] as "application/json"
2021-07-19 18:29:39,032 DEBUG [DiscoveryClient-InstanceInfoReplicator-0] org.springframework.core.log.CompositeLog : Response 204 NO_CONTENT
2021-07-19 18:29:39,033 INFO [DiscoveryClient-InstanceInfoReplicator-0] com.netflix.discovery.DiscoveryClient : DiscoveryClient_CUSTOMER_SERVICE/host.docker.internal:customer_service:8090 - registration status: 204
2021-07-19 18:29:39,905 INFO [main] org.springframework.boot.StartupInfoLogger : Started Application in 46.708 seconds (JVM running for 48.881)
2021-07-19 18:30:07,681 DEBUG [DiscoveryClient-CacheRefreshExecutor-0] org.springframework.core.log.CompositeLog : HTTP GET http://localhost:8761/eureka/apps/delta
2021-07-19 18:30:07,683 DEBUG [DiscoveryClient-CacheRefreshExecutor-0] org.springframework.core.log.CompositeLog : Accept=[application/json, application/*+json]
2021-07-19 18:30:07,685 DEBUG [DiscoveryClient-HeartbeatExecutor-0] org.springframework.core.log.CompositeLog : HTTP PUT http://localhost:8761/eureka/apps/CUSTOMER_SERVICE/host.docker.internal:customer_service:8090?status=UP&lastDirtyTimestamp=1626737377737
2021-07-19 18:30:07,707 DEBUG [DiscoveryClient-HeartbeatExecutor-0] org.springframework.core.log.CompositeLog : Accept=[application/json, application/*+json]
2021-07-19 18:30:07,793 DEBUG [DiscoveryClient-HeartbeatExecutor-0] org.springframework.core.log.CompositeLog : Response 200 OK
2021-07-19 18:30:07,793 DEBUG [DiscoveryClient-CacheRefreshExecutor-0] org.springframework.core.log.CompositeLog : Response 200 OK
2021-07-19 18:30:07,793 DEBUG [DiscoveryClient-CacheRefreshExecutor-0] org.springframework.core.log.CompositeLog : Reading to [org.springframework.cloud.netflix.eureka.http.EurekaApplications]
2021-07-19 18:30:37,794 DEBUG [DiscoveryClient-HeartbeatExecutor-0] org.springframework.core.log.CompositeLog : HTTP PUT http://localhost:8761/eureka/apps/CUSTOMER_SERVICE/host.docker.internal:customer_service:8090?status=UP&lastDirtyTimestamp=1626737377737
2021-07-19 18:30:37,795 DEBUG [DiscoveryClient-HeartbeatExecutor-0] org.springframework.core.log.CompositeLog : Accept=[application/json, application/*+json]
2021-07-19 18:30:37,798 DEBUG [DiscoveryClient-CacheRefreshExecutor-0] org.springframework.core.log.CompositeLog : HTTP GET http://localhost:8761/eureka/apps/delta
2021-07-19 18:30:37,799 DEBUG [DiscoveryClient-CacheRefreshExecutor-0] org.springframework.core.log.CompositeLog : Accept=[application/json, application/*+json]
2021-07-19 18:30:37,808 DEBUG [DiscoveryClient-HeartbeatExecutor-0] org.springframework.core.log.CompositeLog : Response 200 OK
2021-07-19 18:30:37,819 DEBUG [DiscoveryClient-CacheRefreshExecutor-0] org.springframework.core.log.CompositeLog : Response 200 OK
2021-07-19 18:30:37,820 DEBUG [DiscoveryClient-CacheRefreshExecutor-0] org.springframework.core.log.CompositeLog : Reading to [org.springframework.cloud.netflix.eureka.http.EurekaApplications]
2021-07-19 18:31:07,809 DEBUG [DiscoveryClient-HeartbeatExecutor-0] org.springframework.core.log.CompositeLog : HTTP PUT http://localhost:8761/eureka/apps/CUSTOMER_SERVICE/host.docker.internal:customer_service:8090?status=UP&lastDirtyTimestamp=1626737377737
2021-07-19 18:31:07,810 DEBUG [DiscoveryClient-HeartbeatExecutor-0] org.springframework.core.log.CompositeLog : Accept=[application/json, application/*+json]
2021-07-19 18:31:07,814 DEBUG [DiscoveryClient-HeartbeatExecutor-0] org.springframework.core.log.CompositeLog : Response 200 OK
2021-07-19 18:31:07,823 DEBUG [DiscoveryClient-CacheRefreshExecutor-0] org.springframework.core.log.CompositeLog : HTTP GET http://localhost:8761/eureka/apps/delta
2021-07-19 18:31:07,824 DEBUG [DiscoveryClient-CacheRefreshExecutor-0] org.springframework.core.log.CompositeLog : Accept=[application/json, application/*+json]
2021-07-19 18:31:07,869 DEBUG [DiscoveryClient-CacheRefreshExecutor-0] org.springframework.core.log.CompositeLog : Response 200 OK
2021-07-19 18:31:07,870 DEBUG [DiscoveryClient-CacheRefreshExecutor-0] org.springframework.core.log.CompositeLog : Reading to [org.springframework.cloud.netflix.eureka.http.EurekaApplications]
2021-07-19 18:31:12,986 DEBUG [reactor-http-nio-3] org.springframework.core.log.LogFormatUtils : [c56fd059-1, L:/0:0:0:0:0:0:0:1:8090 - R:/0:0:0:0:0:0:0:1:54520] HTTP GET "/"
2021-07-19 18:31:13,086 DEBUG [reactor-http-nio-3] org.springframework.web.reactive.handler.AbstractHandlerMapping : [c56fd059-1, L:/0:0:0:0:0:0:0:1:8090 - R:/0:0:0:0:0:0:0:1:54520] Mapped to ResourceWebHandler ["classpath:/META-INF/resources/", "classpath:/resources/", "classpath:/static/", "classpath:/public/"]
2021-07-19 18:31:13,088 DEBUG [reactor-http-nio-3] org.springframework.web.reactive.resource.ResourceWebHandler : [c56fd059-1, L:/0:0:0:0:0:0:0:1:8090 - R:/0:0:0:0:0:0:0:1:54520] Resource not found
2021-07-19 18:31:13,178 DEBUG [reactor-http-nio-3] org.springframework.core.log.CompositeLog : [c56fd059-1, L:/0:0:0:0:0:0:0:1:8090 - R:/0:0:0:0:0:0:0:1:54520] Resolved [ResponseStatusException: 404 NOT_FOUND] for HTTP GET /
2021-07-19 18:31:13,195 DEBUG [reactor-http-nio-3] org.springframework.core.log.CompositeLog : [c56fd059-1, L:/0:0:0:0:0:0:0:1:8090 - R:/0:0:0:0:0:0:0:1:54520] Encoding [{timestamp=Mon Jul 19 18:31:13 COT 2021, path=/, status=404, error=Not Found, message=null, requestI (truncated)...]
2021-07-19 18:31:13,309 DEBUG [reactor-http-nio-3] org.springframework.core.log.LogFormatUtils : [c56fd059-1, L:/0:0:0:0:0:0:0:1:8090 - R:/0:0:0:0:0:0:0:1:54520] Completed 404 NOT_FOUND
2021-07-19 18:31:37,817 DEBUG [DiscoveryClient-HeartbeatExecutor-0] org.springframework.core.log.CompositeLog : HTTP PUT http://localhost:8761/eureka/apps/CUSTOMER_SERVICE/host.docker.internal:customer_service:8090?status=UP&lastDirtyTimestamp=1626737377737
2021-07-19 18:31:37,818 DEBUG [DiscoveryClient-HeartbeatExecutor-0] org.springframework.core.log.CompositeLog : Accept=[application/json, application/*+json]
2021-07-19 18:31:37,873 DEBUG [DiscoveryClient-CacheRefreshExecutor-0] org.springframework.core.log.CompositeLog : HTTP GET http://localhost:8761/eureka/apps/delta
2021-07-19 18:31:37,874 DEBUG [DiscoveryClient-CacheRefreshExecutor-0] org.springframework.core.log.CompositeLog : Accept=[application/json, application/*+json]
2021-07-19 18:31:37,881 DEBUG [DiscoveryClient-CacheRefreshExecutor-0] org.springframework.core.log.CompositeLog : Response 200 OK
2021-07-19 18:31:37,882 DEBUG [DiscoveryClient-CacheRefreshExecutor-0] org.springframework.core.log.CompositeLog : Reading to [org.springframework.cloud.netflix.eureka.http.EurekaApplications]
2021-07-19 18:31:38,422 DEBUG [DiscoveryClient-HeartbeatExecutor-0] org.springframework.core.log.CompositeLog : Response 200 OK
2021-07-19 18:32:07,887 DEBUG [DiscoveryClient-CacheRefreshExecutor-0] org.springframework.core.log.CompositeLog : HTTP GET http://localhost:8761/eureka/apps/delta
2021-07-19 18:32:07,889 DEBUG [DiscoveryClient-CacheRefreshExecutor-0] org.springframework.core.log.CompositeLog : Accept=[application/json, application/*+json]
2021-07-19 18:32:07,915 DEBUG [DiscoveryClient-CacheRefreshExecutor-0] org.springframework.core.log.CompositeLog : Response 200 OK
2021-07-19 18:32:07,916 DEBUG [DiscoveryClient-CacheRefreshExecutor-0] org.springframework.core.log.CompositeLog : Reading to [org.springframework.cloud.netflix.eureka.http.EurekaApplications]
2021-07-19 18:32:08,424 DEBUG [DiscoveryClient-HeartbeatExecutor-0] org.springframework.core.log.CompositeLog : HTTP PUT http://localhost:8761/eureka/apps/CUSTOMER_SERVICE/host.docker.internal:customer_service:8090?status=UP&lastDirtyTimestamp=1626737377737
2021-07-19 18:32:08,426 DEBUG [DiscoveryClient-HeartbeatExecutor-0] org.springframework.core.log.CompositeLog : Accept=[application/json, application/*+json]
2021-07-19 18:32:08,452 DEBUG [DiscoveryClient-HeartbeatExecutor-0] org.springframework.core.log.CompositeLog : Response 200 OK
2021-07-19 18:32:37,919 DEBUG [DiscoveryClient-CacheRefreshExecutor-0] org.springframework.core.log.CompositeLog : HTTP GET http://localhost:8761/eureka/apps/delta
2021-07-19 18:32:37,920 DEBUG [DiscoveryClient-CacheRefreshExecutor-0] org.springframework.core.log.CompositeLog : Accept=[application/json, application/*+json]
2021-07-19 18:32:38,372 DEBUG [DiscoveryClient-CacheRefreshExecutor-0] org.springframework.core.log.CompositeLog : Response 200 OK
2021-07-19 18:32:38,373 DEBUG [DiscoveryClient-CacheRefreshExecutor-0] org.springframework.core.log.CompositeLog : Reading to [org.springframework.cloud.netflix.eureka.http.EurekaApplications]
2021-07-19 18:32:38,454 DEBUG [DiscoveryClient-HeartbeatExecutor-0] org.springframework.core.log.CompositeLog : HTTP PUT http://localhost:8761/eureka/apps/CUSTOMER_SERVICE/host.docker.internal:customer_service:8090?status=UP&lastDirtyTimestamp=1626737377737
2021-07-19 18:32:38,455 DEBUG [DiscoveryClient-HeartbeatExecutor-0] org.springframework.core.log.CompositeLog : Accept=[application/json, application/*+json]
2021-07-19 18:32:38,552 DEBUG [DiscoveryClient-HeartbeatExecutor-0] org.springframework.core.log.CompositeLog : Response 200 OK
2021-07-19 18:33:08,418 DEBUG [DiscoveryClient-CacheRefreshExecutor-0] org.springframework.core.log.CompositeLog : HTTP GET http://localhost:8761/eureka/apps/delta
2021-07-19 18:33:08,420 DEBUG [DiscoveryClient-CacheRefreshExecutor-0] org.springframework.core.log.CompositeLog : Accept=[application/json, application/*+json]
2021-07-19 18:33:08,427 DEBUG [DiscoveryClient-CacheRefreshExecutor-0] org.springframework.core.log.CompositeLog : Response 200 OK
2021-07-19 18:33:08,428 DEBUG [DiscoveryClient-CacheRefreshExecutor-0] org.springframework.core.log.CompositeLog : Reading to [org.springframework.cloud.netflix.eureka.http.EurekaApplications]
2021-07-19 18:33:08,554 DEBUG [DiscoveryClient-HeartbeatExecutor-0] org.springframework.core.log.CompositeLog : HTTP PUT http://localhost:8761/eureka/apps/CUSTOMER_SERVICE/host.docker.internal:customer_service:8090?status=UP&lastDirtyTimestamp=1626737377737
2021-07-19 18:33:08,555 DEBUG [DiscoveryClient-HeartbeatExecutor-0] org.springframework.core.log.CompositeLog : Accept=[application/json, application/*+json]
2021-07-19 18:33:08,559 DEBUG [DiscoveryClient-HeartbeatExecutor-0] org.springframework.core.log.CompositeLog : Response 200 OK
2021-07-19 18:33:38,435 DEBUG [DiscoveryClient-CacheRefreshExecutor-0] org.springframework.core.log.CompositeLog : HTTP GET http://localhost:8761/eureka/apps/delta
2021-07-19 18:33:38,436 DEBUG [DiscoveryClient-CacheRefreshExecutor-0] org.springframework.core.log.CompositeLog : Accept=[application/json, application/*+json]
2021-07-19 18:33:38,442 DEBUG [DiscoveryClient-CacheRefreshExecutor-0] org.springframework.core.log.CompositeLog : Response 200 OK
2021-07-19 18:33:38,443 DEBUG [DiscoveryClient-CacheRefreshExecutor-0] org.springframework.core.log.CompositeLog : Reading to [org.springframework.cloud.netflix.eureka.http.EurekaApplications]
2021-07-19 18:33:38,561 DEBUG [DiscoveryClient-HeartbeatExecutor-0] org.springframework.core.log.CompositeLog : HTTP PUT http://localhost:8761/eureka/apps/CUSTOMER_SERVICE/host.docker.internal:customer_service:8090?status=UP&lastDirtyTimestamp=1626737377737
2021-07-19 18:33:38,561 DEBUG [DiscoveryClient-HeartbeatExecutor-0] org.springframework.core.log.CompositeLog : Accept=[application/json, application/*+json]
2021-07-19 18:33:38,564 DEBUG [DiscoveryClient-HeartbeatExecutor-0] org.springframework.core.log.CompositeLog : Response 200 OK
2021-07-19 18:34:08,446 DEBUG [DiscoveryClient-CacheRefreshExecutor-0] org.springframework.core.log.CompositeLog : HTTP GET http://localhost:8761/eureka/apps/delta
2021-07-19 18:34:08,448 DEBUG [DiscoveryClient-CacheRefreshExecutor-0] org.springframework.core.log.CompositeLog : Accept=[application/json, application/*+json]
2021-07-19 18:34:08,454 DEBUG [DiscoveryClient-CacheRefreshExecutor-0] org.springframework.core.log.CompositeLog : Response 200 OK
2021-07-19 18:34:08,455 DEBUG [DiscoveryClient-CacheRefreshExecutor-0] org.springframework.core.log.CompositeLog : Reading to [org.springframework.cloud.netflix.eureka.http.EurekaApplications]
2021-07-19 18:34:08,567 DEBUG [DiscoveryClient-HeartbeatExecutor-0] org.springframework.core.log.CompositeLog : HTTP PUT http://localhost:8761/eureka/apps/CUSTOMER_SERVICE/host.docker.internal:customer_service:8090?status=UP&lastDirtyTimestamp=1626737377737
2021-07-19 18:34:08,568 DEBUG [DiscoveryClient-HeartbeatExecutor-0] org.springframework.core.log.CompositeLog : Accept=[application/json, application/*+json]
2021-07-19 18:34:08,602 DEBUG [DiscoveryClient-HeartbeatExecutor-0] org.springframework.core.log.CompositeLog : Response 200 OK
2021-07-19 18:34:34,312 INFO [AsyncResolver-bootstrap-executor-0] com.netflix.discovery.shared.resolver.aws.ConfigClusterResolver : Resolving eureka endpoints via configuration
2021-07-19 18:34:38,459 DEBUG [DiscoveryClient-CacheRefreshExecutor-0] org.springframework.core.log.CompositeLog : HTTP GET http://localhost:8761/eureka/apps/delta
2021-07-19 18:34:38,460 DEBUG [DiscoveryClient-CacheRefreshExecutor-0] org.springframework.core.log.CompositeLog : Accept=[application/json, application/*+json]
2021-07-19 18:34:38,467 DEBUG [DiscoveryClient-CacheRefreshExecutor-0] org.springframework.core.log.CompositeLog : Response 200 OK
2021-07-19 18:34:38,467 DEBUG [DiscoveryClient-CacheRefreshExecutor-0] org.springframework.core.log.CompositeLog : Reading to [org.springframework.cloud.netflix.eureka.http.EurekaApplications]
2021-07-19 18:34:38,603 DEBUG [DiscoveryClient-HeartbeatExecutor-0] org.springframework.core.log.CompositeLog : HTTP PUT http://localhost:8761/eureka/apps/CUSTOMER_SERVICE/host.docker.internal:customer_service:8090?status=UP&lastDirtyTimestamp=1626737377737
2021-07-19 18:34:38,603 DEBUG [DiscoveryClient-HeartbeatExecutor-0] org.springframework.core.log.CompositeLog : Accept=[application/json, application/*+json]
2021-07-19 18:34:38,725 DEBUG [DiscoveryClient-HeartbeatExecutor-0] org.springframework.core.log.CompositeLog : Response 200 OK
2021-07-19 18:35:08,471 DEBUG [DiscoveryClient-CacheRefreshExecutor-0] org.springframework.core.log.CompositeLog : HTTP GET http://localhost:8761/eureka/apps/delta
2021-07-19 18:35:08,473 DEBUG [DiscoveryClient-CacheRefreshExecutor-0] org.springframework.core.log.CompositeLog : Accept=[application/json, application/*+json]
2021-07-19 18:35:08,583 DEBUG [DiscoveryClient-CacheRefreshExecutor-0] org.springframework.core.log.CompositeLog : Response 200 OK
2021-07-19 18:35:08,584 DEBUG [DiscoveryClient-CacheRefreshExecutor-0] org.springframework.core.log.CompositeLog : Reading to [org.springframework.cloud.netflix.eureka.http.EurekaApplications]
2021-07-19 18:35:08,727 DEBUG [DiscoveryClient-HeartbeatExecutor-0] org.springframework.core.log.CompositeLog : HTTP PUT http://localhost:8761/eureka/apps/CUSTOMER_SERVICE/host.docker.internal:customer_service:8090?status=UP&lastDirtyTimestamp=1626737377737
2021-07-19 18:35:08,727 DEBUG [DiscoveryClient-HeartbeatExecutor-0] org.springframework.core.log.CompositeLog : Accept=[application/json, application/*+json]
2021-07-19 18:35:08,786 DEBUG [DiscoveryClient-HeartbeatExecutor-0] org.springframework.core.log.CompositeLog : Response 200 OK
2021-07-19 18:35:38,587 DEBUG [DiscoveryClient-CacheRefreshExecutor-0] org.springframework.core.log.CompositeLog : HTTP GET http://localhost:8761/eureka/apps/delta
2021-07-19 18:35:38,590 DEBUG [DiscoveryClient-CacheRefreshExecutor-0] org.springframework.core.log.CompositeLog : Accept=[application/json, application/*+json]
2021-07-19 18:35:38,715 DEBUG [DiscoveryClient-CacheRefreshExecutor-0] org.springframework.core.log.CompositeLog : Response 200 OK
2021-07-19 18:35:38,715 DEBUG [DiscoveryClient-CacheRefreshExecutor-0] org.springframework.core.log.CompositeLog : Reading to [org.springframework.cloud.netflix.eureka.http.EurekaApplications]
2021-07-19 18:35:38,787 DEBUG [DiscoveryClient-HeartbeatExecutor-0] org.springframework.core.log.CompositeLog : HTTP PUT http://localhost:8761/eureka/apps/CUSTOMER_SERVICE/host.docker.internal:customer_service:8090?status=UP&lastDirtyTimestamp=1626737377737
2021-07-19 18:35:38,788 DEBUG [DiscoveryClient-HeartbeatExecutor-0] org.springframework.core.log.CompositeLog : Accept=[application/json, application/*+json]
2021-07-19 18:35:38,824 DEBUG [DiscoveryClient-HeartbeatExecutor-0] org.springframework.core.log.CompositeLog : Response 200 OK
2021-07-19 18:36:08,718 DEBUG [DiscoveryClient-CacheRefreshExecutor-0] org.springframework.core.log.CompositeLog : HTTP GET http://localhost:8761/eureka/apps/delta
2021-07-19 18:36:08,827 DEBUG [DiscoveryClient-HeartbeatExecutor-0] org.springframework.core.log.CompositeLog : HTTP PUT http://localhost:8761/eureka/apps/CUSTOMER_SERVICE/host.docker.internal:customer_service:8090?status=UP&lastDirtyTimestamp=1626737377737
2021-07-19 18:36:08,939 DEBUG [DiscoveryClient-CacheRefreshExecutor-0] org.springframework.core.log.CompositeLog : Accept=[application/json, application/*+json]
2021-07-19 18:36:08,939 DEBUG [DiscoveryClient-HeartbeatExecutor-0] org.springframework.core.log.CompositeLog : Accept=[application/json, application/*+json]
2021-07-19 18:36:08,946 DEBUG [DiscoveryClient-HeartbeatExecutor-0] org.springframework.core.log.CompositeLog : Response 200 OK
2021-07-19 18:36:08,945 DEBUG [DiscoveryClient-CacheRefreshExecutor-0] org.springframework.core.log.CompositeLog : Response 200 OK
2021-07-19 18:36:08,947 DEBUG [DiscoveryClient-CacheRefreshExecutor-0] org.springframework.core.log.CompositeLog : Reading to [org.springframework.cloud.netflix.eureka.http.EurekaApplications]
2021-07-19 18:36:38,949 DEBUG [DiscoveryClient-HeartbeatExecutor-0] org.springframework.core.log.CompositeLog : HTTP PUT http://localhost:8761/eureka/apps/CUSTOMER_SERVICE/host.docker.internal:customer_service:8090?status=UP&lastDirtyTimestamp=1626737377737
2021-07-19 18:36:38,949 DEBUG [DiscoveryClient-CacheRefreshExecutor-0] org.springframework.core.log.CompositeLog : HTTP GET http://localhost:8761/eureka/apps/delta
2021-07-19 18:36:38,950 DEBUG [DiscoveryClient-HeartbeatExecutor-0] org.springframework.core.log.CompositeLog : Accept=[application/json, application/*+json]
2021-07-19 18:36:38,950 DEBUG [DiscoveryClient-CacheRefreshExecutor-0] org.springframework.core.log.CompositeLog : Accept=[application/json, application/*+json]
2021-07-19 18:36:38,956 DEBUG [DiscoveryClient-HeartbeatExecutor-0] org.springframework.core.log.CompositeLog : Response 200 OK
2021-07-19 18:36:38,956 DEBUG [DiscoveryClient-CacheRefreshExecutor-0] org.springframework.core.log.CompositeLog : Response 200 OK
2021-07-19 18:36:38,958 DEBUG [DiscoveryClient-CacheRefreshExecutor-0] org.springframework.core.log.CompositeLog : Reading to [org.springframework.cloud.netflix.eureka.http.EurekaApplications]
2021-07-19 18:37:08,961 DEBUG [DiscoveryClient-HeartbeatExecutor-0] org.springframework.core.log.CompositeLog : HTTP PUT http://localhost:8761/eureka/apps/CUSTOMER_SERVICE/host.docker.internal:customer_service:8090?status=UP&lastDirtyTimestamp=1626737377737
2021-07-19 18:37:08,961 DEBUG [DiscoveryClient-CacheRefreshExecutor-0] org.springframework.core.log.CompositeLog : HTTP GET http://localhost:8761/eureka/apps/delta
2021-07-19 18:37:08,963 DEBUG [DiscoveryClient-HeartbeatExecutor-0] org.springframework.core.log.CompositeLog : Accept=[application/json, application/*+json]
2021-07-19 18:37:08,963 DEBUG [DiscoveryClient-CacheRefreshExecutor-0] org.springframework.core.log.CompositeLog : Accept=[application/json, application/*+json]
2021-07-19 18:37:09,057 DEBUG [DiscoveryClient-HeartbeatExecutor-0] org.springframework.core.log.CompositeLog : Response 200 OK
2021-07-19 18:37:09,059 DEBUG [DiscoveryClient-CacheRefreshExecutor-0] org.springframework.core.log.CompositeLog : Response 200 OK
2021-07-19 18:37:09,060 DEBUG [DiscoveryClient-CacheRefreshExecutor-0] org.springframework.core.log.CompositeLog : Reading to [org.springframework.cloud.netflix.eureka.http.EurekaApplications]
2021-07-19 18:37:39,062 DEBUG [DiscoveryClient-HeartbeatExecutor-0] org.springframework.core.log.CompositeLog : HTTP PUT http://localhost:8761/eureka/apps/CUSTOMER_SERVICE/host.docker.internal:customer_service:8090?status=UP&lastDirtyTimestamp=1626737377737
2021-07-19 18:37:39,063 DEBUG [DiscoveryClient-HeartbeatExecutor-0] org.springframework.core.log.CompositeLog : Accept=[application/json, application/*+json]
2021-07-19 18:37:39,064 DEBUG [DiscoveryClient-CacheRefreshExecutor-0] org.springframework.core.log.CompositeLog : HTTP GET http://localhost:8761/eureka/apps/delta
2021-07-19 18:37:39,065 DEBUG [DiscoveryClient-CacheRefreshExecutor-0] org.springframework.core.log.CompositeLog : Accept=[application/json, application/*+json]
2021-07-19 18:37:39,358 DEBUG [DiscoveryClient-CacheRefreshExecutor-0] org.springframework.core.log.CompositeLog : Response 200 OK
2021-07-19 18:37:39,359 DEBUG [DiscoveryClient-CacheRefreshExecutor-0] org.springframework.core.log.CompositeLog : Reading to [org.springframework.cloud.netflix.eureka.http.EurekaApplications]
2021-07-19 18:37:40,196 DEBUG [DiscoveryClient-HeartbeatExecutor-0] org.springframework.core.log.CompositeLog : Response 200 OK
2021-07-19 18:38:09,364 DEBUG [DiscoveryClient-CacheRefreshExecutor-0] org.springframework.core.log.CompositeLog : HTTP GET http://localhost:8761/eureka/apps/delta
2021-07-19 18:38:09,365 DEBUG [DiscoveryClient-CacheRefreshExecutor-0] org.springframework.core.log.CompositeLog : Accept=[application/json, application/*+json]
2021-07-19 18:38:09,371 DEBUG [DiscoveryClient-CacheRefreshExecutor-0] org.springframework.core.log.CompositeLog : Response 200 OK
2021-07-19 18:38:09,372 DEBUG [DiscoveryClient-CacheRefreshExecutor-0] org.springframework.core.log.CompositeLog : Reading to [org.springframework.cloud.netflix.eureka.http.EurekaApplications]
2021-07-19 18:38:10,198 DEBUG [DiscoveryClient-HeartbeatExecutor-0] org.springframework.core.log.CompositeLog : HTTP PUT http://localhost:8761/eureka/apps/CUSTOMER_SERVICE/host.docker.internal:customer_service:8090?status=UP&lastDirtyTimestamp=1626737377737
2021-07-19 18:38:10,198 DEBUG [DiscoveryClient-HeartbeatExecutor-0] org.springframework.core.log.CompositeLog : Accept=[application/json, application/*+json]
2021-07-19 18:38:10,202 DEBUG [DiscoveryClient-HeartbeatExecutor-0] org.springframework.core.log.CompositeLog : Response 200 OK
2021-07-19 18:38:39,374 DEBUG [DiscoveryClient-CacheRefreshExecutor-0] org.springframework.core.log.CompositeLog : HTTP GET http://localhost:8761/eureka/apps/delta
2021-07-19 18:38:39,375 DEBUG [DiscoveryClient-CacheRefreshExecutor-0] org.springframework.core.log.CompositeLog : Accept=[application/json, application/*+json]
2021-07-19 18:38:39,377 DEBUG [DiscoveryClient-CacheRefreshExecutor-0] org.springframework.core.log.CompositeLog : Response 200 OK
2021-07-19 18:38:39,377 DEBUG [DiscoveryClient-CacheRefreshExecutor-0] org.springframework.core.log.CompositeLog : Reading to [org.springframework.cloud.netflix.eureka.http.EurekaApplications]
2021-07-19 18:38:40,206 DEBUG [DiscoveryClient-HeartbeatExecutor-0] org.springframework.core.log.CompositeLog : HTTP PUT http://localhost:8761/eureka/apps/CUSTOMER_SERVICE/host.docker.internal:customer_service:8090?status=UP&lastDirtyTimestamp=1626737377737
2021-07-19 18:38:40,209 DEBUG [DiscoveryClient-HeartbeatExecutor-0] org.springframework.core.log.CompositeLog : Accept=[application/json, application/*+json]
2021-07-19 18:38:40,219 DEBUG [DiscoveryClient-HeartbeatExecutor-0] org.springframework.core.log.CompositeLog : Response 200 OK
2021-07-19 18:39:09,380 DEBUG [DiscoveryClient-CacheRefreshExecutor-0] org.springframework.core.log.CompositeLog : HTTP GET http://localhost:8761/eureka/apps/delta
2021-07-19 18:39:09,381 DEBUG [DiscoveryClient-CacheRefreshExecutor-0] org.springframework.core.log.CompositeLog : Accept=[application/json, application/*+json]
2021-07-19 18:39:09,394 DEBUG [DiscoveryClient-CacheRefreshExecutor-0] org.springframework.core.log.CompositeLog : Response 200 OK
2021-07-19 18:39:09,394 DEBUG [DiscoveryClient-CacheRefreshExecutor-0] org.springframework.core.log.CompositeLog : Reading to [org.springframework.cloud.netflix.eureka.http.EurekaApplications]
2021-07-19 18:39:10,224 DEBUG [DiscoveryClient-HeartbeatExecutor-0] org.springframework.core.log.CompositeLog : HTTP PUT http://localhost:8761/eureka/apps/CUSTOMER_SERVICE/host.docker.internal:customer_service:8090?status=UP&lastDirtyTimestamp=1626737377737
2021-07-19 18:39:10,225 DEBUG [DiscoveryClient-HeartbeatExecutor-0] org.springframework.core.log.CompositeLog : Accept=[application/json, application/*+json]
2021-07-19 18:39:10,233 DEBUG [DiscoveryClient-HeartbeatExecutor-0] org.springframework.core.log.CompositeLog : Response 200 OK
2021-07-19 18:39:34,315 INFO [AsyncResolver-bootstrap-executor-0] com.netflix.discovery.shared.resolver.aws.ConfigClusterResolver : Resolving eureka endpoints via configuration
2021-07-19 18:39:39,397 DEBUG [DiscoveryClient-CacheRefreshExecutor-0] org.springframework.core.log.CompositeLog : HTTP GET http://localhost:8761/eureka/apps/delta
2021-07-19 18:39:39,398 DEBUG [DiscoveryClient-CacheRefreshExecutor-0] org.springframework.core.log.CompositeLog : Accept=[application/json, application/*+json]
2021-07-19 18:39:39,402 DEBUG [DiscoveryClient-CacheRefreshExecutor-0] org.springframework.core.log.CompositeLog : Response 200 OK
2021-07-19 18:39:39,403 DEBUG [DiscoveryClient-CacheRefreshExecutor-0] org.springframework.core.log.CompositeLog : Reading to [org.springframework.cloud.netflix.eureka.http.EurekaApplications]
2021-07-19 18:39:40,236 DEBUG [DiscoveryClient-HeartbeatExecutor-0] org.springframework.core.log.CompositeLog : HTTP PUT http://localhost:8761/eureka/apps/CUSTOMER_SERVICE/host.docker.internal:customer_service:8090?status=UP&lastDirtyTimestamp=1626737377737
2021-07-19 18:39:40,237 DEBUG [DiscoveryClient-HeartbeatExecutor-0] org.springframework.core.log.CompositeLog : Accept=[application/json, application/*+json]
2021-07-19 18:39:40,397 DEBUG [DiscoveryClient-HeartbeatExecutor-0] org.springframework.core.log.CompositeLog : Response 200 OK
2021-07-19 18:39:46,382 DEBUG [reactor-http-nio-3] org.springframework.core.log.LogFormatUtils : [c56fd059-2, L:/0:0:0:0:0:0:0:1:8090 - R:/0:0:0:0:0:0:0:1:54520] HTTP GET "/"
2021-07-19 18:39:46,513 DEBUG [reactor-http-nio-3] org.springframework.web.reactive.handler.AbstractHandlerMapping : [c56fd059-2, L:/0:0:0:0:0:0:0:1:8090 - R:/0:0:0:0:0:0:0:1:54520] Mapped to ResourceWebHandler ["classpath:/META-INF/resources/", "classpath:/resources/", "classpath:/static/", "classpath:/public/"]
2021-07-19 18:39:46,643 DEBUG [reactor-http-nio-3] org.springframework.web.reactive.resource.ResourceWebHandler : [c56fd059-2, L:/0:0:0:0:0:0:0:1:8090 - R:/0:0:0:0:0:0:0:1:54520] Resource not found
2021-07-19 18:39:46,644 DEBUG [reactor-http-nio-3] org.springframework.core.log.CompositeLog : [c56fd059-2, L:/0:0:0:0:0:0:0:1:8090 - R:/0:0:0:0:0:0:0:1:54520] Resolved [ResponseStatusException: 404 NOT_FOUND] for HTTP GET /
2021-07-19 18:39:46,645 DEBUG [reactor-http-nio-3] org.springframework.core.log.CompositeLog : [c56fd059-2, L:/0:0:0:0:0:0:0:1:8090 - R:/0:0:0:0:0:0:0:1:54520] Encoding [{timestamp=Mon Jul 19 18:39:46 COT 2021, path=/, status=404, error=Not Found, message=null, requestI (truncated)...]
2021-07-19 18:39:46,646 DEBUG [reactor-http-nio-3] org.springframework.core.log.LogFormatUtils : [c56fd059-2, L:/0:0:0:0:0:0:0:1:8090 - R:/0:0:0:0:0:0:0:1:54520] Completed 404 NOT_FOUND
2021-07-19 18:39:49,549 DEBUG [reactor-http-nio-3] org.springframework.core.log.LogFormatUtils : [c56fd059-3, L:/0:0:0:0:0:0:0:1:8090 - R:/0:0:0:0:0:0:0:1:54520] HTTP GET "/"
2021-07-19 18:39:49,550 DEBUG [reactor-http-nio-3] org.springframework.web.reactive.handler.AbstractHandlerMapping : [c56fd059-3, L:/0:0:0:0:0:0:0:1:8090 - R:/0:0:0:0:0:0:0:1:54520] Mapped to ResourceWebHandler ["classpath:/META-INF/resources/", "classpath:/resources/", "classpath:/static/", "classpath:/public/"]
2021-07-19 18:39:49,550 DEBUG [reactor-http-nio-3] org.springframework.web.reactive.resource.ResourceWebHandler : [c56fd059-3, L:/0:0:0:0:0:0:0:1:8090 - R:/0:0:0:0:0:0:0:1:54520] Resource not found
2021-07-19 18:39:49,551 DEBUG [reactor-http-nio-3] org.springframework.core.log.CompositeLog : [c56fd059-3, L:/0:0:0:0:0:0:0:1:8090 - R:/0:0:0:0:0:0:0:1:54520] Resolved [ResponseStatusException: 404 NOT_FOUND] for HTTP GET /
2021-07-19 18:39:49,552 DEBUG [reactor-http-nio-3] org.springframework.core.log.CompositeLog : [c56fd059-3, L:/0:0:0:0:0:0:0:1:8090 - R:/0:0:0:0:0:0:0:1:54520] Encoding [{timestamp=Mon Jul 19 18:39:49 COT 2021, path=/, status=404, error=Not Found, message=null, requestI (truncated)...]
2021-07-19 18:39:49,553 DEBUG [reactor-http-nio-3] org.springframework.core.log.LogFormatUtils : [c56fd059-3, L:/0:0:0:0:0:0:0:1:8090 - R:/0:0:0:0:0:0:0:1:54520] Completed 404 NOT_FOUND
2021-07-19 18:40:09,405 DEBUG [DiscoveryClient-CacheRefreshExecutor-0] org.springframework.core.log.CompositeLog : HTTP GET http://localhost:8761/eureka/apps/delta
2021-07-19 18:40:09,475 DEBUG [DiscoveryClient-CacheRefreshExecutor-0] org.springframework.core.log.CompositeLog : Accept=[application/json, application/*+json]
2021-07-19 18:40:09,481 DEBUG [DiscoveryClient-CacheRefreshExecutor-0] org.springframework.core.log.CompositeLog : Response 200 OK
2021-07-19 18:40:09,482 DEBUG [DiscoveryClient-CacheRefreshExecutor-0] org.springframework.core.log.CompositeLog : Reading to [org.springframework.cloud.netflix.eureka.http.EurekaApplications]
2021-07-19 18:40:10,398 DEBUG [DiscoveryClient-HeartbeatExecutor-0] org.springframework.core.log.CompositeLog : HTTP PUT http://localhost:8761/eureka/apps/CUSTOMER_SERVICE/host.docker.internal:customer_service:8090?status=UP&lastDirtyTimestamp=1626737377737
2021-07-19 18:40:10,399 DEBUG [DiscoveryClient-HeartbeatExecutor-0] org.springframework.core.log.CompositeLog : Accept=[application/json, application/*+json]
2021-07-19 18:40:10,403 DEBUG [DiscoveryClient-HeartbeatExecutor-0] org.springframework.core.log.CompositeLog : Response 200 OK
2021-07-19 18:40:38,204 DEBUG [reactor-http-nio-3] org.springframework.core.log.LogFormatUtils : [c56fd059-4, L:/0:0:0:0:0:0:0:1:8090 - R:/0:0:0:0:0:0:0:1:54520] HTTP GET "/customer"
2021-07-19 18:40:38,221 DEBUG [reactor-http-nio-3] org.springframework.web.reactive.handler.AbstractHandlerMapping : [c56fd059-4, L:/0:0:0:0:0:0:0:1:8090 - R:/0:0:0:0:0:0:0:1:54520] Mapped to com.bank.manage.customer.controller.CustomerController#getAllCustomers()
2021-07-19 18:40:38,360 INFO [reactor-http-nio-3] com.bank.manage.customer.controller.CustomerController :  EndPoit get by all customers {} 
2021-07-19 18:40:38,690 DEBUG [reactor-http-nio-3] org.springframework.web.reactive.result.HandlerResultHandlerSupport : [c56fd059-4, L:/0:0:0:0:0:0:0:1:8090 - R:/0:0:0:0:0:0:0:1:54520] Found 'Content-Type:application/json' in response
2021-07-19 18:40:38,690 DEBUG [reactor-http-nio-3] org.springframework.web.reactive.result.method.annotation.AbstractMessageWriterResultHandler : [c56fd059-4, L:/0:0:0:0:0:0:0:1:8090 - R:/0:0:0:0:0:0:0:1:54520] 0..N [com.bank.manage.customer.persistence.entity.Customer]
2021-07-19 18:40:39,154 INFO [nioEventLoopGroup-3-3] com.mongodb.diagnostics.logging.SLF4JLogger : Opened connection [connectionId{localValue:3, serverValue:11}] to localhost:27017
2021-07-19 18:40:39,486 DEBUG [DiscoveryClient-CacheRefreshExecutor-0] org.springframework.core.log.CompositeLog : HTTP GET http://localhost:8761/eureka/apps/delta
2021-07-19 18:40:39,487 DEBUG [DiscoveryClient-CacheRefreshExecutor-0] org.springframework.core.log.CompositeLog : Accept=[application/json, application/*+json]
2021-07-19 18:40:39,493 DEBUG [nioEventLoopGroup-3-3] org.springframework.core.log.CompositeLog : [c56fd059-4, L:/0:0:0:0:0:0:0:1:8090 - R:/0:0:0:0:0:0:0:1:54520] Resolved [ConversionFailedException: Failed to convert from type [java.lang.Double] to type [java.lang.Integer] for value '9.89898968968E11'; nested exception is java.lang.IllegalArgumentException: Could not convert number [9.89898968968E11] of type [java.lang.Double] to target class [java.lang.Integer]: overflow] for HTTP GET /customer
2021-07-19 18:40:39,515 ERROR [nioEventLoopGroup-3-3] org.springframework.core.log.CompositeLog : [c56fd059-4, L:/0:0:0:0:0:0:0:1:8090 - R:/0:0:0:0:0:0:0:1:54520]  500 Server Error for HTTP GET "/customer"
org.springframework.core.convert.ConversionFailedException: Failed to convert from type [java.lang.Double] to type [java.lang.Integer] for value '9.89898968968E11'; nested exception is java.lang.IllegalArgumentException: Could not convert number [9.89898968968E11] of type [java.lang.Double] to target class [java.lang.Integer]: overflow
	at org.springframework.core.convert.support.ConversionUtils.invokeConverter(ConversionUtils.java:47)
	Suppressed: reactor.core.publisher.FluxOnAssembly$OnAssemblyException: 
Error has been observed at the following site(s):
	|_ checkpoint ⇢ Handler com.bank.manage.customer.controller.CustomerController#getAllCustomers() [DispatcherHandler]
	|_ checkpoint ⇢ org.springframework.boot.actuate.metrics.web.reactive.server.MetricsWebFilter [DefaultWebFilterChain]
	|_ checkpoint ⇢ HTTP GET "/customer" [ExceptionHandlingWebHandler]
Stack trace:
		at org.springframework.core.convert.support.ConversionUtils.invokeConverter(ConversionUtils.java:47)
		at org.springframework.core.convert.support.GenericConversionService.convert(GenericConversionService.java:192)
		at org.springframework.core.convert.support.GenericConversionService.convert(GenericConversionService.java:175)
		at org.springframework.data.mongodb.core.convert.MappingMongoConverter.doConvert(MappingMongoConverter.java:1547)
		at org.springframework.data.mongodb.core.convert.MappingMongoConverter.doConvert(MappingMongoConverter.java:1540)
		at org.springframework.data.mongodb.core.convert.MappingMongoConverter.getPotentiallyConvertedSimpleRead(MappingMongoConverter.java:1060)
		at org.springframework.data.mongodb.core.convert.MappingMongoConverter.getPotentiallyConvertedSimpleRead(MappingMongoConverter.java:1038)
		at org.springframework.data.mongodb.core.convert.MappingMongoConverter$ConversionContext.convert(MappingMongoConverter.java:1919)
		at org.springframework.data.mongodb.core.convert.MappingMongoConverter$MongoDbPropertyValueProvider.getPropertyValue(MappingMongoConverter.java:1641)
		at org.springframework.data.mongodb.core.convert.MappingMongoConverter.readProperties(MappingMongoConverter.java:481)
		at org.springframework.data.mongodb.core.convert.MappingMongoConverter.populateProperties(MappingMongoConverter.java:394)
		at org.springframework.data.mongodb.core.convert.MappingMongoConverter.read(MappingMongoConverter.java:372)
		at org.springframework.data.mongodb.core.convert.MappingMongoConverter.readDocument(MappingMongoConverter.java:342)
		at org.springframework.data.mongodb.core.convert.MappingMongoConverter.read(MappingMongoConverter.java:278)
		at org.springframework.data.mongodb.core.convert.MappingMongoConverter.read(MappingMongoConverter.java:274)
		at org.springframework.data.mongodb.core.convert.MappingMongoConverter.read(MappingMongoConverter.java:102)
		at org.springframework.data.mongodb.core.ReactiveMongoTemplate$ReadDocumentCallback.doWith(ReactiveMongoTemplate.java:3155)
		at reactor.core.publisher.FluxConcatMap$ConcatMapImmediate.drain(FluxConcatMap.java:374)
		at reactor.core.publisher.FluxConcatMap$ConcatMapImmediate.onNext(FluxConcatMap.java:250)
		at reactor.core.publisher.FluxCreate$BufferAsyncSink.drain(FluxCreate.java:793)
		at reactor.core.publisher.FluxCreate$BufferAsyncSink.next(FluxCreate.java:718)
		at reactor.core.publisher.FluxCreate$SerializedFluxSink.next(FluxCreate.java:154)
		at java.util.ArrayList.forEach(ArrayList.java:1259)
		at com.mongodb.reactivestreams.client.internal.BatchCursorFlux.lambda$recurseCursor$4(BatchCursorFlux.java:94)
		at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.onNext(MonoPeekTerminal.java:171)
		at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.onNext(MonoPeekTerminal.java:180)
		at reactor.core.publisher.FluxPeekFuseable$PeekConditionalSubscriber.onNext(FluxPeekFuseable.java:854)
		at reactor.core.publisher.MonoCreate$DefaultMonoSink.success(MonoCreate.java:160)
		at com.mongodb.reactivestreams.client.internal.MongoOperationPublisher.lambda$sinkToCallback$30(MongoOperationPublisher.java:550)
		at com.mongodb.internal.operation.AsyncQueryBatchCursor.next(AsyncQueryBatchCursor.java:207)
		at com.mongodb.internal.operation.AsyncQueryBatchCursor.next(AsyncQueryBatchCursor.java:146)
		at com.mongodb.reactivestreams.client.internal.BatchCursor.lambda$next$0(BatchCursor.java:35)
		at reactor.core.publisher.MonoCreate.subscribe(MonoCreate.java:57)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4150)
		at reactor.core.publisher.Mono.subscribeWith(Mono.java:4265)
		at reactor.core.publisher.Mono.subscribe(Mono.java:3982)
		at com.mongodb.reactivestreams.client.internal.BatchCursorFlux.recurseCursor(BatchCursorFlux.java:104)
		at com.mongodb.reactivestreams.client.internal.BatchCursorFlux.lambda$subscribe$0(BatchCursorFlux.java:56)
		at reactor.core.publisher.LambdaMonoSubscriber.onNext(LambdaMonoSubscriber.java:171)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onNext(FluxMapFuseable.java:127)
		at reactor.core.publisher.Operators$MonoSubscriber.complete(Operators.java:1815)
		at reactor.core.publisher.MonoFlatMap$FlatMapInner.onNext(MonoFlatMap.java:249)
		at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.onNext(MonoPeekTerminal.java:180)
		at reactor.core.publisher.MonoCreate$DefaultMonoSink.success(MonoCreate.java:160)
		at com.mongodb.reactivestreams.client.internal.MongoOperationPublisher.lambda$sinkToCallback$30(MongoOperationPublisher.java:550)
		at com.mongodb.reactivestreams.client.internal.OperationExecutorImpl.lambda$execute$2(OperationExecutorImpl.java:73)
		at com.mongodb.internal.async.ErrorHandlingResultCallback.onResult(ErrorHandlingResultCallback.java:48)
		at com.mongodb.internal.operation.FindOperation$3.onResult(FindOperation.java:755)
		at com.mongodb.internal.operation.OperationHelper$ReferenceCountedReleasingWrappedCallback.onResult(OperationHelper.java:532)
		at com.mongodb.internal.operation.CommandOperationHelper$10.onResult(CommandOperationHelper.java:483)
		at com.mongodb.internal.async.ErrorHandlingResultCallback.onResult(ErrorHandlingResultCallback.java:48)
		at com.mongodb.internal.connection.DefaultServer$DefaultServerProtocolExecutor$2.onResult(DefaultServer.java:286)
		at com.mongodb.internal.async.ErrorHandlingResultCallback.onResult(ErrorHandlingResultCallback.java:48)
		at com.mongodb.internal.connection.CommandProtocolImpl$1.onResult(CommandProtocolImpl.java:84)
		at com.mongodb.internal.connection.DefaultConnectionPool$PooledConnection$2.onResult(DefaultConnectionPool.java:530)
		at com.mongodb.internal.connection.UsageTrackingInternalConnection$2.onResult(UsageTrackingInternalConnection.java:142)
		at com.mongodb.internal.async.ErrorHandlingResultCallback.onResult(ErrorHandlingResultCallback.java:48)
		at com.mongodb.internal.connection.InternalStreamConnection$2$1.onResult(InternalStreamConnection.java:462)
		at com.mongodb.internal.connection.InternalStreamConnection$2$1.onResult(InternalStreamConnection.java:439)
		at com.mongodb.internal.connection.InternalStreamConnection$MessageHeaderCallback$MessageCallback.onResult(InternalStreamConnection.java:744)
		at com.mongodb.internal.connection.InternalStreamConnection$MessageHeaderCallback$MessageCallback.onResult(InternalStreamConnection.java:711)
		at com.mongodb.internal.connection.InternalStreamConnection$5.completed(InternalStreamConnection.java:581)
		at com.mongodb.internal.connection.InternalStreamConnection$5.completed(InternalStreamConnection.java:578)
		at com.mongodb.connection.netty.NettyStream.readAsync(NettyStream.java:322)
		at com.mongodb.connection.netty.NettyStream.handleReadResponse(NettyStream.java:350)
		at com.mongodb.connection.netty.NettyStream.access$1200(NettyStream.java:104)
		at com.mongodb.connection.netty.NettyStream$InboundBufferHandler.channelRead0(NettyStream.java:409)
		at com.mongodb.connection.netty.NettyStream$InboundBufferHandler.channelRead0(NettyStream.java:406)
		at io.netty.channel.SimpleChannelInboundHandler.channelRead(SimpleChannelInboundHandler.java:99)
		at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:379)
		at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:365)
		at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:357)
		at io.netty.channel.DefaultChannelPipeline$HeadContext.channelRead(DefaultChannelPipeline.java:1410)
		at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:379)
		at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:365)
		at io.netty.channel.DefaultChannelPipeline.fireChannelRead(DefaultChannelPipeline.java:919)
		at io.netty.channel.nio.AbstractNioByteChannel$NioByteUnsafe.read(AbstractNioByteChannel.java:166)
		at io.netty.channel.nio.NioEventLoop.processSelectedKey(NioEventLoop.java:719)
		at io.netty.channel.nio.NioEventLoop.processSelectedKeysOptimized(NioEventLoop.java:655)
		at io.netty.channel.nio.NioEventLoop.processSelectedKeys(NioEventLoop.java:581)
		at io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:493)
		at io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:989)
		at io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)
		at io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)
		at java.lang.Thread.run(Thread.java:748)
Caused by: java.lang.IllegalArgumentException: Could not convert number [9.89898968968E11] of type [java.lang.Double] to target class [java.lang.Integer]: overflow
	at org.springframework.util.NumberUtils.raiseOverflowException(NumberUtils.java:175)
	at org.springframework.util.NumberUtils.convertNumberToTargetClass(NumberUtils.java:108)
	at org.springframework.core.convert.support.NumberToNumberConverterFactory$NumberToNumber.convert(NumberToNumberConverterFactory.java:66)
	at org.springframework.core.convert.support.NumberToNumberConverterFactory$NumberToNumber.convert(NumberToNumberConverterFactory.java:56)
	at org.springframework.core.convert.support.GenericConversionService$ConverterFactoryAdapter.convert(GenericConversionService.java:437)
	at org.springframework.core.convert.support.ConversionUtils.invokeConverter(ConversionUtils.java:41)
	at org.springframework.core.convert.support.GenericConversionService.convert(GenericConversionService.java:192)
	at org.springframework.core.convert.support.GenericConversionService.convert(GenericConversionService.java:175)
	at org.springframework.data.mongodb.core.convert.MappingMongoConverter.doConvert(MappingMongoConverter.java:1547)
	at org.springframework.data.mongodb.core.convert.MappingMongoConverter.doConvert(MappingMongoConverter.java:1540)
	at org.springframework.data.mongodb.core.convert.MappingMongoConverter.getPotentiallyConvertedSimpleRead(MappingMongoConverter.java:1060)
	at org.springframework.data.mongodb.core.convert.MappingMongoConverter.getPotentiallyConvertedSimpleRead(MappingMongoConverter.java:1038)
	at org.springframework.data.mongodb.core.convert.MappingMongoConverter$ConversionContext.convert(MappingMongoConverter.java:1919)
	at org.springframework.data.mongodb.core.convert.MappingMongoConverter$MongoDbPropertyValueProvider.getPropertyValue(MappingMongoConverter.java:1641)
	at org.springframework.data.mongodb.core.convert.MappingMongoConverter.readProperties(MappingMongoConverter.java:481)
	at org.springframework.data.mongodb.core.convert.MappingMongoConverter.populateProperties(MappingMongoConverter.java:394)
	at org.springframework.data.mongodb.core.convert.MappingMongoConverter.read(MappingMongoConverter.java:372)
	at org.springframework.data.mongodb.core.convert.MappingMongoConverter.readDocument(MappingMongoConverter.java:342)
	at org.springframework.data.mongodb.core.convert.MappingMongoConverter.read(MappingMongoConverter.java:278)
	at org.springframework.data.mongodb.core.convert.MappingMongoConverter.read(MappingMongoConverter.java:274)
	at org.springframework.data.mongodb.core.convert.MappingMongoConverter.read(MappingMongoConverter.java:102)
	at org.springframework.data.mongodb.core.ReactiveMongoTemplate$ReadDocumentCallback.doWith(ReactiveMongoTemplate.java:3155)
	at reactor.core.publisher.FluxConcatMap$ConcatMapImmediate.drain(FluxConcatMap.java:374)
	at reactor.core.publisher.FluxConcatMap$ConcatMapImmediate.onNext(FluxConcatMap.java:250)
	at reactor.core.publisher.FluxCreate$BufferAsyncSink.drain(FluxCreate.java:793)
	at reactor.core.publisher.FluxCreate$BufferAsyncSink.next(FluxCreate.java:718)
	at reactor.core.publisher.FluxCreate$SerializedFluxSink.next(FluxCreate.java:154)
	at java.util.ArrayList.forEach(ArrayList.java:1259)
	at com.mongodb.reactivestreams.client.internal.BatchCursorFlux.lambda$recurseCursor$4(BatchCursorFlux.java:94)
	at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.onNext(MonoPeekTerminal.java:171)
	at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.onNext(MonoPeekTerminal.java:180)
	at reactor.core.publisher.FluxPeekFuseable$PeekConditionalSubscriber.onNext(FluxPeekFuseable.java:854)
	at reactor.core.publisher.MonoCreate$DefaultMonoSink.success(MonoCreate.java:160)
	at com.mongodb.reactivestreams.client.internal.MongoOperationPublisher.lambda$sinkToCallback$30(MongoOperationPublisher.java:550)
	at com.mongodb.internal.operation.AsyncQueryBatchCursor.next(AsyncQueryBatchCursor.java:207)
	at com.mongodb.internal.operation.AsyncQueryBatchCursor.next(AsyncQueryBatchCursor.java:146)
	at com.mongodb.reactivestreams.client.internal.BatchCursor.lambda$next$0(BatchCursor.java:35)
	at reactor.core.publisher.MonoCreate.subscribe(MonoCreate.java:57)
	at reactor.core.publisher.Mono.subscribe(Mono.java:4150)
	at reactor.core.publisher.Mono.subscribeWith(Mono.java:4265)
	at reactor.core.publisher.Mono.subscribe(Mono.java:3982)
	at com.mongodb.reactivestreams.client.internal.BatchCursorFlux.recurseCursor(BatchCursorFlux.java:104)
	at com.mongodb.reactivestreams.client.internal.BatchCursorFlux.lambda$subscribe$0(BatchCursorFlux.java:56)
	at reactor.core.publisher.LambdaMonoSubscriber.onNext(LambdaMonoSubscriber.java:171)
	at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onNext(FluxMapFuseable.java:127)
	at reactor.core.publisher.Operators$MonoSubscriber.complete(Operators.java:1815)
	at reactor.core.publisher.MonoFlatMap$FlatMapInner.onNext(MonoFlatMap.java:249)
	at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.onNext(MonoPeekTerminal.java:180)
	at reactor.core.publisher.MonoCreate$DefaultMonoSink.success(MonoCreate.java:160)
	at com.mongodb.reactivestreams.client.internal.MongoOperationPublisher.lambda$sinkToCallback$30(MongoOperationPublisher.java:550)
	at com.mongodb.reactivestreams.client.internal.OperationExecutorImpl.lambda$execute$2(OperationExecutorImpl.java:73)
	at com.mongodb.internal.async.ErrorHandlingResultCallback.onResult(ErrorHandlingResultCallback.java:48)
	at com.mongodb.internal.operation.FindOperation$3.onResult(FindOperation.java:755)
	at com.mongodb.internal.operation.OperationHelper$ReferenceCountedReleasingWrappedCallback.onResult(OperationHelper.java:532)
	at com.mongodb.internal.operation.CommandOperationHelper$10.onResult(CommandOperationHelper.java:483)
	at com.mongodb.internal.async.ErrorHandlingResultCallback.onResult(ErrorHandlingResultCallback.java:48)
	at com.mongodb.internal.connection.DefaultServer$DefaultServerProtocolExecutor$2.onResult(DefaultServer.java:286)
	at com.mongodb.internal.async.ErrorHandlingResultCallback.onResult(ErrorHandlingResultCallback.java:48)
	at com.mongodb.internal.connection.CommandProtocolImpl$1.onResult(CommandProtocolImpl.java:84)
	at com.mongodb.internal.connection.DefaultConnectionPool$PooledConnection$2.onResult(DefaultConnectionPool.java:530)
	at com.mongodb.internal.connection.UsageTrackingInternalConnection$2.onResult(UsageTrackingInternalConnection.java:142)
	at com.mongodb.internal.async.ErrorHandlingResultCallback.onResult(ErrorHandlingResultCallback.java:48)
	at com.mongodb.internal.connection.InternalStreamConnection$2$1.onResult(InternalStreamConnection.java:462)
	at com.mongodb.internal.connection.InternalStreamConnection$2$1.onResult(InternalStreamConnection.java:439)
	at com.mongodb.internal.connection.InternalStreamConnection$MessageHeaderCallback$MessageCallback.onResult(InternalStreamConnection.java:744)
	at com.mongodb.internal.connection.InternalStreamConnection$MessageHeaderCallback$MessageCallback.onResult(InternalStreamConnection.java:711)
	at com.mongodb.internal.connection.InternalStreamConnection$5.completed(InternalStreamConnection.java:581)
	at com.mongodb.internal.connection.InternalStreamConnection$5.completed(InternalStreamConnection.java:578)
	at com.mongodb.connection.netty.NettyStream.readAsync(NettyStream.java:322)
	at com.mongodb.connection.netty.NettyStream.handleReadResponse(NettyStream.java:350)
	at com.mongodb.connection.netty.NettyStream.access$1200(NettyStream.java:104)
	at com.mongodb.connection.netty.NettyStream$InboundBufferHandler.channelRead0(NettyStream.java:409)
	at com.mongodb.connection.netty.NettyStream$InboundBufferHandler.channelRead0(NettyStream.java:406)
	at io.netty.channel.SimpleChannelInboundHandler.channelRead(SimpleChannelInboundHandler.java:99)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:379)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:365)
	at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:357)
	at io.netty.channel.DefaultChannelPipeline$HeadContext.channelRead(DefaultChannelPipeline.java:1410)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:379)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:365)
	at io.netty.channel.DefaultChannelPipeline.fireChannelRead(DefaultChannelPipeline.java:919)
	at io.netty.channel.nio.AbstractNioByteChannel$NioByteUnsafe.read(AbstractNioByteChannel.java:166)
	at io.netty.channel.nio.NioEventLoop.processSelectedKey(NioEventLoop.java:719)
	at io.netty.channel.nio.NioEventLoop.processSelectedKeysOptimized(NioEventLoop.java:655)
	at io.netty.channel.nio.NioEventLoop.processSelectedKeys(NioEventLoop.java:581)
	at io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:493)
	at io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:989)
	at io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)
	at io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)
	at java.lang.Thread.run(Thread.java:748)
2021-07-19 18:40:39,518 DEBUG [nioEventLoopGroup-3-3] org.springframework.core.log.CompositeLog : [c56fd059-4, L:/0:0:0:0:0:0:0:1:8090 - R:/0:0:0:0:0:0:0:1:54520] Encoding [{timestamp=Mon Jul 19 18:40:39 COT 2021, path=/customer, status=500, error=Internal Server Error, re (truncated)...]
2021-07-19 18:40:39,521 DEBUG [reactor-http-nio-3] org.springframework.core.log.LogFormatUtils : [c56fd059-4, L:/0:0:0:0:0:0:0:1:8090 - R:/0:0:0:0:0:0:0:1:54520] Completed 500 INTERNAL_SERVER_ERROR
2021-07-19 18:40:39,537 DEBUG [DiscoveryClient-CacheRefreshExecutor-0] org.springframework.core.log.CompositeLog : Response 200 OK
2021-07-19 18:40:39,537 DEBUG [DiscoveryClient-CacheRefreshExecutor-0] org.springframework.core.log.CompositeLog : Reading to [org.springframework.cloud.netflix.eureka.http.EurekaApplications]
2021-07-19 18:40:40,406 DEBUG [DiscoveryClient-HeartbeatExecutor-0] org.springframework.core.log.CompositeLog : HTTP PUT http://localhost:8761/eureka/apps/CUSTOMER_SERVICE/host.docker.internal:customer_service:8090?status=UP&lastDirtyTimestamp=1626737377737
2021-07-19 18:40:40,406 DEBUG [DiscoveryClient-HeartbeatExecutor-0] org.springframework.core.log.CompositeLog : Accept=[application/json, application/*+json]
2021-07-19 18:40:40,410 DEBUG [DiscoveryClient-HeartbeatExecutor-0] org.springframework.core.log.CompositeLog : Response 200 OK
2021-07-19 18:41:09,541 DEBUG [DiscoveryClient-CacheRefreshExecutor-0] org.springframework.core.log.CompositeLog : HTTP GET http://localhost:8761/eureka/apps/delta
2021-07-19 18:41:09,542 DEBUG [DiscoveryClient-CacheRefreshExecutor-0] org.springframework.core.log.CompositeLog : Accept=[application/json, application/*+json]
2021-07-19 18:41:09,549 DEBUG [DiscoveryClient-CacheRefreshExecutor-0] org.springframework.core.log.CompositeLog : Response 200 OK
2021-07-19 18:41:09,550 DEBUG [DiscoveryClient-CacheRefreshExecutor-0] org.springframework.core.log.CompositeLog : Reading to [org.springframework.cloud.netflix.eureka.http.EurekaApplications]
2021-07-19 18:41:10,414 DEBUG [DiscoveryClient-HeartbeatExecutor-0] org.springframework.core.log.CompositeLog : HTTP PUT http://localhost:8761/eureka/apps/CUSTOMER_SERVICE/host.docker.internal:customer_service:8090?status=UP&lastDirtyTimestamp=1626737377737
2021-07-19 18:41:10,415 DEBUG [DiscoveryClient-HeartbeatExecutor-0] org.springframework.core.log.CompositeLog : Accept=[application/json, application/*+json]
2021-07-19 18:41:10,420 DEBUG [DiscoveryClient-HeartbeatExecutor-0] org.springframework.core.log.CompositeLog : Response 200 OK
2021-07-19 18:41:39,552 DEBUG [DiscoveryClient-CacheRefreshExecutor-0] org.springframework.core.log.CompositeLog : HTTP GET http://localhost:8761/eureka/apps/delta
2021-07-19 18:41:39,553 DEBUG [DiscoveryClient-CacheRefreshExecutor-0] org.springframework.core.log.CompositeLog : Accept=[application/json, application/*+json]
2021-07-19 18:41:39,555 DEBUG [DiscoveryClient-CacheRefreshExecutor-0] org.springframework.core.log.CompositeLog : Response 200 OK
2021-07-19 18:41:39,556 DEBUG [DiscoveryClient-CacheRefreshExecutor-0] org.springframework.core.log.CompositeLog : Reading to [org.springframework.cloud.netflix.eureka.http.EurekaApplications]
2021-07-19 18:41:40,422 DEBUG [DiscoveryClient-HeartbeatExecutor-0] org.springframework.core.log.CompositeLog : HTTP PUT http://localhost:8761/eureka/apps/CUSTOMER_SERVICE/host.docker.internal:customer_service:8090?status=UP&lastDirtyTimestamp=1626737377737
2021-07-19 18:41:40,424 DEBUG [DiscoveryClient-HeartbeatExecutor-0] org.springframework.core.log.CompositeLog : Accept=[application/json, application/*+json]
2021-07-19 18:41:40,432 DEBUG [DiscoveryClient-HeartbeatExecutor-0] org.springframework.core.log.CompositeLog : Response 200 OK
2021-07-19 18:42:09,558 DEBUG [DiscoveryClient-CacheRefreshExecutor-0] org.springframework.core.log.CompositeLog : HTTP GET http://localhost:8761/eureka/apps/delta
2021-07-19 18:42:09,560 DEBUG [DiscoveryClient-CacheRefreshExecutor-0] org.springframework.core.log.CompositeLog : Accept=[application/json, application/*+json]
2021-07-19 18:42:09,565 DEBUG [DiscoveryClient-CacheRefreshExecutor-0] org.springframework.core.log.CompositeLog : Response 200 OK
2021-07-19 18:42:09,566 DEBUG [DiscoveryClient-CacheRefreshExecutor-0] org.springframework.core.log.CompositeLog : Reading to [org.springframework.cloud.netflix.eureka.http.EurekaApplications]
2021-07-19 18:42:10,435 DEBUG [DiscoveryClient-HeartbeatExecutor-0] org.springframework.core.log.CompositeLog : HTTP PUT http://localhost:8761/eureka/apps/CUSTOMER_SERVICE/host.docker.internal:customer_service:8090?status=UP&lastDirtyTimestamp=1626737377737
2021-07-19 18:42:10,436 DEBUG [DiscoveryClient-HeartbeatExecutor-0] org.springframework.core.log.CompositeLog : Accept=[application/json, application/*+json]
2021-07-19 18:42:10,698 DEBUG [DiscoveryClient-HeartbeatExecutor-0] org.springframework.core.log.CompositeLog : Response 200 OK
2021-07-19 18:42:13,183 DEBUG [reactor-http-nio-3] org.springframework.core.log.LogFormatUtils : [c56fd059-5, L:/0:0:0:0:0:0:0:1:8090 - R:/0:0:0:0:0:0:0:1:54520] HTTP GET "/customer/60e231e30d2f326bba123479"
2021-07-19 18:42:13,185 DEBUG [reactor-http-nio-3] org.springframework.web.reactive.handler.AbstractHandlerMapping : [c56fd059-5, L:/0:0:0:0:0:0:0:1:8090 - R:/0:0:0:0:0:0:0:1:54520] Mapped to com.bank.manage.customer.controller.CustomerController#getCustomer(String)
2021-07-19 18:42:13,289 DEBUG [nioEventLoopGroup-3-3] org.springframework.web.reactive.result.HandlerResultHandlerSupport : [c56fd059-5, L:/0:0:0:0:0:0:0:1:8090 - R:/0:0:0:0:0:0:0:1:54520] Found 'Content-Type:application/json' in response
2021-07-19 18:42:13,290 DEBUG [nioEventLoopGroup-3-3] org.springframework.web.reactive.result.method.annotation.AbstractMessageWriterResultHandler : [c56fd059-5, L:/0:0:0:0:0:0:0:1:8090 - R:/0:0:0:0:0:0:0:1:54520] 0..1 [com.bank.manage.customer.persistence.entity.Customer]
2021-07-19 18:42:13,290 DEBUG [nioEventLoopGroup-3-3] org.springframework.core.log.CompositeLog : [c56fd059-5, L:/0:0:0:0:0:0:0:1:8090 - R:/0:0:0:0:0:0:0:1:54520] Encoding [Customer(id=60e231e30d2f326bba123479, firstName=Katy, lastName=Puente, document=34563563, documentTy (truncated)...]
2021-07-19 18:42:13,292 DEBUG [reactor-http-nio-3] org.springframework.core.log.LogFormatUtils : [c56fd059-5, L:/0:0:0:0:0:0:0:1:8090 - R:/0:0:0:0:0:0:0:1:54520] Completed 200 OK
2021-07-19 18:42:39,569 DEBUG [DiscoveryClient-CacheRefreshExecutor-0] org.springframework.core.log.CompositeLog : HTTP GET http://localhost:8761/eureka/apps/delta
2021-07-19 18:42:39,570 DEBUG [DiscoveryClient-CacheRefreshExecutor-0] org.springframework.core.log.CompositeLog : Accept=[application/json, application/*+json]
2021-07-19 18:42:39,576 DEBUG [DiscoveryClient-CacheRefreshExecutor-0] org.springframework.core.log.CompositeLog : Response 200 OK
2021-07-19 18:42:39,576 DEBUG [DiscoveryClient-CacheRefreshExecutor-0] org.springframework.core.log.CompositeLog : Reading to [org.springframework.cloud.netflix.eureka.http.EurekaApplications]
2021-07-19 18:42:40,699 DEBUG [DiscoveryClient-HeartbeatExecutor-0] org.springframework.core.log.CompositeLog : HTTP PUT http://localhost:8761/eureka/apps/CUSTOMER_SERVICE/host.docker.internal:customer_service:8090?status=UP&lastDirtyTimestamp=1626737377737
2021-07-19 18:42:40,701 DEBUG [DiscoveryClient-HeartbeatExecutor-0] org.springframework.core.log.CompositeLog : Accept=[application/json, application/*+json]
2021-07-19 18:42:40,854 DEBUG [DiscoveryClient-HeartbeatExecutor-0] org.springframework.core.log.CompositeLog : Response 200 OK
2021-07-19 18:43:09,579 DEBUG [DiscoveryClient-CacheRefreshExecutor-0] org.springframework.core.log.CompositeLog : HTTP GET http://localhost:8761/eureka/apps/delta
2021-07-19 18:43:09,581 DEBUG [DiscoveryClient-CacheRefreshExecutor-0] org.springframework.core.log.CompositeLog : Accept=[application/json, application/*+json]
2021-07-19 18:43:09,589 DEBUG [DiscoveryClient-CacheRefreshExecutor-0] org.springframework.core.log.CompositeLog : Response 200 OK
2021-07-19 18:43:09,591 DEBUG [DiscoveryClient-CacheRefreshExecutor-0] org.springframework.core.log.CompositeLog : Reading to [org.springframework.cloud.netflix.eureka.http.EurekaApplications]
2021-07-19 18:43:10,858 DEBUG [DiscoveryClient-HeartbeatExecutor-0] org.springframework.core.log.CompositeLog : HTTP PUT http://localhost:8761/eureka/apps/CUSTOMER_SERVICE/host.docker.internal:customer_service:8090?status=UP&lastDirtyTimestamp=1626737377737
2021-07-19 18:43:10,859 DEBUG [DiscoveryClient-HeartbeatExecutor-0] org.springframework.core.log.CompositeLog : Accept=[application/json, application/*+json]
2021-07-19 18:43:10,864 DEBUG [DiscoveryClient-HeartbeatExecutor-0] org.springframework.core.log.CompositeLog : Response 200 OK
2021-07-19 18:43:15,206 DEBUG [reactor-http-nio-3] org.springframework.core.log.LogFormatUtils : [c56fd059-6, L:/0:0:0:0:0:0:0:1:8090 - R:/0:0:0:0:0:0:0:1:54520] HTTP GET "/customer"
2021-07-19 18:43:15,207 DEBUG [reactor-http-nio-3] org.springframework.web.reactive.handler.AbstractHandlerMapping : [c56fd059-6, L:/0:0:0:0:0:0:0:1:8090 - R:/0:0:0:0:0:0:0:1:54520] Mapped to com.bank.manage.customer.controller.CustomerController#getAllCustomers()
2021-07-19 18:43:15,208 INFO [reactor-http-nio-3] com.bank.manage.customer.controller.CustomerController :  EndPoit get by all customers {} 
2021-07-19 18:43:15,210 DEBUG [reactor-http-nio-3] org.springframework.web.reactive.result.HandlerResultHandlerSupport : [c56fd059-6, L:/0:0:0:0:0:0:0:1:8090 - R:/0:0:0:0:0:0:0:1:54520] Found 'Content-Type:application/json' in response
2021-07-19 18:43:15,211 DEBUG [reactor-http-nio-3] org.springframework.web.reactive.result.method.annotation.AbstractMessageWriterResultHandler : [c56fd059-6, L:/0:0:0:0:0:0:0:1:8090 - R:/0:0:0:0:0:0:0:1:54520] 0..N [com.bank.manage.customer.persistence.entity.Customer]
2021-07-19 18:43:15,219 DEBUG [nioEventLoopGroup-3-3] org.springframework.core.log.CompositeLog : [c56fd059-6, L:/0:0:0:0:0:0:0:1:8090 - R:/0:0:0:0:0:0:0:1:54520] Resolved [ConversionFailedException: Failed to convert from type [java.lang.Double] to type [java.lang.Integer] for value '9.89898968968E11'; nested exception is java.lang.IllegalArgumentException: Could not convert number [9.89898968968E11] of type [java.lang.Double] to target class [java.lang.Integer]: overflow] for HTTP GET /customer
2021-07-19 18:43:15,220 ERROR [nioEventLoopGroup-3-3] org.springframework.core.log.CompositeLog : [c56fd059-6, L:/0:0:0:0:0:0:0:1:8090 - R:/0:0:0:0:0:0:0:1:54520]  500 Server Error for HTTP GET "/customer"
org.springframework.core.convert.ConversionFailedException: Failed to convert from type [java.lang.Double] to type [java.lang.Integer] for value '9.89898968968E11'; nested exception is java.lang.IllegalArgumentException: Could not convert number [9.89898968968E11] of type [java.lang.Double] to target class [java.lang.Integer]: overflow
	at org.springframework.core.convert.support.ConversionUtils.invokeConverter(ConversionUtils.java:47)
	Suppressed: reactor.core.publisher.FluxOnAssembly$OnAssemblyException: 
Error has been observed at the following site(s):
	|_ checkpoint ⇢ Handler com.bank.manage.customer.controller.CustomerController#getAllCustomers() [DispatcherHandler]
	|_ checkpoint ⇢ org.springframework.boot.actuate.metrics.web.reactive.server.MetricsWebFilter [DefaultWebFilterChain]
	|_ checkpoint ⇢ HTTP GET "/customer" [ExceptionHandlingWebHandler]
Stack trace:
		at org.springframework.core.convert.support.ConversionUtils.invokeConverter(ConversionUtils.java:47)
		at org.springframework.core.convert.support.GenericConversionService.convert(GenericConversionService.java:192)
		at org.springframework.core.convert.support.GenericConversionService.convert(GenericConversionService.java:175)
		at org.springframework.data.mongodb.core.convert.MappingMongoConverter.doConvert(MappingMongoConverter.java:1547)
		at org.springframework.data.mongodb.core.convert.MappingMongoConverter.doConvert(MappingMongoConverter.java:1540)
		at org.springframework.data.mongodb.core.convert.MappingMongoConverter.getPotentiallyConvertedSimpleRead(MappingMongoConverter.java:1060)
		at org.springframework.data.mongodb.core.convert.MappingMongoConverter.getPotentiallyConvertedSimpleRead(MappingMongoConverter.java:1038)
		at org.springframework.data.mongodb.core.convert.MappingMongoConverter$ConversionContext.convert(MappingMongoConverter.java:1919)
		at org.springframework.data.mongodb.core.convert.MappingMongoConverter$MongoDbPropertyValueProvider.getPropertyValue(MappingMongoConverter.java:1641)
		at org.springframework.data.mongodb.core.convert.MappingMongoConverter.readProperties(MappingMongoConverter.java:481)
		at org.springframework.data.mongodb.core.convert.MappingMongoConverter.populateProperties(MappingMongoConverter.java:394)
		at org.springframework.data.mongodb.core.convert.MappingMongoConverter.read(MappingMongoConverter.java:372)
		at org.springframework.data.mongodb.core.convert.MappingMongoConverter.readDocument(MappingMongoConverter.java:342)
		at org.springframework.data.mongodb.core.convert.MappingMongoConverter.read(MappingMongoConverter.java:278)
		at org.springframework.data.mongodb.core.convert.MappingMongoConverter.read(MappingMongoConverter.java:274)
		at org.springframework.data.mongodb.core.convert.MappingMongoConverter.read(MappingMongoConverter.java:102)
		at org.springframework.data.mongodb.core.ReactiveMongoTemplate$ReadDocumentCallback.doWith(ReactiveMongoTemplate.java:3155)
		at reactor.core.publisher.FluxConcatMap$ConcatMapImmediate.drain(FluxConcatMap.java:374)
		at reactor.core.publisher.FluxConcatMap$ConcatMapImmediate.onNext(FluxConcatMap.java:250)
		at reactor.core.publisher.FluxCreate$BufferAsyncSink.drain(FluxCreate.java:793)
		at reactor.core.publisher.FluxCreate$BufferAsyncSink.next(FluxCreate.java:718)
		at reactor.core.publisher.FluxCreate$SerializedFluxSink.next(FluxCreate.java:154)
		at java.util.ArrayList.forEach(ArrayList.java:1259)
		at com.mongodb.reactivestreams.client.internal.BatchCursorFlux.lambda$recurseCursor$4(BatchCursorFlux.java:94)
		at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.onNext(MonoPeekTerminal.java:171)
		at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.onNext(MonoPeekTerminal.java:180)
		at reactor.core.publisher.FluxPeekFuseable$PeekConditionalSubscriber.onNext(FluxPeekFuseable.java:854)
		at reactor.core.publisher.MonoCreate$DefaultMonoSink.success(MonoCreate.java:160)
		at com.mongodb.reactivestreams.client.internal.MongoOperationPublisher.lambda$sinkToCallback$30(MongoOperationPublisher.java:550)
		at com.mongodb.internal.operation.AsyncQueryBatchCursor.next(AsyncQueryBatchCursor.java:207)
		at com.mongodb.internal.operation.AsyncQueryBatchCursor.next(AsyncQueryBatchCursor.java:146)
		at com.mongodb.reactivestreams.client.internal.BatchCursor.lambda$next$0(BatchCursor.java:35)
		at reactor.core.publisher.MonoCreate.subscribe(MonoCreate.java:57)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4150)
		at reactor.core.publisher.Mono.subscribeWith(Mono.java:4265)
		at reactor.core.publisher.Mono.subscribe(Mono.java:3982)
		at com.mongodb.reactivestreams.client.internal.BatchCursorFlux.recurseCursor(BatchCursorFlux.java:104)
		at com.mongodb.reactivestreams.client.internal.BatchCursorFlux.lambda$subscribe$0(BatchCursorFlux.java:56)
		at reactor.core.publisher.LambdaMonoSubscriber.onNext(LambdaMonoSubscriber.java:171)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onNext(FluxMapFuseable.java:127)
		at reactor.core.publisher.Operators$MonoSubscriber.complete(Operators.java:1815)
		at reactor.core.publisher.MonoFlatMap$FlatMapInner.onNext(MonoFlatMap.java:249)
		at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.onNext(MonoPeekTerminal.java:180)
		at reactor.core.publisher.MonoCreate$DefaultMonoSink.success(MonoCreate.java:160)
		at com.mongodb.reactivestreams.client.internal.MongoOperationPublisher.lambda$sinkToCallback$30(MongoOperationPublisher.java:550)
		at com.mongodb.reactivestreams.client.internal.OperationExecutorImpl.lambda$execute$2(OperationExecutorImpl.java:73)
		at com.mongodb.internal.async.ErrorHandlingResultCallback.onResult(ErrorHandlingResultCallback.java:48)
		at com.mongodb.internal.operation.FindOperation$3.onResult(FindOperation.java:755)
		at com.mongodb.internal.operation.OperationHelper$ReferenceCountedReleasingWrappedCallback.onResult(OperationHelper.java:532)
		at com.mongodb.internal.operation.CommandOperationHelper$10.onResult(CommandOperationHelper.java:483)
		at com.mongodb.internal.async.ErrorHandlingResultCallback.onResult(ErrorHandlingResultCallback.java:48)
		at com.mongodb.internal.connection.DefaultServer$DefaultServerProtocolExecutor$2.onResult(DefaultServer.java:286)
		at com.mongodb.internal.async.ErrorHandlingResultCallback.onResult(ErrorHandlingResultCallback.java:48)
		at com.mongodb.internal.connection.CommandProtocolImpl$1.onResult(CommandProtocolImpl.java:84)
		at com.mongodb.internal.connection.DefaultConnectionPool$PooledConnection$2.onResult(DefaultConnectionPool.java:530)
		at com.mongodb.internal.connection.UsageTrackingInternalConnection$2.onResult(UsageTrackingInternalConnection.java:142)
		at com.mongodb.internal.async.ErrorHandlingResultCallback.onResult(ErrorHandlingResultCallback.java:48)
		at com.mongodb.internal.connection.InternalStreamConnection$2$1.onResult(InternalStreamConnection.java:462)
		at com.mongodb.internal.connection.InternalStreamConnection$2$1.onResult(InternalStreamConnection.java:439)
		at com.mongodb.internal.connection.InternalStreamConnection$MessageHeaderCallback$MessageCallback.onResult(InternalStreamConnection.java:744)
		at com.mongodb.internal.connection.InternalStreamConnection$MessageHeaderCallback$MessageCallback.onResult(InternalStreamConnection.java:711)
		at com.mongodb.internal.connection.InternalStreamConnection$5.completed(InternalStreamConnection.java:581)
		at com.mongodb.internal.connection.InternalStreamConnection$5.completed(InternalStreamConnection.java:578)
		at com.mongodb.connection.netty.NettyStream.readAsync(NettyStream.java:322)
		at com.mongodb.connection.netty.NettyStream.readAsync(NettyStream.java:269)
		at com.mongodb.internal.connection.InternalStreamConnection.readAsync(InternalStreamConnection.java:578)
		at com.mongodb.internal.connection.InternalStreamConnection.access$1100(InternalStreamConnection.java:78)
		at com.mongodb.internal.connection.InternalStreamConnection$MessageHeaderCallback.onResult(InternalStreamConnection.java:701)
		at com.mongodb.internal.connection.InternalStreamConnection$MessageHeaderCallback.onResult(InternalStreamConnection.java:686)
		at com.mongodb.internal.connection.InternalStreamConnection$5.completed(InternalStreamConnection.java:581)
		at com.mongodb.internal.connection.InternalStreamConnection$5.completed(InternalStreamConnection.java:578)
		at com.mongodb.connection.netty.NettyStream.readAsync(NettyStream.java:322)
		at com.mongodb.connection.netty.NettyStream.handleReadResponse(NettyStream.java:350)
		at com.mongodb.connection.netty.NettyStream.access$1200(NettyStream.java:104)
		at com.mongodb.connection.netty.NettyStream$InboundBufferHandler.channelRead0(NettyStream.java:409)
		at com.mongodb.connection.netty.NettyStream$InboundBufferHandler.channelRead0(NettyStream.java:406)
		at io.netty.channel.SimpleChannelInboundHandler.channelRead(SimpleChannelInboundHandler.java:99)
		at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:379)
		at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:365)
		at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:357)
		at io.netty.channel.DefaultChannelPipeline$HeadContext.channelRead(DefaultChannelPipeline.java:1410)
		at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:379)
		at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:365)
		at io.netty.channel.DefaultChannelPipeline.fireChannelRead(DefaultChannelPipeline.java:919)
		at io.netty.channel.nio.AbstractNioByteChannel$NioByteUnsafe.read(AbstractNioByteChannel.java:166)
		at io.netty.channel.nio.NioEventLoop.processSelectedKey(NioEventLoop.java:719)
		at io.netty.channel.nio.NioEventLoop.processSelectedKeysOptimized(NioEventLoop.java:655)
		at io.netty.channel.nio.NioEventLoop.processSelectedKeys(NioEventLoop.java:581)
		at io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:493)
		at io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:989)
		at io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)
		at io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)
		at java.lang.Thread.run(Thread.java:748)
Caused by: java.lang.IllegalArgumentException: Could not convert number [9.89898968968E11] of type [java.lang.Double] to target class [java.lang.Integer]: overflow
	at org.springframework.util.NumberUtils.raiseOverflowException(NumberUtils.java:175)
	at org.springframework.util.NumberUtils.convertNumberToTargetClass(NumberUtils.java:108)
	at org.springframework.core.convert.support.NumberToNumberConverterFactory$NumberToNumber.convert(NumberToNumberConverterFactory.java:66)
	at org.springframework.core.convert.support.NumberToNumberConverterFactory$NumberToNumber.convert(NumberToNumberConverterFactory.java:56)
	at org.springframework.core.convert.support.GenericConversionService$ConverterFactoryAdapter.convert(GenericConversionService.java:437)
	at org.springframework.core.convert.support.ConversionUtils.invokeConverter(ConversionUtils.java:41)
	at org.springframework.core.convert.support.GenericConversionService.convert(GenericConversionService.java:192)
	at org.springframework.core.convert.support.GenericConversionService.convert(GenericConversionService.java:175)
	at org.springframework.data.mongodb.core.convert.MappingMongoConverter.doConvert(MappingMongoConverter.java:1547)
	at org.springframework.data.mongodb.core.convert.MappingMongoConverter.doConvert(MappingMongoConverter.java:1540)
	at org.springframework.data.mongodb.core.convert.MappingMongoConverter.getPotentiallyConvertedSimpleRead(MappingMongoConverter.java:1060)
	at org.springframework.data.mongodb.core.convert.MappingMongoConverter.getPotentiallyConvertedSimpleRead(MappingMongoConverter.java:1038)
	at org.springframework.data.mongodb.core.convert.MappingMongoConverter$ConversionContext.convert(MappingMongoConverter.java:1919)
	at org.springframework.data.mongodb.core.convert.MappingMongoConverter$MongoDbPropertyValueProvider.getPropertyValue(MappingMongoConverter.java:1641)
	at org.springframework.data.mongodb.core.convert.MappingMongoConverter.readProperties(MappingMongoConverter.java:481)
	at org.springframework.data.mongodb.core.convert.MappingMongoConverter.populateProperties(MappingMongoConverter.java:394)
	at org.springframework.data.mongodb.core.convert.MappingMongoConverter.read(MappingMongoConverter.java:372)
	at org.springframework.data.mongodb.core.convert.MappingMongoConverter.readDocument(MappingMongoConverter.java:342)
	at org.springframework.data.mongodb.core.convert.MappingMongoConverter.read(MappingMongoConverter.java:278)
	at org.springframework.data.mongodb.core.convert.MappingMongoConverter.read(MappingMongoConverter.java:274)
	at org.springframework.data.mongodb.core.convert.MappingMongoConverter.read(MappingMongoConverter.java:102)
	at org.springframework.data.mongodb.core.ReactiveMongoTemplate$ReadDocumentCallback.doWith(ReactiveMongoTemplate.java:3155)
	at reactor.core.publisher.FluxConcatMap$ConcatMapImmediate.drain(FluxConcatMap.java:374)
	at reactor.core.publisher.FluxConcatMap$ConcatMapImmediate.onNext(FluxConcatMap.java:250)
	at reactor.core.publisher.FluxCreate$BufferAsyncSink.drain(FluxCreate.java:793)
	at reactor.core.publisher.FluxCreate$BufferAsyncSink.next(FluxCreate.java:718)
	at reactor.core.publisher.FluxCreate$SerializedFluxSink.next(FluxCreate.java:154)
	at java.util.ArrayList.forEach(ArrayList.java:1259)
	at com.mongodb.reactivestreams.client.internal.BatchCursorFlux.lambda$recurseCursor$4(BatchCursorFlux.java:94)
	at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.onNext(MonoPeekTerminal.java:171)
	at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.onNext(MonoPeekTerminal.java:180)
	at reactor.core.publisher.FluxPeekFuseable$PeekConditionalSubscriber.onNext(FluxPeekFuseable.java:854)
	at reactor.core.publisher.MonoCreate$DefaultMonoSink.success(MonoCreate.java:160)
	at com.mongodb.reactivestreams.client.internal.MongoOperationPublisher.lambda$sinkToCallback$30(MongoOperationPublisher.java:550)
	at com.mongodb.internal.operation.AsyncQueryBatchCursor.next(AsyncQueryBatchCursor.java:207)
	at com.mongodb.internal.operation.AsyncQueryBatchCursor.next(AsyncQueryBatchCursor.java:146)
	at com.mongodb.reactivestreams.client.internal.BatchCursor.lambda$next$0(BatchCursor.java:35)
	at reactor.core.publisher.MonoCreate.subscribe(MonoCreate.java:57)
	at reactor.core.publisher.Mono.subscribe(Mono.java:4150)
	at reactor.core.publisher.Mono.subscribeWith(Mono.java:4265)
	at reactor.core.publisher.Mono.subscribe(Mono.java:3982)
	at com.mongodb.reactivestreams.client.internal.BatchCursorFlux.recurseCursor(BatchCursorFlux.java:104)
	at com.mongodb.reactivestreams.client.internal.BatchCursorFlux.lambda$subscribe$0(BatchCursorFlux.java:56)
	at reactor.core.publisher.LambdaMonoSubscriber.onNext(LambdaMonoSubscriber.java:171)
	at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onNext(FluxMapFuseable.java:127)
	at reactor.core.publisher.Operators$MonoSubscriber.complete(Operators.java:1815)
	at reactor.core.publisher.MonoFlatMap$FlatMapInner.onNext(MonoFlatMap.java:249)
	at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.onNext(MonoPeekTerminal.java:180)
	at reactor.core.publisher.MonoCreate$DefaultMonoSink.success(MonoCreate.java:160)
	at com.mongodb.reactivestreams.client.internal.MongoOperationPublisher.lambda$sinkToCallback$30(MongoOperationPublisher.java:550)
	at com.mongodb.reactivestreams.client.internal.OperationExecutorImpl.lambda$execute$2(OperationExecutorImpl.java:73)
	at com.mongodb.internal.async.ErrorHandlingResultCallback.onResult(ErrorHandlingResultCallback.java:48)
	at com.mongodb.internal.operation.FindOperation$3.onResult(FindOperation.java:755)
	at com.mongodb.internal.operation.OperationHelper$ReferenceCountedReleasingWrappedCallback.onResult(OperationHelper.java:532)
	at com.mongodb.internal.operation.CommandOperationHelper$10.onResult(CommandOperationHelper.java:483)
	at com.mongodb.internal.async.ErrorHandlingResultCallback.onResult(ErrorHandlingResultCallback.java:48)
	at com.mongodb.internal.connection.DefaultServer$DefaultServerProtocolExecutor$2.onResult(DefaultServer.java:286)
	at com.mongodb.internal.async.ErrorHandlingResultCallback.onResult(ErrorHandlingResultCallback.java:48)
	at com.mongodb.internal.connection.CommandProtocolImpl$1.onResult(CommandProtocolImpl.java:84)
	at com.mongodb.internal.connection.DefaultConnectionPool$PooledConnection$2.onResult(DefaultConnectionPool.java:530)
	at com.mongodb.internal.connection.UsageTrackingInternalConnection$2.onResult(UsageTrackingInternalConnection.java:142)
	at com.mongodb.internal.async.ErrorHandlingResultCallback.onResult(ErrorHandlingResultCallback.java:48)
	at com.mongodb.internal.connection.InternalStreamConnection$2$1.onResult(InternalStreamConnection.java:462)
	at com.mongodb.internal.connection.InternalStreamConnection$2$1.onResult(InternalStreamConnection.java:439)
	at com.mongodb.internal.connection.InternalStreamConnection$MessageHeaderCallback$MessageCallback.onResult(InternalStreamConnection.java:744)
	at com.mongodb.internal.connection.InternalStreamConnection$MessageHeaderCallback$MessageCallback.onResult(InternalStreamConnection.java:711)
	at com.mongodb.internal.connection.InternalStreamConnection$5.completed(InternalStreamConnection.java:581)
	at com.mongodb.internal.connection.InternalStreamConnection$5.completed(InternalStreamConnection.java:578)
	at com.mongodb.connection.netty.NettyStream.readAsync(NettyStream.java:322)
	at com.mongodb.connection.netty.NettyStream.readAsync(NettyStream.java:269)
	at com.mongodb.internal.connection.InternalStreamConnection.readAsync(InternalStreamConnection.java:578)
	at com.mongodb.internal.connection.InternalStreamConnection.access$1100(InternalStreamConnection.java:78)
	at com.mongodb.internal.connection.InternalStreamConnection$MessageHeaderCallback.onResult(InternalStreamConnection.java:701)
	at com.mongodb.internal.connection.InternalStreamConnection$MessageHeaderCallback.onResult(InternalStreamConnection.java:686)
	at com.mongodb.internal.connection.InternalStreamConnection$5.completed(InternalStreamConnection.java:581)
	at com.mongodb.internal.connection.InternalStreamConnection$5.completed(InternalStreamConnection.java:578)
	at com.mongodb.connection.netty.NettyStream.readAsync(NettyStream.java:322)
	at com.mongodb.connection.netty.NettyStream.handleReadResponse(NettyStream.java:350)
	at com.mongodb.connection.netty.NettyStream.access$1200(NettyStream.java:104)
	at com.mongodb.connection.netty.NettyStream$InboundBufferHandler.channelRead0(NettyStream.java:409)
	at com.mongodb.connection.netty.NettyStream$InboundBufferHandler.channelRead0(NettyStream.java:406)
	at io.netty.channel.SimpleChannelInboundHandler.channelRead(SimpleChannelInboundHandler.java:99)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:379)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:365)
	at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:357)
	at io.netty.channel.DefaultChannelPipeline$HeadContext.channelRead(DefaultChannelPipeline.java:1410)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:379)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:365)
	at io.netty.channel.DefaultChannelPipeline.fireChannelRead(DefaultChannelPipeline.java:919)
	at io.netty.channel.nio.AbstractNioByteChannel$NioByteUnsafe.read(AbstractNioByteChannel.java:166)
	at io.netty.channel.nio.NioEventLoop.processSelectedKey(NioEventLoop.java:719)
	at io.netty.channel.nio.NioEventLoop.processSelectedKeysOptimized(NioEventLoop.java:655)
	at io.netty.channel.nio.NioEventLoop.processSelectedKeys(NioEventLoop.java:581)
	at io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:493)
	at io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:989)
	at io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)
	at io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)
	at java.lang.Thread.run(Thread.java:748)
2021-07-19 18:43:15,225 DEBUG [nioEventLoopGroup-3-3] org.springframework.core.log.CompositeLog : [c56fd059-6, L:/0:0:0:0:0:0:0:1:8090 - R:/0:0:0:0:0:0:0:1:54520] Encoding [{timestamp=Mon Jul 19 18:43:15 COT 2021, path=/customer, status=500, error=Internal Server Error, re (truncated)...]
2021-07-19 18:43:15,227 DEBUG [reactor-http-nio-3] org.springframework.core.log.LogFormatUtils : [c56fd059-6, L:/0:0:0:0:0:0:0:1:8090 - R:/0:0:0:0:0:0:0:1:54520] Completed 500 INTERNAL_SERVER_ERROR
2021-07-19 18:43:39,595 DEBUG [DiscoveryClient-CacheRefreshExecutor-0] org.springframework.core.log.CompositeLog : HTTP GET http://localhost:8761/eureka/apps/delta
2021-07-19 18:43:39,597 DEBUG [DiscoveryClient-CacheRefreshExecutor-0] org.springframework.core.log.CompositeLog : Accept=[application/json, application/*+json]
2021-07-19 18:43:39,605 DEBUG [DiscoveryClient-CacheRefreshExecutor-0] org.springframework.core.log.CompositeLog : Response 200 OK
2021-07-19 18:43:39,607 DEBUG [DiscoveryClient-CacheRefreshExecutor-0] org.springframework.core.log.CompositeLog : Reading to [org.springframework.cloud.netflix.eureka.http.EurekaApplications]
2021-07-19 18:43:40,866 DEBUG [DiscoveryClient-HeartbeatExecutor-0] org.springframework.core.log.CompositeLog : HTTP PUT http://localhost:8761/eureka/apps/CUSTOMER_SERVICE/host.docker.internal:customer_service:8090?status=UP&lastDirtyTimestamp=1626737377737
2021-07-19 18:43:40,868 DEBUG [DiscoveryClient-HeartbeatExecutor-0] org.springframework.core.log.CompositeLog : Accept=[application/json, application/*+json]
2021-07-19 18:43:41,296 DEBUG [DiscoveryClient-HeartbeatExecutor-0] org.springframework.core.log.CompositeLog : Response 200 OK
2021-07-19 18:44:09,612 DEBUG [DiscoveryClient-CacheRefreshExecutor-0] org.springframework.core.log.CompositeLog : HTTP GET http://localhost:8761/eureka/apps/delta
2021-07-19 18:44:09,613 DEBUG [DiscoveryClient-CacheRefreshExecutor-0] org.springframework.core.log.CompositeLog : Accept=[application/json, application/*+json]
2021-07-19 18:44:09,616 DEBUG [DiscoveryClient-CacheRefreshExecutor-0] org.springframework.core.log.CompositeLog : Response 200 OK
2021-07-19 18:44:09,616 DEBUG [DiscoveryClient-CacheRefreshExecutor-0] org.springframework.core.log.CompositeLog : Reading to [org.springframework.cloud.netflix.eureka.http.EurekaApplications]
2021-07-19 18:44:11,299 DEBUG [DiscoveryClient-HeartbeatExecutor-0] org.springframework.core.log.CompositeLog : HTTP PUT http://localhost:8761/eureka/apps/CUSTOMER_SERVICE/host.docker.internal:customer_service:8090?status=UP&lastDirtyTimestamp=1626737377737
2021-07-19 18:44:11,301 DEBUG [DiscoveryClient-HeartbeatExecutor-0] org.springframework.core.log.CompositeLog : Accept=[application/json, application/*+json]
2021-07-19 18:44:11,309 DEBUG [DiscoveryClient-HeartbeatExecutor-0] org.springframework.core.log.CompositeLog : Response 200 OK
2021-07-19 18:44:34,317 INFO [AsyncResolver-bootstrap-executor-0] com.netflix.discovery.shared.resolver.aws.ConfigClusterResolver : Resolving eureka endpoints via configuration
2021-07-19 18:44:39,618 DEBUG [DiscoveryClient-CacheRefreshExecutor-0] org.springframework.core.log.CompositeLog : HTTP GET http://localhost:8761/eureka/apps/delta
2021-07-19 18:44:39,618 DEBUG [DiscoveryClient-CacheRefreshExecutor-0] org.springframework.core.log.CompositeLog : Accept=[application/json, application/*+json]
2021-07-19 18:44:39,623 DEBUG [DiscoveryClient-CacheRefreshExecutor-0] org.springframework.core.log.CompositeLog : Response 200 OK
2021-07-19 18:44:39,624 DEBUG [DiscoveryClient-CacheRefreshExecutor-0] org.springframework.core.log.CompositeLog : Reading to [org.springframework.cloud.netflix.eureka.http.EurekaApplications]
2021-07-19 18:44:41,312 DEBUG [DiscoveryClient-HeartbeatExecutor-0] org.springframework.core.log.CompositeLog : HTTP PUT http://localhost:8761/eureka/apps/CUSTOMER_SERVICE/host.docker.internal:customer_service:8090?status=UP&lastDirtyTimestamp=1626737377737
2021-07-19 18:44:41,313 DEBUG [DiscoveryClient-HeartbeatExecutor-0] org.springframework.core.log.CompositeLog : Accept=[application/json, application/*+json]
2021-07-19 18:44:41,317 DEBUG [DiscoveryClient-HeartbeatExecutor-0] org.springframework.core.log.CompositeLog : Response 200 OK
2021-07-19 18:45:09,642 DEBUG [DiscoveryClient-CacheRefreshExecutor-0] org.springframework.core.log.CompositeLog : HTTP GET http://localhost:8761/eureka/apps/delta
2021-07-19 18:45:09,643 DEBUG [DiscoveryClient-CacheRefreshExecutor-0] org.springframework.core.log.CompositeLog : Accept=[application/json, application/*+json]
2021-07-19 18:45:09,646 DEBUG [DiscoveryClient-CacheRefreshExecutor-0] org.springframework.core.log.CompositeLog : Response 200 OK
2021-07-19 18:45:09,647 DEBUG [DiscoveryClient-CacheRefreshExecutor-0] org.springframework.core.log.CompositeLog : Reading to [org.springframework.cloud.netflix.eureka.http.EurekaApplications]
2021-07-19 18:45:11,321 DEBUG [DiscoveryClient-HeartbeatExecutor-0] org.springframework.core.log.CompositeLog : HTTP PUT http://localhost:8761/eureka/apps/CUSTOMER_SERVICE/host.docker.internal:customer_service:8090?status=UP&lastDirtyTimestamp=1626737377737
2021-07-19 18:45:11,322 DEBUG [DiscoveryClient-HeartbeatExecutor-0] org.springframework.core.log.CompositeLog : Accept=[application/json, application/*+json]
2021-07-19 18:45:11,328 DEBUG [DiscoveryClient-HeartbeatExecutor-0] org.springframework.core.log.CompositeLog : Response 200 OK
2021-07-19 18:45:39,650 DEBUG [DiscoveryClient-CacheRefreshExecutor-0] org.springframework.core.log.CompositeLog : HTTP GET http://localhost:8761/eureka/apps/delta
2021-07-19 18:45:39,650 DEBUG [DiscoveryClient-CacheRefreshExecutor-0] org.springframework.core.log.CompositeLog : Accept=[application/json, application/*+json]
2021-07-19 18:45:39,653 DEBUG [DiscoveryClient-CacheRefreshExecutor-0] org.springframework.core.log.CompositeLog : Response 200 OK
2021-07-19 18:45:39,654 DEBUG [DiscoveryClient-CacheRefreshExecutor-0] org.springframework.core.log.CompositeLog : Reading to [org.springframework.cloud.netflix.eureka.http.EurekaApplications]
2021-07-19 18:45:41,331 DEBUG [DiscoveryClient-HeartbeatExecutor-0] org.springframework.core.log.CompositeLog : HTTP PUT http://localhost:8761/eureka/apps/CUSTOMER_SERVICE/host.docker.internal:customer_service:8090?status=UP&lastDirtyTimestamp=1626737377737
2021-07-19 18:45:41,332 DEBUG [DiscoveryClient-HeartbeatExecutor-0] org.springframework.core.log.CompositeLog : Accept=[application/json, application/*+json]
2021-07-19 18:45:41,355 DEBUG [DiscoveryClient-HeartbeatExecutor-0] org.springframework.core.log.CompositeLog : Response 200 OK
2021-07-19 18:46:09,656 DEBUG [DiscoveryClient-CacheRefreshExecutor-0] org.springframework.core.log.CompositeLog : HTTP GET http://localhost:8761/eureka/apps/delta
2021-07-19 18:46:09,656 DEBUG [DiscoveryClient-CacheRefreshExecutor-0] org.springframework.core.log.CompositeLog : Accept=[application/json, application/*+json]
2021-07-19 18:46:09,659 DEBUG [DiscoveryClient-CacheRefreshExecutor-0] org.springframework.core.log.CompositeLog : Response 200 OK
2021-07-19 18:46:09,660 DEBUG [DiscoveryClient-CacheRefreshExecutor-0] org.springframework.core.log.CompositeLog : Reading to [org.springframework.cloud.netflix.eureka.http.EurekaApplications]
2021-07-19 18:46:11,357 DEBUG [DiscoveryClient-HeartbeatExecutor-0] org.springframework.core.log.CompositeLog : HTTP PUT http://localhost:8761/eureka/apps/CUSTOMER_SERVICE/host.docker.internal:customer_service:8090?status=UP&lastDirtyTimestamp=1626737377737
2021-07-19 18:46:11,358 DEBUG [DiscoveryClient-HeartbeatExecutor-0] org.springframework.core.log.CompositeLog : Accept=[application/json, application/*+json]
2021-07-19 18:46:11,374 DEBUG [DiscoveryClient-HeartbeatExecutor-0] org.springframework.core.log.CompositeLog : Response 200 OK
2021-07-19 18:46:39,663 DEBUG [DiscoveryClient-CacheRefreshExecutor-0] org.springframework.core.log.CompositeLog : HTTP GET http://localhost:8761/eureka/apps/delta
2021-07-19 18:46:39,665 DEBUG [DiscoveryClient-CacheRefreshExecutor-0] org.springframework.core.log.CompositeLog : Accept=[application/json, application/*+json]
2021-07-19 18:46:39,863 DEBUG [DiscoveryClient-CacheRefreshExecutor-0] org.springframework.core.log.CompositeLog : Response 200 OK
2021-07-19 18:46:39,863 DEBUG [DiscoveryClient-CacheRefreshExecutor-0] org.springframework.core.log.CompositeLog : Reading to [org.springframework.cloud.netflix.eureka.http.EurekaApplications]
2021-07-19 18:46:41,376 DEBUG [DiscoveryClient-HeartbeatExecutor-0] org.springframework.core.log.CompositeLog : HTTP PUT http://localhost:8761/eureka/apps/CUSTOMER_SERVICE/host.docker.internal:customer_service:8090?status=UP&lastDirtyTimestamp=1626737377737
2021-07-19 18:46:41,377 DEBUG [DiscoveryClient-HeartbeatExecutor-0] org.springframework.core.log.CompositeLog : Accept=[application/json, application/*+json]
2021-07-19 18:46:41,480 DEBUG [DiscoveryClient-HeartbeatExecutor-0] org.springframework.core.log.CompositeLog : Response 200 OK
2021-07-19 18:47:09,918 DEBUG [DiscoveryClient-CacheRefreshExecutor-0] org.springframework.core.log.CompositeLog : HTTP GET http://localhost:8761/eureka/apps/delta
2021-07-19 18:47:10,085 DEBUG [DiscoveryClient-CacheRefreshExecutor-0] org.springframework.core.log.CompositeLog : Accept=[application/json, application/*+json]
2021-07-19 18:47:10,091 DEBUG [DiscoveryClient-CacheRefreshExecutor-0] org.springframework.core.log.CompositeLog : Response 200 OK
2021-07-19 18:47:10,091 DEBUG [DiscoveryClient-CacheRefreshExecutor-0] org.springframework.core.log.CompositeLog : Reading to [org.springframework.cloud.netflix.eureka.http.EurekaApplications]
2021-07-19 18:47:11,483 DEBUG [DiscoveryClient-HeartbeatExecutor-0] org.springframework.core.log.CompositeLog : HTTP PUT http://localhost:8761/eureka/apps/CUSTOMER_SERVICE/host.docker.internal:customer_service:8090?status=UP&lastDirtyTimestamp=1626737377737
2021-07-19 18:47:11,484 DEBUG [DiscoveryClient-HeartbeatExecutor-0] org.springframework.core.log.CompositeLog : Accept=[application/json, application/*+json]
2021-07-19 18:47:11,535 DEBUG [DiscoveryClient-HeartbeatExecutor-0] org.springframework.core.log.CompositeLog : Response 200 OK
2021-07-19 18:47:40,093 DEBUG [DiscoveryClient-CacheRefreshExecutor-0] org.springframework.core.log.CompositeLog : HTTP GET http://localhost:8761/eureka/apps/delta
2021-07-19 18:47:40,096 DEBUG [DiscoveryClient-CacheRefreshExecutor-0] org.springframework.core.log.CompositeLog : Accept=[application/json, application/*+json]
2021-07-19 18:47:40,099 DEBUG [DiscoveryClient-CacheRefreshExecutor-0] org.springframework.core.log.CompositeLog : Response 200 OK
2021-07-19 18:47:40,100 DEBUG [DiscoveryClient-CacheRefreshExecutor-0] org.springframework.core.log.CompositeLog : Reading to [org.springframework.cloud.netflix.eureka.http.EurekaApplications]
2021-07-19 18:47:41,537 DEBUG [DiscoveryClient-HeartbeatExecutor-0] org.springframework.core.log.CompositeLog : HTTP PUT http://localhost:8761/eureka/apps/CUSTOMER_SERVICE/host.docker.internal:customer_service:8090?status=UP&lastDirtyTimestamp=1626737377737
2021-07-19 18:47:41,538 DEBUG [DiscoveryClient-HeartbeatExecutor-0] org.springframework.core.log.CompositeLog : Accept=[application/json, application/*+json]
2021-07-19 18:47:41,578 DEBUG [DiscoveryClient-HeartbeatExecutor-0] org.springframework.core.log.CompositeLog : Response 200 OK
2021-07-19 18:48:10,102 DEBUG [DiscoveryClient-CacheRefreshExecutor-0] org.springframework.core.log.CompositeLog : HTTP GET http://localhost:8761/eureka/apps/delta
2021-07-19 18:48:10,103 DEBUG [DiscoveryClient-CacheRefreshExecutor-0] org.springframework.core.log.CompositeLog : Accept=[application/json, application/*+json]
2021-07-19 18:48:10,107 DEBUG [DiscoveryClient-CacheRefreshExecutor-0] org.springframework.core.log.CompositeLog : Response 200 OK
2021-07-19 18:48:10,107 DEBUG [DiscoveryClient-CacheRefreshExecutor-0] org.springframework.core.log.CompositeLog : Reading to [org.springframework.cloud.netflix.eureka.http.EurekaApplications]
2021-07-19 18:48:11,581 DEBUG [DiscoveryClient-HeartbeatExecutor-0] org.springframework.core.log.CompositeLog : HTTP PUT http://localhost:8761/eureka/apps/CUSTOMER_SERVICE/host.docker.internal:customer_service:8090?status=UP&lastDirtyTimestamp=1626737377737
2021-07-19 18:48:11,582 DEBUG [DiscoveryClient-HeartbeatExecutor-0] org.springframework.core.log.CompositeLog : Accept=[application/json, application/*+json]
2021-07-19 18:48:11,584 DEBUG [DiscoveryClient-HeartbeatExecutor-0] org.springframework.core.log.CompositeLog : Response 200 OK
2021-07-19 18:48:40,110 DEBUG [DiscoveryClient-CacheRefreshExecutor-0] org.springframework.core.log.CompositeLog : HTTP GET http://localhost:8761/eureka/apps/delta
2021-07-19 18:48:40,111 DEBUG [DiscoveryClient-CacheRefreshExecutor-0] org.springframework.core.log.CompositeLog : Accept=[application/json, application/*+json]
2021-07-19 18:48:40,114 DEBUG [DiscoveryClient-CacheRefreshExecutor-0] org.springframework.core.log.CompositeLog : Response 200 OK
2021-07-19 18:48:40,114 DEBUG [DiscoveryClient-CacheRefreshExecutor-0] org.springframework.core.log.CompositeLog : Reading to [org.springframework.cloud.netflix.eureka.http.EurekaApplications]
2021-07-19 18:48:41,585 DEBUG [DiscoveryClient-HeartbeatExecutor-0] org.springframework.core.log.CompositeLog : HTTP PUT http://localhost:8761/eureka/apps/CUSTOMER_SERVICE/host.docker.internal:customer_service:8090?status=UP&lastDirtyTimestamp=1626737377737
2021-07-19 18:48:41,586 DEBUG [DiscoveryClient-HeartbeatExecutor-0] org.springframework.core.log.CompositeLog : Accept=[application/json, application/*+json]
2021-07-19 18:48:41,591 DEBUG [DiscoveryClient-HeartbeatExecutor-0] org.springframework.core.log.CompositeLog : Response 200 OK
2021-07-19 18:49:10,116 DEBUG [DiscoveryClient-CacheRefreshExecutor-0] org.springframework.core.log.CompositeLog : HTTP GET http://localhost:8761/eureka/apps/delta
2021-07-19 18:49:10,117 DEBUG [DiscoveryClient-CacheRefreshExecutor-0] org.springframework.core.log.CompositeLog : Accept=[application/json, application/*+json]
2021-07-19 18:49:10,121 DEBUG [DiscoveryClient-CacheRefreshExecutor-0] org.springframework.core.log.CompositeLog : Response 200 OK
2021-07-19 18:49:10,122 DEBUG [DiscoveryClient-CacheRefreshExecutor-0] org.springframework.core.log.CompositeLog : Reading to [org.springframework.cloud.netflix.eureka.http.EurekaApplications]
2021-07-19 18:49:11,624 DEBUG [DiscoveryClient-HeartbeatExecutor-0] org.springframework.core.log.CompositeLog : HTTP PUT http://localhost:8761/eureka/apps/CUSTOMER_SERVICE/host.docker.internal:customer_service:8090?status=UP&lastDirtyTimestamp=1626737377737
2021-07-19 18:49:11,661 DEBUG [DiscoveryClient-HeartbeatExecutor-0] org.springframework.core.log.CompositeLog : Accept=[application/json, application/*+json]
2021-07-19 18:49:11,664 DEBUG [DiscoveryClient-HeartbeatExecutor-0] org.springframework.core.log.CompositeLog : Response 200 OK
2021-07-19 18:49:34,318 INFO [AsyncResolver-bootstrap-executor-0] com.netflix.discovery.shared.resolver.aws.ConfigClusterResolver : Resolving eureka endpoints via configuration
2021-07-19 18:49:40,124 DEBUG [DiscoveryClient-CacheRefreshExecutor-0] org.springframework.core.log.CompositeLog : HTTP GET http://localhost:8761/eureka/apps/delta
2021-07-19 18:49:40,125 DEBUG [DiscoveryClient-CacheRefreshExecutor-0] org.springframework.core.log.CompositeLog : Accept=[application/json, application/*+json]
2021-07-19 18:49:40,127 DEBUG [DiscoveryClient-CacheRefreshExecutor-0] org.springframework.core.log.CompositeLog : Response 200 OK
2021-07-19 18:49:40,127 DEBUG [DiscoveryClient-CacheRefreshExecutor-0] org.springframework.core.log.CompositeLog : Reading to [org.springframework.cloud.netflix.eureka.http.EurekaApplications]
2021-07-19 18:49:41,668 DEBUG [DiscoveryClient-HeartbeatExecutor-0] org.springframework.core.log.CompositeLog : HTTP PUT http://localhost:8761/eureka/apps/CUSTOMER_SERVICE/host.docker.internal:customer_service:8090?status=UP&lastDirtyTimestamp=1626737377737
2021-07-19 18:49:41,670 DEBUG [DiscoveryClient-HeartbeatExecutor-0] org.springframework.core.log.CompositeLog : Accept=[application/json, application/*+json]
2021-07-19 18:49:41,677 DEBUG [DiscoveryClient-HeartbeatExecutor-0] org.springframework.core.log.CompositeLog : Response 200 OK
2021-07-19 18:50:10,200 DEBUG [DiscoveryClient-CacheRefreshExecutor-0] org.springframework.core.log.CompositeLog : HTTP GET http://localhost:8761/eureka/apps/delta
2021-07-19 18:50:10,202 DEBUG [DiscoveryClient-CacheRefreshExecutor-0] org.springframework.core.log.CompositeLog : Accept=[application/json, application/*+json]
2021-07-19 18:50:10,208 DEBUG [DiscoveryClient-CacheRefreshExecutor-0] org.springframework.core.log.CompositeLog : Response 200 OK
2021-07-19 18:50:10,210 DEBUG [DiscoveryClient-CacheRefreshExecutor-0] org.springframework.core.log.CompositeLog : Reading to [org.springframework.cloud.netflix.eureka.http.EurekaApplications]
2021-07-19 18:50:11,680 DEBUG [DiscoveryClient-HeartbeatExecutor-0] org.springframework.core.log.CompositeLog : HTTP PUT http://localhost:8761/eureka/apps/CUSTOMER_SERVICE/host.docker.internal:customer_service:8090?status=UP&lastDirtyTimestamp=1626737377737
2021-07-19 18:50:11,681 DEBUG [DiscoveryClient-HeartbeatExecutor-0] org.springframework.core.log.CompositeLog : Accept=[application/json, application/*+json]
2021-07-19 18:50:11,684 DEBUG [DiscoveryClient-HeartbeatExecutor-0] org.springframework.core.log.CompositeLog : Response 200 OK
2021-07-19 18:50:40,212 DEBUG [DiscoveryClient-CacheRefreshExecutor-0] org.springframework.core.log.CompositeLog : HTTP GET http://localhost:8761/eureka/apps/delta
2021-07-19 18:50:40,213 DEBUG [DiscoveryClient-CacheRefreshExecutor-0] org.springframework.core.log.CompositeLog : Accept=[application/json, application/*+json]
2021-07-19 18:50:40,261 DEBUG [DiscoveryClient-CacheRefreshExecutor-0] org.springframework.core.log.CompositeLog : Response 200 OK
2021-07-19 18:50:40,262 DEBUG [DiscoveryClient-CacheRefreshExecutor-0] org.springframework.core.log.CompositeLog : Reading to [org.springframework.cloud.netflix.eureka.http.EurekaApplications]
2021-07-19 18:50:41,688 DEBUG [DiscoveryClient-HeartbeatExecutor-0] org.springframework.core.log.CompositeLog : HTTP PUT http://localhost:8761/eureka/apps/CUSTOMER_SERVICE/host.docker.internal:customer_service:8090?status=UP&lastDirtyTimestamp=1626737377737
2021-07-19 18:50:41,689 DEBUG [DiscoveryClient-HeartbeatExecutor-0] org.springframework.core.log.CompositeLog : Accept=[application/json, application/*+json]
2021-07-19 18:50:41,692 DEBUG [DiscoveryClient-HeartbeatExecutor-0] org.springframework.core.log.CompositeLog : Response 200 OK
2021-07-19 18:51:10,263 DEBUG [DiscoveryClient-CacheRefreshExecutor-0] org.springframework.core.log.CompositeLog : HTTP GET http://localhost:8761/eureka/apps/delta
2021-07-19 18:51:10,263 DEBUG [DiscoveryClient-CacheRefreshExecutor-0] org.springframework.core.log.CompositeLog : Accept=[application/json, application/*+json]
2021-07-19 18:51:10,266 DEBUG [DiscoveryClient-CacheRefreshExecutor-0] org.springframework.core.log.CompositeLog : Response 200 OK
2021-07-19 18:51:10,267 DEBUG [DiscoveryClient-CacheRefreshExecutor-0] org.springframework.core.log.CompositeLog : Reading to [org.springframework.cloud.netflix.eureka.http.EurekaApplications]
2021-07-19 18:51:11,694 DEBUG [DiscoveryClient-HeartbeatExecutor-0] org.springframework.core.log.CompositeLog : HTTP PUT http://localhost:8761/eureka/apps/CUSTOMER_SERVICE/host.docker.internal:customer_service:8090?status=UP&lastDirtyTimestamp=1626737377737
2021-07-19 18:51:11,696 DEBUG [DiscoveryClient-HeartbeatExecutor-0] org.springframework.core.log.CompositeLog : Accept=[application/json, application/*+json]
2021-07-19 18:51:11,701 DEBUG [DiscoveryClient-HeartbeatExecutor-0] org.springframework.core.log.CompositeLog : Response 200 OK
2021-07-19 18:51:40,269 DEBUG [DiscoveryClient-CacheRefreshExecutor-0] org.springframework.core.log.CompositeLog : HTTP GET http://localhost:8761/eureka/apps/delta
2021-07-19 18:51:40,270 DEBUG [DiscoveryClient-CacheRefreshExecutor-0] org.springframework.core.log.CompositeLog : Accept=[application/json, application/*+json]
2021-07-19 18:51:40,364 DEBUG [DiscoveryClient-CacheRefreshExecutor-0] org.springframework.core.log.CompositeLog : Response 200 OK
2021-07-19 18:51:40,364 DEBUG [DiscoveryClient-CacheRefreshExecutor-0] org.springframework.core.log.CompositeLog : Reading to [org.springframework.cloud.netflix.eureka.http.EurekaApplications]
2021-07-19 18:51:41,863 DEBUG [DiscoveryClient-HeartbeatExecutor-0] org.springframework.core.log.CompositeLog : HTTP PUT http://localhost:8761/eureka/apps/CUSTOMER_SERVICE/host.docker.internal:customer_service:8090?status=UP&lastDirtyTimestamp=1626737377737
2021-07-19 18:51:41,864 DEBUG [DiscoveryClient-HeartbeatExecutor-0] org.springframework.core.log.CompositeLog : Accept=[application/json, application/*+json]
2021-07-19 18:51:41,867 DEBUG [DiscoveryClient-HeartbeatExecutor-0] org.springframework.core.log.CompositeLog : Response 200 OK
2021-07-19 18:52:10,366 DEBUG [DiscoveryClient-CacheRefreshExecutor-0] org.springframework.core.log.CompositeLog : HTTP GET http://localhost:8761/eureka/apps/delta
2021-07-19 18:52:10,367 DEBUG [DiscoveryClient-CacheRefreshExecutor-0] org.springframework.core.log.CompositeLog : Accept=[application/json, application/*+json]
2021-07-19 18:52:10,369 DEBUG [DiscoveryClient-CacheRefreshExecutor-0] org.springframework.core.log.CompositeLog : Response 200 OK
2021-07-19 18:52:10,372 DEBUG [DiscoveryClient-CacheRefreshExecutor-0] org.springframework.core.log.CompositeLog : Reading to [org.springframework.cloud.netflix.eureka.http.EurekaApplications]
2021-07-19 18:52:11,869 DEBUG [DiscoveryClient-HeartbeatExecutor-0] org.springframework.core.log.CompositeLog : HTTP PUT http://localhost:8761/eureka/apps/CUSTOMER_SERVICE/host.docker.internal:customer_service:8090?status=UP&lastDirtyTimestamp=1626737377737
2021-07-19 18:52:11,870 DEBUG [DiscoveryClient-HeartbeatExecutor-0] org.springframework.core.log.CompositeLog : Accept=[application/json, application/*+json]
2021-07-19 18:52:11,874 DEBUG [DiscoveryClient-HeartbeatExecutor-0] org.springframework.core.log.CompositeLog : Response 200 OK
2021-07-19 18:52:40,374 DEBUG [DiscoveryClient-CacheRefreshExecutor-0] org.springframework.core.log.CompositeLog : HTTP GET http://localhost:8761/eureka/apps/delta
2021-07-19 18:52:40,375 DEBUG [DiscoveryClient-CacheRefreshExecutor-0] org.springframework.core.log.CompositeLog : Accept=[application/json, application/*+json]
2021-07-19 18:52:40,379 DEBUG [DiscoveryClient-CacheRefreshExecutor-0] org.springframework.core.log.CompositeLog : Response 200 OK
2021-07-19 18:52:40,402 DEBUG [DiscoveryClient-CacheRefreshExecutor-0] org.springframework.core.log.CompositeLog : Reading to [org.springframework.cloud.netflix.eureka.http.EurekaApplications]
2021-07-19 18:52:41,876 DEBUG [DiscoveryClient-HeartbeatExecutor-0] org.springframework.core.log.CompositeLog : HTTP PUT http://localhost:8761/eureka/apps/CUSTOMER_SERVICE/host.docker.internal:customer_service:8090?status=UP&lastDirtyTimestamp=1626737377737
2021-07-19 18:52:41,876 DEBUG [DiscoveryClient-HeartbeatExecutor-0] org.springframework.core.log.CompositeLog : Accept=[application/json, application/*+json]
2021-07-19 18:52:41,956 DEBUG [DiscoveryClient-HeartbeatExecutor-0] org.springframework.core.log.CompositeLog : Response 200 OK
2021-07-19 18:53:10,406 DEBUG [DiscoveryClient-CacheRefreshExecutor-0] org.springframework.core.log.CompositeLog : HTTP GET http://localhost:8761/eureka/apps/delta
2021-07-19 18:53:10,407 DEBUG [DiscoveryClient-CacheRefreshExecutor-0] org.springframework.core.log.CompositeLog : Accept=[application/json, application/*+json]
2021-07-19 18:53:10,411 DEBUG [DiscoveryClient-CacheRefreshExecutor-0] org.springframework.core.log.CompositeLog : Response 200 OK
2021-07-19 18:53:10,412 DEBUG [DiscoveryClient-CacheRefreshExecutor-0] org.springframework.core.log.CompositeLog : Reading to [org.springframework.cloud.netflix.eureka.http.EurekaApplications]
2021-07-19 18:53:11,971 DEBUG [DiscoveryClient-HeartbeatExecutor-0] org.springframework.core.log.CompositeLog : HTTP PUT http://localhost:8761/eureka/apps/CUSTOMER_SERVICE/host.docker.internal:customer_service:8090?status=UP&lastDirtyTimestamp=1626737377737
2021-07-19 18:53:11,972 DEBUG [DiscoveryClient-HeartbeatExecutor-0] org.springframework.core.log.CompositeLog : Accept=[application/json, application/*+json]
2021-07-19 18:53:11,976 DEBUG [DiscoveryClient-HeartbeatExecutor-0] org.springframework.core.log.CompositeLog : Response 200 OK
2021-07-19 18:53:40,414 DEBUG [DiscoveryClient-CacheRefreshExecutor-0] org.springframework.core.log.CompositeLog : HTTP GET http://localhost:8761/eureka/apps/delta
2021-07-19 18:53:40,415 DEBUG [DiscoveryClient-CacheRefreshExecutor-0] org.springframework.core.log.CompositeLog : Accept=[application/json, application/*+json]
2021-07-19 18:53:40,419 DEBUG [DiscoveryClient-CacheRefreshExecutor-0] org.springframework.core.log.CompositeLog : Response 200 OK
2021-07-19 18:53:40,420 DEBUG [DiscoveryClient-CacheRefreshExecutor-0] org.springframework.core.log.CompositeLog : Reading to [org.springframework.cloud.netflix.eureka.http.EurekaApplications]
2021-07-19 18:53:41,977 DEBUG [DiscoveryClient-HeartbeatExecutor-0] org.springframework.core.log.CompositeLog : HTTP PUT http://localhost:8761/eureka/apps/CUSTOMER_SERVICE/host.docker.internal:customer_service:8090?status=UP&lastDirtyTimestamp=1626737377737
2021-07-19 18:53:41,980 DEBUG [DiscoveryClient-HeartbeatExecutor-0] org.springframework.core.log.CompositeLog : Accept=[application/json, application/*+json]
2021-07-19 18:53:41,985 DEBUG [DiscoveryClient-HeartbeatExecutor-0] org.springframework.core.log.CompositeLog : Response 200 OK
2021-07-19 18:54:08,837 INFO [RMI TCP Connection(37)-127.0.0.1] com.netflix.discovery.DiscoveryClient$3 : Saw local status change event StatusChangeEvent [timestamp=1626738848837, current=DOWN, previous=UP]
2021-07-19 18:54:08,839 INFO [DiscoveryClient-InstanceInfoReplicator-0] com.netflix.discovery.DiscoveryClient : DiscoveryClient_CUSTOMER_SERVICE/host.docker.internal:customer_service:8090: registering service...
2021-07-19 18:54:08,839 DEBUG [DiscoveryClient-InstanceInfoReplicator-0] org.springframework.core.log.CompositeLog : HTTP POST http://localhost:8761/eureka/apps/CUSTOMER_SERVICE
2021-07-19 18:54:08,841 DEBUG [DiscoveryClient-InstanceInfoReplicator-0] org.springframework.core.log.CompositeLog : Accept=[application/json, application/*+json]
2021-07-19 18:54:08,848 DEBUG [DiscoveryClient-InstanceInfoReplicator-0] org.springframework.core.log.CompositeLog : Writing [InstanceInfo [instanceId = host.docker.internal:customer_service:8090, appName = CUSTOMER_SERVICE, hostName = host.docker.internal, status = DOWN, ipAddr = 192.168.1.12, port = 8090, securePort = 443, dataCenterInfo = com.netflix.appinfo.MyDataCenterInfo@7deca9d1] as "application/json"
2021-07-19 18:54:09,033 INFO [RMI TCP Connection(37)-127.0.0.1] com.mongodb.diagnostics.logging.SLF4JLogger : Closed connection [connectionId{localValue:3, serverValue:11}] to localhost:27017 because the pool has been closed.
2021-07-19 18:54:09,198 DEBUG [DiscoveryClient-InstanceInfoReplicator-0] org.springframework.core.log.CompositeLog : Response 204 NO_CONTENT
2021-07-19 18:54:09,199 INFO [DiscoveryClient-InstanceInfoReplicator-0] com.netflix.discovery.DiscoveryClient : DiscoveryClient_CUSTOMER_SERVICE/host.docker.internal:customer_service:8090 - registration status: 204
2021-07-19 18:54:10,423 DEBUG [DiscoveryClient-CacheRefreshExecutor-0] org.springframework.core.log.CompositeLog : HTTP GET http://localhost:8761/eureka/apps/delta
2021-07-19 18:54:10,425 DEBUG [DiscoveryClient-CacheRefreshExecutor-0] org.springframework.core.log.CompositeLog : Accept=[application/json, application/*+json]
2021-07-19 18:54:10,432 DEBUG [DiscoveryClient-CacheRefreshExecutor-0] org.springframework.core.log.CompositeLog : Response 200 OK
2021-07-19 18:54:10,433 DEBUG [DiscoveryClient-CacheRefreshExecutor-0] org.springframework.core.log.CompositeLog : Reading to [org.springframework.cloud.netflix.eureka.http.EurekaApplications]
2021-07-19 18:54:11,989 DEBUG [DiscoveryClient-HeartbeatExecutor-0] org.springframework.core.log.CompositeLog : HTTP PUT http://localhost:8761/eureka/apps/CUSTOMER_SERVICE/host.docker.internal:customer_service:8090?status=DOWN&lastDirtyTimestamp=1626738848837
2021-07-19 18:54:11,991 DEBUG [DiscoveryClient-HeartbeatExecutor-0] org.springframework.core.log.CompositeLog : Accept=[application/json, application/*+json]
2021-07-19 18:54:11,995 DEBUG [DiscoveryClient-HeartbeatExecutor-0] org.springframework.core.log.CompositeLog : Response 200 OK
2021-07-19 18:54:13,115 INFO [RMI TCP Connection(37)-127.0.0.1] com.netflix.discovery.DiscoveryClient : Shutting down DiscoveryClient ...
2021-07-19 18:54:16,138 INFO [RMI TCP Connection(37)-127.0.0.1] com.netflix.discovery.DiscoveryClient : Unregistering ...
2021-07-19 18:54:16,140 DEBUG [RMI TCP Connection(37)-127.0.0.1] org.springframework.core.log.CompositeLog : HTTP DELETE http://localhost:8761/eureka/apps/CUSTOMER_SERVICE/host.docker.internal:customer_service:8090
2021-07-19 18:54:16,141 DEBUG [RMI TCP Connection(37)-127.0.0.1] org.springframework.core.log.CompositeLog : Accept=[application/json, application/*+json]
2021-07-19 18:54:17,560 DEBUG [RMI TCP Connection(37)-127.0.0.1] org.springframework.core.log.CompositeLog : Response 200 OK
2021-07-19 18:54:17,561 INFO [RMI TCP Connection(37)-127.0.0.1] com.netflix.discovery.DiscoveryClient : DiscoveryClient_CUSTOMER_SERVICE/host.docker.internal:customer_service:8090 - deregister  status: 200
2021-07-19 18:54:17,568 INFO [RMI TCP Connection(37)-127.0.0.1] com.netflix.discovery.DiscoveryClient : Completed shut down of DiscoveryClient
2021-07-19 18:54:29,860 INFO [background-preinit] org.hibernate.validator.internal.util.Version : HV000001: Hibernate Validator 6.2.0.Final
2021-07-19 18:54:31,508 DEBUG [main] org.springframework.core.log.CompositeLog : HTTP GET http://localhost:8888/customer_service/default/main
2021-07-19 18:54:31,582 DEBUG [main] org.springframework.core.log.CompositeLog : Accept=[application/json, application/*+json]
2021-07-19 18:54:35,040 DEBUG [main] org.springframework.core.log.CompositeLog : Response 200 OK
2021-07-19 18:54:35,043 DEBUG [main] org.springframework.core.log.CompositeLog : Reading to [org.springframework.cloud.config.environment.Environment]
2021-07-19 18:54:35,138 INFO [main] org.springframework.boot.SpringApplication : No active profile set, falling back to default profiles: default
2021-07-19 18:54:40,037 INFO [main] com.mongodb.diagnostics.logging.SLF4JLogger : Cluster created with settings {hosts=[localhost:27017], mode=SINGLE, requiredClusterType=UNKNOWN, serverSelectionTimeout='30000 ms'}
2021-07-19 18:54:41,891 INFO [cluster-ClusterId{value='60f610c09602892622324e09', description='null'}-localhost:27017] com.mongodb.diagnostics.logging.SLF4JLogger : Opened connection [connectionId{localValue:1, serverValue:13}] to localhost:27017
2021-07-19 18:54:41,891 INFO [cluster-rtt-ClusterId{value='60f610c09602892622324e09', description='null'}-localhost:27017] com.mongodb.diagnostics.logging.SLF4JLogger : Opened connection [connectionId{localValue:2, serverValue:14}] to localhost:27017
2021-07-19 18:54:41,894 INFO [cluster-ClusterId{value='60f610c09602892622324e09', description='null'}-localhost:27017] com.mongodb.diagnostics.logging.SLF4JLogger : Monitor thread successfully connected to server with description ServerDescription{address=localhost:27017, type=STANDALONE, state=CONNECTED, ok=true, minWireVersion=0, maxWireVersion=9, maxDocumentSize=16777216, logicalSessionTimeoutMinutes=30, roundTripTimeNanos=82758800}
2021-07-19 18:54:42,496 DEBUG [main] org.springframework.web.reactive.result.method.AbstractHandlerMethodMapping : 6 mappings in 'requestMappingHandlerMapping'
2021-07-19 18:54:42,574 DEBUG [main] org.springframework.web.reactive.handler.SimpleUrlHandlerMapping : Patterns [/webjars/**, /**] in 'resourceHandlerMapping'
2021-07-19 18:54:45,570 DEBUG [main] org.springframework.web.reactive.result.method.annotation.ControllerMethodResolver : ControllerAdvice beans: none
2021-07-19 18:54:45,630 DEBUG [main] org.springframework.web.server.adapter.HttpWebHandlerAdapter : enableLoggingRequestDetails='false': form data and headers will be masked to prevent unsafe logging of potentially sensitive data
2021-07-19 18:54:48,555 INFO [main] com.netflix.discovery.DiscoveryClient : Initializing Eureka in region us-east-1
2021-07-19 18:54:48,587 INFO [main] com.netflix.discovery.shared.resolver.aws.ConfigClusterResolver : Resolving eureka endpoints via configuration
2021-07-19 18:54:48,672 INFO [main] com.netflix.discovery.DiscoveryClient : Disable delta property : false
2021-07-19 18:54:48,672 INFO [main] com.netflix.discovery.DiscoveryClient : Single vip registry refresh property : null
2021-07-19 18:54:48,672 INFO [main] com.netflix.discovery.DiscoveryClient : Force full registry fetch : false
2021-07-19 18:54:48,672 INFO [main] com.netflix.discovery.DiscoveryClient : Application is null : false
2021-07-19 18:54:48,672 INFO [main] com.netflix.discovery.DiscoveryClient : Registered Applications size is zero : true
2021-07-19 18:54:48,672 INFO [main] com.netflix.discovery.DiscoveryClient : Application version is -1: true
2021-07-19 18:54:48,672 INFO [main] com.netflix.discovery.DiscoveryClient : Getting all instance registry info from the eureka server
2021-07-19 18:54:50,259 DEBUG [main] org.springframework.core.log.CompositeLog : HTTP GET http://localhost:8761/eureka/apps/
2021-07-19 18:54:50,313 DEBUG [main] org.springframework.core.log.CompositeLog : Accept=[application/json, application/*+json]
2021-07-19 18:54:50,423 DEBUG [main] org.springframework.core.log.CompositeLog : Response 200 OK
2021-07-19 18:54:50,466 DEBUG [main] org.springframework.core.log.CompositeLog : Reading to [org.springframework.cloud.netflix.eureka.http.EurekaApplications]
2021-07-19 18:54:50,475 INFO [main] com.netflix.discovery.DiscoveryClient : The response status is 200
2021-07-19 18:54:50,478 INFO [main] com.netflix.discovery.DiscoveryClient : Starting heartbeat executor: renew interval is: 30
2021-07-19 18:54:50,482 INFO [main] com.netflix.discovery.InstanceInfoReplicator : InstanceInfoReplicator onDemand update allowed rate per min is 4
2021-07-19 18:54:50,487 INFO [main] com.netflix.discovery.DiscoveryClient : Discovery Client initialized at timestamp 1626738890486 with initial instances count: 2
2021-07-19 18:54:50,497 INFO [main] com.netflix.discovery.DiscoveryClient$3 : Saw local status change event StatusChangeEvent [timestamp=1626738890497, current=UP, previous=STARTING]
2021-07-19 18:54:50,500 INFO [DiscoveryClient-InstanceInfoReplicator-0] com.netflix.discovery.DiscoveryClient : DiscoveryClient_CUSTOMER_SERVICE/host.docker.internal:customer_service:8090: registering service...
2021-07-19 18:54:50,529 DEBUG [DiscoveryClient-InstanceInfoReplicator-0] org.springframework.core.log.CompositeLog : HTTP POST http://localhost:8761/eureka/apps/CUSTOMER_SERVICE
2021-07-19 18:54:50,541 DEBUG [DiscoveryClient-InstanceInfoReplicator-0] org.springframework.core.log.CompositeLog : Accept=[application/json, application/*+json]
2021-07-19 18:54:50,549 DEBUG [DiscoveryClient-InstanceInfoReplicator-0] org.springframework.core.log.CompositeLog : Writing [InstanceInfo [instanceId = host.docker.internal:customer_service:8090, appName = CUSTOMER_SERVICE, hostName = host.docker.internal, status = UP, ipAddr = 192.168.1.12, port = 8090, securePort = 443, dataCenterInfo = com.netflix.appinfo.MyDataCenterInfo@61bf71d6] as "application/json"
2021-07-19 18:54:50,588 DEBUG [DiscoveryClient-InstanceInfoReplicator-0] org.springframework.core.log.CompositeLog : Response 204 NO_CONTENT
2021-07-19 18:54:50,589 INFO [DiscoveryClient-InstanceInfoReplicator-0] com.netflix.discovery.DiscoveryClient : DiscoveryClient_CUSTOMER_SERVICE/host.docker.internal:customer_service:8090 - registration status: 204
2021-07-19 18:54:52,755 INFO [main] org.springframework.boot.StartupInfoLogger : Started Application in 24.872 seconds (JVM running for 26.61)
2021-07-19 18:55:20,482 DEBUG [DiscoveryClient-CacheRefreshExecutor-0] org.springframework.core.log.CompositeLog : HTTP GET http://localhost:8761/eureka/apps/delta
2021-07-19 18:55:20,483 DEBUG [DiscoveryClient-CacheRefreshExecutor-0] org.springframework.core.log.CompositeLog : Accept=[application/json, application/*+json]
2021-07-19 18:55:20,485 DEBUG [DiscoveryClient-HeartbeatExecutor-0] org.springframework.core.log.CompositeLog : HTTP PUT http://localhost:8761/eureka/apps/CUSTOMER_SERVICE/host.docker.internal:customer_service:8090?status=UP&lastDirtyTimestamp=1626738890496
2021-07-19 18:55:20,510 DEBUG [DiscoveryClient-HeartbeatExecutor-0] org.springframework.core.log.CompositeLog : Accept=[application/json, application/*+json]
2021-07-19 18:55:20,650 DEBUG [DiscoveryClient-CacheRefreshExecutor-0] org.springframework.core.log.CompositeLog : Response 200 OK
2021-07-19 18:55:20,650 DEBUG [DiscoveryClient-CacheRefreshExecutor-0] org.springframework.core.log.CompositeLog : Reading to [org.springframework.cloud.netflix.eureka.http.EurekaApplications]
2021-07-19 18:55:21,949 DEBUG [DiscoveryClient-HeartbeatExecutor-0] org.springframework.core.log.CompositeLog : Response 200 OK
2021-07-19 18:55:50,654 DEBUG [DiscoveryClient-CacheRefreshExecutor-0] org.springframework.core.log.CompositeLog : HTTP GET http://localhost:8761/eureka/apps/delta
2021-07-19 18:55:50,655 DEBUG [DiscoveryClient-CacheRefreshExecutor-0] org.springframework.core.log.CompositeLog : Accept=[application/json, application/*+json]
2021-07-19 18:55:50,658 DEBUG [DiscoveryClient-CacheRefreshExecutor-0] org.springframework.core.log.CompositeLog : Response 200 OK
2021-07-19 18:55:50,659 DEBUG [DiscoveryClient-CacheRefreshExecutor-0] org.springframework.core.log.CompositeLog : Reading to [org.springframework.cloud.netflix.eureka.http.EurekaApplications]
2021-07-19 18:55:51,952 DEBUG [DiscoveryClient-HeartbeatExecutor-0] org.springframework.core.log.CompositeLog : HTTP PUT http://localhost:8761/eureka/apps/CUSTOMER_SERVICE/host.docker.internal:customer_service:8090?status=UP&lastDirtyTimestamp=1626738890496
2021-07-19 18:55:51,953 DEBUG [DiscoveryClient-HeartbeatExecutor-0] org.springframework.core.log.CompositeLog : Accept=[application/json, application/*+json]
2021-07-19 18:55:51,959 DEBUG [DiscoveryClient-HeartbeatExecutor-0] org.springframework.core.log.CompositeLog : Response 200 OK
2021-07-19 18:56:20,663 DEBUG [DiscoveryClient-CacheRefreshExecutor-0] org.springframework.core.log.CompositeLog : HTTP GET http://localhost:8761/eureka/apps/delta
2021-07-19 18:56:20,665 DEBUG [DiscoveryClient-CacheRefreshExecutor-0] org.springframework.core.log.CompositeLog : Accept=[application/json, application/*+json]
2021-07-19 18:56:20,670 DEBUG [DiscoveryClient-CacheRefreshExecutor-0] org.springframework.core.log.CompositeLog : Response 200 OK
2021-07-19 18:56:20,671 DEBUG [DiscoveryClient-CacheRefreshExecutor-0] org.springframework.core.log.CompositeLog : Reading to [org.springframework.cloud.netflix.eureka.http.EurekaApplications]
2021-07-19 18:56:21,961 DEBUG [DiscoveryClient-HeartbeatExecutor-0] org.springframework.core.log.CompositeLog : HTTP PUT http://localhost:8761/eureka/apps/CUSTOMER_SERVICE/host.docker.internal:customer_service:8090?status=UP&lastDirtyTimestamp=1626738890496
2021-07-19 18:56:21,962 DEBUG [DiscoveryClient-HeartbeatExecutor-0] org.springframework.core.log.CompositeLog : Accept=[application/json, application/*+json]
2021-07-19 18:56:21,968 DEBUG [DiscoveryClient-HeartbeatExecutor-0] org.springframework.core.log.CompositeLog : Response 200 OK
2021-07-19 18:56:28,935 DEBUG [reactor-http-nio-3] org.springframework.core.log.LogFormatUtils : [aa5f98bb-1, L:/0:0:0:0:0:0:0:1:8090 - R:/0:0:0:0:0:0:0:1:59558] HTTP GET "/customer"
2021-07-19 18:56:28,969 DEBUG [reactor-http-nio-3] org.springframework.web.reactive.handler.AbstractHandlerMapping : [aa5f98bb-1, L:/0:0:0:0:0:0:0:1:8090 - R:/0:0:0:0:0:0:0:1:59558] Mapped to com.bank.manage.customer.controller.CustomerController#getAllCustomers()
2021-07-19 18:56:28,995 INFO [reactor-http-nio-3] com.bank.manage.customer.controller.CustomerController :  EndPoit get by all customers {} 
2021-07-19 18:56:29,015 DEBUG [reactor-http-nio-3] org.springframework.web.reactive.result.HandlerResultHandlerSupport : [aa5f98bb-1, L:/0:0:0:0:0:0:0:1:8090 - R:/0:0:0:0:0:0:0:1:59558] Found 'Content-Type:application/json' in response
2021-07-19 18:56:29,015 DEBUG [reactor-http-nio-3] org.springframework.web.reactive.result.method.annotation.AbstractMessageWriterResultHandler : [aa5f98bb-1, L:/0:0:0:0:0:0:0:1:8090 - R:/0:0:0:0:0:0:0:1:59558] 0..N [com.bank.manage.customer.persistence.entity.Customer]
2021-07-19 18:56:29,108 INFO [nioEventLoopGroup-3-3] com.mongodb.diagnostics.logging.SLF4JLogger : Opened connection [connectionId{localValue:3, serverValue:15}] to localhost:27017
2021-07-19 18:56:29,246 DEBUG [nioEventLoopGroup-3-3] org.springframework.core.log.CompositeLog : [aa5f98bb-1, L:/0:0:0:0:0:0:0:1:8090 - R:/0:0:0:0:0:0:0:1:59558] Resolved [ConversionFailedException: Failed to convert from type [java.lang.Double] to type [java.lang.Integer] for value '9.89898968968E11'; nested exception is java.lang.IllegalArgumentException: Could not convert number [9.89898968968E11] of type [java.lang.Double] to target class [java.lang.Integer]: overflow] for HTTP GET /customer
2021-07-19 18:56:29,249 ERROR [nioEventLoopGroup-3-3] org.springframework.core.log.CompositeLog : [aa5f98bb-1, L:/0:0:0:0:0:0:0:1:8090 - R:/0:0:0:0:0:0:0:1:59558]  500 Server Error for HTTP GET "/customer"
org.springframework.core.convert.ConversionFailedException: Failed to convert from type [java.lang.Double] to type [java.lang.Integer] for value '9.89898968968E11'; nested exception is java.lang.IllegalArgumentException: Could not convert number [9.89898968968E11] of type [java.lang.Double] to target class [java.lang.Integer]: overflow
	at org.springframework.core.convert.support.ConversionUtils.invokeConverter(ConversionUtils.java:47)
	Suppressed: reactor.core.publisher.FluxOnAssembly$OnAssemblyException: 
Error has been observed at the following site(s):
	|_ checkpoint ⇢ Handler com.bank.manage.customer.controller.CustomerController#getAllCustomers() [DispatcherHandler]
	|_ checkpoint ⇢ org.springframework.boot.actuate.metrics.web.reactive.server.MetricsWebFilter [DefaultWebFilterChain]
	|_ checkpoint ⇢ HTTP GET "/customer" [ExceptionHandlingWebHandler]
Stack trace:
		at org.springframework.core.convert.support.ConversionUtils.invokeConverter(ConversionUtils.java:47)
		at org.springframework.core.convert.support.GenericConversionService.convert(GenericConversionService.java:192)
		at org.springframework.core.convert.support.GenericConversionService.convert(GenericConversionService.java:175)
		at org.springframework.data.mongodb.core.convert.MappingMongoConverter.doConvert(MappingMongoConverter.java:1547)
		at org.springframework.data.mongodb.core.convert.MappingMongoConverter.doConvert(MappingMongoConverter.java:1540)
		at org.springframework.data.mongodb.core.convert.MappingMongoConverter.getPotentiallyConvertedSimpleRead(MappingMongoConverter.java:1060)
		at org.springframework.data.mongodb.core.convert.MappingMongoConverter.getPotentiallyConvertedSimpleRead(MappingMongoConverter.java:1038)
		at org.springframework.data.mongodb.core.convert.MappingMongoConverter$ConversionContext.convert(MappingMongoConverter.java:1919)
		at org.springframework.data.mongodb.core.convert.MappingMongoConverter$MongoDbPropertyValueProvider.getPropertyValue(MappingMongoConverter.java:1641)
		at org.springframework.data.mongodb.core.convert.MappingMongoConverter.readProperties(MappingMongoConverter.java:481)
		at org.springframework.data.mongodb.core.convert.MappingMongoConverter.populateProperties(MappingMongoConverter.java:394)
		at org.springframework.data.mongodb.core.convert.MappingMongoConverter.read(MappingMongoConverter.java:372)
		at org.springframework.data.mongodb.core.convert.MappingMongoConverter.readDocument(MappingMongoConverter.java:342)
		at org.springframework.data.mongodb.core.convert.MappingMongoConverter.read(MappingMongoConverter.java:278)
		at org.springframework.data.mongodb.core.convert.MappingMongoConverter.read(MappingMongoConverter.java:274)
		at org.springframework.data.mongodb.core.convert.MappingMongoConverter.read(MappingMongoConverter.java:102)
		at org.springframework.data.mongodb.core.ReactiveMongoTemplate$ReadDocumentCallback.doWith(ReactiveMongoTemplate.java:3155)
		at reactor.core.publisher.FluxConcatMap$ConcatMapImmediate.drain(FluxConcatMap.java:374)
		at reactor.core.publisher.FluxConcatMap$ConcatMapImmediate.onNext(FluxConcatMap.java:250)
		at reactor.core.publisher.FluxCreate$BufferAsyncSink.drain(FluxCreate.java:793)
		at reactor.core.publisher.FluxCreate$BufferAsyncSink.next(FluxCreate.java:718)
		at reactor.core.publisher.FluxCreate$SerializedFluxSink.next(FluxCreate.java:154)
		at java.util.ArrayList.forEach(ArrayList.java:1259)
		at com.mongodb.reactivestreams.client.internal.BatchCursorFlux.lambda$recurseCursor$4(BatchCursorFlux.java:94)
		at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.onNext(MonoPeekTerminal.java:171)
		at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.onNext(MonoPeekTerminal.java:180)
		at reactor.core.publisher.FluxPeekFuseable$PeekConditionalSubscriber.onNext(FluxPeekFuseable.java:854)
		at reactor.core.publisher.MonoCreate$DefaultMonoSink.success(MonoCreate.java:160)
		at com.mongodb.reactivestreams.client.internal.MongoOperationPublisher.lambda$sinkToCallback$30(MongoOperationPublisher.java:550)
		at com.mongodb.internal.operation.AsyncQueryBatchCursor.next(AsyncQueryBatchCursor.java:207)
		at com.mongodb.internal.operation.AsyncQueryBatchCursor.next(AsyncQueryBatchCursor.java:146)
		at com.mongodb.reactivestreams.client.internal.BatchCursor.lambda$next$0(BatchCursor.java:35)
		at reactor.core.publisher.MonoCreate.subscribe(MonoCreate.java:57)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4150)
		at reactor.core.publisher.Mono.subscribeWith(Mono.java:4265)
		at reactor.core.publisher.Mono.subscribe(Mono.java:3982)
		at com.mongodb.reactivestreams.client.internal.BatchCursorFlux.recurseCursor(BatchCursorFlux.java:104)
		at com.mongodb.reactivestreams.client.internal.BatchCursorFlux.lambda$subscribe$0(BatchCursorFlux.java:56)
		at reactor.core.publisher.LambdaMonoSubscriber.onNext(LambdaMonoSubscriber.java:171)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onNext(FluxMapFuseable.java:127)
		at reactor.core.publisher.Operators$MonoSubscriber.complete(Operators.java:1815)
		at reactor.core.publisher.MonoFlatMap$FlatMapInner.onNext(MonoFlatMap.java:249)
		at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.onNext(MonoPeekTerminal.java:180)
		at reactor.core.publisher.MonoCreate$DefaultMonoSink.success(MonoCreate.java:160)
		at com.mongodb.reactivestreams.client.internal.MongoOperationPublisher.lambda$sinkToCallback$30(MongoOperationPublisher.java:550)
		at com.mongodb.reactivestreams.client.internal.OperationExecutorImpl.lambda$execute$2(OperationExecutorImpl.java:73)
		at com.mongodb.internal.async.ErrorHandlingResultCallback.onResult(ErrorHandlingResultCallback.java:48)
		at com.mongodb.internal.operation.FindOperation$3.onResult(FindOperation.java:755)
		at com.mongodb.internal.operation.OperationHelper$ReferenceCountedReleasingWrappedCallback.onResult(OperationHelper.java:532)
		at com.mongodb.internal.operation.CommandOperationHelper$10.onResult(CommandOperationHelper.java:483)
		at com.mongodb.internal.async.ErrorHandlingResultCallback.onResult(ErrorHandlingResultCallback.java:48)
		at com.mongodb.internal.connection.DefaultServer$DefaultServerProtocolExecutor$2.onResult(DefaultServer.java:286)
		at com.mongodb.internal.async.ErrorHandlingResultCallback.onResult(ErrorHandlingResultCallback.java:48)
		at com.mongodb.internal.connection.CommandProtocolImpl$1.onResult(CommandProtocolImpl.java:84)
		at com.mongodb.internal.connection.DefaultConnectionPool$PooledConnection$2.onResult(DefaultConnectionPool.java:530)
		at com.mongodb.internal.connection.UsageTrackingInternalConnection$2.onResult(UsageTrackingInternalConnection.java:142)
		at com.mongodb.internal.async.ErrorHandlingResultCallback.onResult(ErrorHandlingResultCallback.java:48)
		at com.mongodb.internal.connection.InternalStreamConnection$2$1.onResult(InternalStreamConnection.java:462)
		at com.mongodb.internal.connection.InternalStreamConnection$2$1.onResult(InternalStreamConnection.java:439)
		at com.mongodb.internal.connection.InternalStreamConnection$MessageHeaderCallback$MessageCallback.onResult(InternalStreamConnection.java:744)
		at com.mongodb.internal.connection.InternalStreamConnection$MessageHeaderCallback$MessageCallback.onResult(InternalStreamConnection.java:711)
		at com.mongodb.internal.connection.InternalStreamConnection$5.completed(InternalStreamConnection.java:581)
		at com.mongodb.internal.connection.InternalStreamConnection$5.completed(InternalStreamConnection.java:578)
		at com.mongodb.connection.netty.NettyStream.readAsync(NettyStream.java:322)
		at com.mongodb.connection.netty.NettyStream.handleReadResponse(NettyStream.java:350)
		at com.mongodb.connection.netty.NettyStream.access$1200(NettyStream.java:104)
		at com.mongodb.connection.netty.NettyStream$InboundBufferHandler.channelRead0(NettyStream.java:409)
		at com.mongodb.connection.netty.NettyStream$InboundBufferHandler.channelRead0(NettyStream.java:406)
		at io.netty.channel.SimpleChannelInboundHandler.channelRead(SimpleChannelInboundHandler.java:99)
		at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:379)
		at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:365)
		at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:357)
		at io.netty.channel.DefaultChannelPipeline$HeadContext.channelRead(DefaultChannelPipeline.java:1410)
		at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:379)
		at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:365)
		at io.netty.channel.DefaultChannelPipeline.fireChannelRead(DefaultChannelPipeline.java:919)
		at io.netty.channel.nio.AbstractNioByteChannel$NioByteUnsafe.read(AbstractNioByteChannel.java:166)
		at io.netty.channel.nio.NioEventLoop.processSelectedKey(NioEventLoop.java:719)
		at io.netty.channel.nio.NioEventLoop.processSelectedKeysOptimized(NioEventLoop.java:655)
		at io.netty.channel.nio.NioEventLoop.processSelectedKeys(NioEventLoop.java:581)
		at io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:493)
		at io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:989)
		at io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)
		at io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)
		at java.lang.Thread.run(Thread.java:748)
Caused by: java.lang.IllegalArgumentException: Could not convert number [9.89898968968E11] of type [java.lang.Double] to target class [java.lang.Integer]: overflow
	at org.springframework.util.NumberUtils.raiseOverflowException(NumberUtils.java:175)
	at org.springframework.util.NumberUtils.convertNumberToTargetClass(NumberUtils.java:108)
	at org.springframework.core.convert.support.NumberToNumberConverterFactory$NumberToNumber.convert(NumberToNumberConverterFactory.java:66)
	at org.springframework.core.convert.support.NumberToNumberConverterFactory$NumberToNumber.convert(NumberToNumberConverterFactory.java:56)
	at org.springframework.core.convert.support.GenericConversionService$ConverterFactoryAdapter.convert(GenericConversionService.java:437)
	at org.springframework.core.convert.support.ConversionUtils.invokeConverter(ConversionUtils.java:41)
	at org.springframework.core.convert.support.GenericConversionService.convert(GenericConversionService.java:192)
	at org.springframework.core.convert.support.GenericConversionService.convert(GenericConversionService.java:175)
	at org.springframework.data.mongodb.core.convert.MappingMongoConverter.doConvert(MappingMongoConverter.java:1547)
	at org.springframework.data.mongodb.core.convert.MappingMongoConverter.doConvert(MappingMongoConverter.java:1540)
	at org.springframework.data.mongodb.core.convert.MappingMongoConverter.getPotentiallyConvertedSimpleRead(MappingMongoConverter.java:1060)
	at org.springframework.data.mongodb.core.convert.MappingMongoConverter.getPotentiallyConvertedSimpleRead(MappingMongoConverter.java:1038)
	at org.springframework.data.mongodb.core.convert.MappingMongoConverter$ConversionContext.convert(MappingMongoConverter.java:1919)
	at org.springframework.data.mongodb.core.convert.MappingMongoConverter$MongoDbPropertyValueProvider.getPropertyValue(MappingMongoConverter.java:1641)
	at org.springframework.data.mongodb.core.convert.MappingMongoConverter.readProperties(MappingMongoConverter.java:481)
	at org.springframework.data.mongodb.core.convert.MappingMongoConverter.populateProperties(MappingMongoConverter.java:394)
	at org.springframework.data.mongodb.core.convert.MappingMongoConverter.read(MappingMongoConverter.java:372)
	at org.springframework.data.mongodb.core.convert.MappingMongoConverter.readDocument(MappingMongoConverter.java:342)
	at org.springframework.data.mongodb.core.convert.MappingMongoConverter.read(MappingMongoConverter.java:278)
	at org.springframework.data.mongodb.core.convert.MappingMongoConverter.read(MappingMongoConverter.java:274)
	at org.springframework.data.mongodb.core.convert.MappingMongoConverter.read(MappingMongoConverter.java:102)
	at org.springframework.data.mongodb.core.ReactiveMongoTemplate$ReadDocumentCallback.doWith(ReactiveMongoTemplate.java:3155)
	at reactor.core.publisher.FluxConcatMap$ConcatMapImmediate.drain(FluxConcatMap.java:374)
	at reactor.core.publisher.FluxConcatMap$ConcatMapImmediate.onNext(FluxConcatMap.java:250)
	at reactor.core.publisher.FluxCreate$BufferAsyncSink.drain(FluxCreate.java:793)
	at reactor.core.publisher.FluxCreate$BufferAsyncSink.next(FluxCreate.java:718)
	at reactor.core.publisher.FluxCreate$SerializedFluxSink.next(FluxCreate.java:154)
	at java.util.ArrayList.forEach(ArrayList.java:1259)
	at com.mongodb.reactivestreams.client.internal.BatchCursorFlux.lambda$recurseCursor$4(BatchCursorFlux.java:94)
	at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.onNext(MonoPeekTerminal.java:171)
	at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.onNext(MonoPeekTerminal.java:180)
	at reactor.core.publisher.FluxPeekFuseable$PeekConditionalSubscriber.onNext(FluxPeekFuseable.java:854)
	at reactor.core.publisher.MonoCreate$DefaultMonoSink.success(MonoCreate.java:160)
	at com.mongodb.reactivestreams.client.internal.MongoOperationPublisher.lambda$sinkToCallback$30(MongoOperationPublisher.java:550)
	at com.mongodb.internal.operation.AsyncQueryBatchCursor.next(AsyncQueryBatchCursor.java:207)
	at com.mongodb.internal.operation.AsyncQueryBatchCursor.next(AsyncQueryBatchCursor.java:146)
	at com.mongodb.reactivestreams.client.internal.BatchCursor.lambda$next$0(BatchCursor.java:35)
	at reactor.core.publisher.MonoCreate.subscribe(MonoCreate.java:57)
	at reactor.core.publisher.Mono.subscribe(Mono.java:4150)
	at reactor.core.publisher.Mono.subscribeWith(Mono.java:4265)
	at reactor.core.publisher.Mono.subscribe(Mono.java:3982)
	at com.mongodb.reactivestreams.client.internal.BatchCursorFlux.recurseCursor(BatchCursorFlux.java:104)
	at com.mongodb.reactivestreams.client.internal.BatchCursorFlux.lambda$subscribe$0(BatchCursorFlux.java:56)
	at reactor.core.publisher.LambdaMonoSubscriber.onNext(LambdaMonoSubscriber.java:171)
	at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onNext(FluxMapFuseable.java:127)
	at reactor.core.publisher.Operators$MonoSubscriber.complete(Operators.java:1815)
	at reactor.core.publisher.MonoFlatMap$FlatMapInner.onNext(MonoFlatMap.java:249)
	at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.onNext(MonoPeekTerminal.java:180)
	at reactor.core.publisher.MonoCreate$DefaultMonoSink.success(MonoCreate.java:160)
	at com.mongodb.reactivestreams.client.internal.MongoOperationPublisher.lambda$sinkToCallback$30(MongoOperationPublisher.java:550)
	at com.mongodb.reactivestreams.client.internal.OperationExecutorImpl.lambda$execute$2(OperationExecutorImpl.java:73)
	at com.mongodb.internal.async.ErrorHandlingResultCallback.onResult(ErrorHandlingResultCallback.java:48)
	at com.mongodb.internal.operation.FindOperation$3.onResult(FindOperation.java:755)
	at com.mongodb.internal.operation.OperationHelper$ReferenceCountedReleasingWrappedCallback.onResult(OperationHelper.java:532)
	at com.mongodb.internal.operation.CommandOperationHelper$10.onResult(CommandOperationHelper.java:483)
	at com.mongodb.internal.async.ErrorHandlingResultCallback.onResult(ErrorHandlingResultCallback.java:48)
	at com.mongodb.internal.connection.DefaultServer$DefaultServerProtocolExecutor$2.onResult(DefaultServer.java:286)
	at com.mongodb.internal.async.ErrorHandlingResultCallback.onResult(ErrorHandlingResultCallback.java:48)
	at com.mongodb.internal.connection.CommandProtocolImpl$1.onResult(CommandProtocolImpl.java:84)
	at com.mongodb.internal.connection.DefaultConnectionPool$PooledConnection$2.onResult(DefaultConnectionPool.java:530)
	at com.mongodb.internal.connection.UsageTrackingInternalConnection$2.onResult(UsageTrackingInternalConnection.java:142)
	at com.mongodb.internal.async.ErrorHandlingResultCallback.onResult(ErrorHandlingResultCallback.java:48)
	at com.mongodb.internal.connection.InternalStreamConnection$2$1.onResult(InternalStreamConnection.java:462)
	at com.mongodb.internal.connection.InternalStreamConnection$2$1.onResult(InternalStreamConnection.java:439)
	at com.mongodb.internal.connection.InternalStreamConnection$MessageHeaderCallback$MessageCallback.onResult(InternalStreamConnection.java:744)
	at com.mongodb.internal.connection.InternalStreamConnection$MessageHeaderCallback$MessageCallback.onResult(InternalStreamConnection.java:711)
	at com.mongodb.internal.connection.InternalStreamConnection$5.completed(InternalStreamConnection.java:581)
	at com.mongodb.internal.connection.InternalStreamConnection$5.completed(InternalStreamConnection.java:578)
	at com.mongodb.connection.netty.NettyStream.readAsync(NettyStream.java:322)
	at com.mongodb.connection.netty.NettyStream.handleReadResponse(NettyStream.java:350)
	at com.mongodb.connection.netty.NettyStream.access$1200(NettyStream.java:104)
	at com.mongodb.connection.netty.NettyStream$InboundBufferHandler.channelRead0(NettyStream.java:409)
	at com.mongodb.connection.netty.NettyStream$InboundBufferHandler.channelRead0(NettyStream.java:406)
	at io.netty.channel.SimpleChannelInboundHandler.channelRead(SimpleChannelInboundHandler.java:99)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:379)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:365)
	at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:357)
	at io.netty.channel.DefaultChannelPipeline$HeadContext.channelRead(DefaultChannelPipeline.java:1410)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:379)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:365)
	at io.netty.channel.DefaultChannelPipeline.fireChannelRead(DefaultChannelPipeline.java:919)
	at io.netty.channel.nio.AbstractNioByteChannel$NioByteUnsafe.read(AbstractNioByteChannel.java:166)
	at io.netty.channel.nio.NioEventLoop.processSelectedKey(NioEventLoop.java:719)
	at io.netty.channel.nio.NioEventLoop.processSelectedKeysOptimized(NioEventLoop.java:655)
	at io.netty.channel.nio.NioEventLoop.processSelectedKeys(NioEventLoop.java:581)
	at io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:493)
	at io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:989)
	at io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)
	at io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)
	at java.lang.Thread.run(Thread.java:748)
2021-07-19 18:56:29,262 DEBUG [nioEventLoopGroup-3-3] org.springframework.core.log.CompositeLog : [aa5f98bb-1, L:/0:0:0:0:0:0:0:1:8090 - R:/0:0:0:0:0:0:0:1:59558] Encoding [{timestamp=Mon Jul 19 18:56:29 COT 2021, path=/customer, status=500, error=Internal Server Error, re (truncated)...]
2021-07-19 18:56:29,289 DEBUG [reactor-http-nio-3] org.springframework.core.log.LogFormatUtils : [aa5f98bb-1, L:/0:0:0:0:0:0:0:1:8090 - R:/0:0:0:0:0:0:0:1:59558] Completed 500 INTERNAL_SERVER_ERROR
2021-07-19 18:56:35,026 DEBUG [reactor-http-nio-3] org.springframework.core.log.LogFormatUtils : [aa5f98bb-2, L:/0:0:0:0:0:0:0:1:8090 - R:/0:0:0:0:0:0:0:1:59558] HTTP GET "/customer"
2021-07-19 18:56:35,028 DEBUG [reactor-http-nio-3] org.springframework.web.reactive.handler.AbstractHandlerMapping : [aa5f98bb-2, L:/0:0:0:0:0:0:0:1:8090 - R:/0:0:0:0:0:0:0:1:59558] Mapped to com.bank.manage.customer.controller.CustomerController#getAllCustomers()
2021-07-19 18:56:35,028 INFO [reactor-http-nio-3] com.bank.manage.customer.controller.CustomerController :  EndPoit get by all customers {} 
2021-07-19 18:56:35,029 DEBUG [reactor-http-nio-3] org.springframework.web.reactive.result.HandlerResultHandlerSupport : [aa5f98bb-2, L:/0:0:0:0:0:0:0:1:8090 - R:/0:0:0:0:0:0:0:1:59558] Found 'Content-Type:application/json' in response
2021-07-19 18:56:35,030 DEBUG [reactor-http-nio-3] org.springframework.web.reactive.result.method.annotation.AbstractMessageWriterResultHandler : [aa5f98bb-2, L:/0:0:0:0:0:0:0:1:8090 - R:/0:0:0:0:0:0:0:1:59558] 0..N [com.bank.manage.customer.persistence.entity.Customer]
2021-07-19 18:56:35,036 DEBUG [nioEventLoopGroup-3-3] org.springframework.core.log.CompositeLog : [aa5f98bb-2, L:/0:0:0:0:0:0:0:1:8090 - R:/0:0:0:0:0:0:0:1:59558] Resolved [ConversionFailedException: Failed to convert from type [java.lang.Double] to type [java.lang.Integer] for value '9.89898968968E11'; nested exception is java.lang.IllegalArgumentException: Could not convert number [9.89898968968E11] of type [java.lang.Double] to target class [java.lang.Integer]: overflow] for HTTP GET /customer
2021-07-19 18:56:35,037 ERROR [nioEventLoopGroup-3-3] org.springframework.core.log.CompositeLog : [aa5f98bb-2, L:/0:0:0:0:0:0:0:1:8090 - R:/0:0:0:0:0:0:0:1:59558]  500 Server Error for HTTP GET "/customer"
org.springframework.core.convert.ConversionFailedException: Failed to convert from type [java.lang.Double] to type [java.lang.Integer] for value '9.89898968968E11'; nested exception is java.lang.IllegalArgumentException: Could not convert number [9.89898968968E11] of type [java.lang.Double] to target class [java.lang.Integer]: overflow
	at org.springframework.core.convert.support.ConversionUtils.invokeConverter(ConversionUtils.java:47)
	Suppressed: reactor.core.publisher.FluxOnAssembly$OnAssemblyException: 
Error has been observed at the following site(s):
	|_ checkpoint ⇢ Handler com.bank.manage.customer.controller.CustomerController#getAllCustomers() [DispatcherHandler]
	|_ checkpoint ⇢ org.springframework.boot.actuate.metrics.web.reactive.server.MetricsWebFilter [DefaultWebFilterChain]
	|_ checkpoint ⇢ HTTP GET "/customer" [ExceptionHandlingWebHandler]
Stack trace:
		at org.springframework.core.convert.support.ConversionUtils.invokeConverter(ConversionUtils.java:47)
		at org.springframework.core.convert.support.GenericConversionService.convert(GenericConversionService.java:192)
		at org.springframework.core.convert.support.GenericConversionService.convert(GenericConversionService.java:175)
		at org.springframework.data.mongodb.core.convert.MappingMongoConverter.doConvert(MappingMongoConverter.java:1547)
		at org.springframework.data.mongodb.core.convert.MappingMongoConverter.doConvert(MappingMongoConverter.java:1540)
		at org.springframework.data.mongodb.core.convert.MappingMongoConverter.getPotentiallyConvertedSimpleRead(MappingMongoConverter.java:1060)
		at org.springframework.data.mongodb.core.convert.MappingMongoConverter.getPotentiallyConvertedSimpleRead(MappingMongoConverter.java:1038)
		at org.springframework.data.mongodb.core.convert.MappingMongoConverter$ConversionContext.convert(MappingMongoConverter.java:1919)
		at org.springframework.data.mongodb.core.convert.MappingMongoConverter$MongoDbPropertyValueProvider.getPropertyValue(MappingMongoConverter.java:1641)
		at org.springframework.data.mongodb.core.convert.MappingMongoConverter.readProperties(MappingMongoConverter.java:481)
		at org.springframework.data.mongodb.core.convert.MappingMongoConverter.populateProperties(MappingMongoConverter.java:394)
		at org.springframework.data.mongodb.core.convert.MappingMongoConverter.read(MappingMongoConverter.java:372)
		at org.springframework.data.mongodb.core.convert.MappingMongoConverter.readDocument(MappingMongoConverter.java:342)
		at org.springframework.data.mongodb.core.convert.MappingMongoConverter.read(MappingMongoConverter.java:278)
		at org.springframework.data.mongodb.core.convert.MappingMongoConverter.read(MappingMongoConverter.java:274)
		at org.springframework.data.mongodb.core.convert.MappingMongoConverter.read(MappingMongoConverter.java:102)
		at org.springframework.data.mongodb.core.ReactiveMongoTemplate$ReadDocumentCallback.doWith(ReactiveMongoTemplate.java:3155)
		at reactor.core.publisher.FluxConcatMap$ConcatMapImmediate.drain(FluxConcatMap.java:374)
		at reactor.core.publisher.FluxConcatMap$ConcatMapImmediate.onNext(FluxConcatMap.java:250)
		at reactor.core.publisher.FluxCreate$BufferAsyncSink.drain(FluxCreate.java:793)
		at reactor.core.publisher.FluxCreate$BufferAsyncSink.next(FluxCreate.java:718)
		at reactor.core.publisher.FluxCreate$SerializedFluxSink.next(FluxCreate.java:154)
		at java.util.ArrayList.forEach(ArrayList.java:1259)
		at com.mongodb.reactivestreams.client.internal.BatchCursorFlux.lambda$recurseCursor$4(BatchCursorFlux.java:94)
		at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.onNext(MonoPeekTerminal.java:171)
		at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.onNext(MonoPeekTerminal.java:180)
		at reactor.core.publisher.FluxPeekFuseable$PeekConditionalSubscriber.onNext(FluxPeekFuseable.java:854)
		at reactor.core.publisher.MonoCreate$DefaultMonoSink.success(MonoCreate.java:160)
		at com.mongodb.reactivestreams.client.internal.MongoOperationPublisher.lambda$sinkToCallback$30(MongoOperationPublisher.java:550)
		at com.mongodb.internal.operation.AsyncQueryBatchCursor.next(AsyncQueryBatchCursor.java:207)
		at com.mongodb.internal.operation.AsyncQueryBatchCursor.next(AsyncQueryBatchCursor.java:146)
		at com.mongodb.reactivestreams.client.internal.BatchCursor.lambda$next$0(BatchCursor.java:35)
		at reactor.core.publisher.MonoCreate.subscribe(MonoCreate.java:57)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4150)
		at reactor.core.publisher.Mono.subscribeWith(Mono.java:4265)
		at reactor.core.publisher.Mono.subscribe(Mono.java:3982)
		at com.mongodb.reactivestreams.client.internal.BatchCursorFlux.recurseCursor(BatchCursorFlux.java:104)
		at com.mongodb.reactivestreams.client.internal.BatchCursorFlux.lambda$subscribe$0(BatchCursorFlux.java:56)
		at reactor.core.publisher.LambdaMonoSubscriber.onNext(LambdaMonoSubscriber.java:171)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onNext(FluxMapFuseable.java:127)
		at reactor.core.publisher.Operators$MonoSubscriber.complete(Operators.java:1815)
		at reactor.core.publisher.MonoFlatMap$FlatMapInner.onNext(MonoFlatMap.java:249)
		at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.onNext(MonoPeekTerminal.java:180)
		at reactor.core.publisher.MonoCreate$DefaultMonoSink.success(MonoCreate.java:160)
		at com.mongodb.reactivestreams.client.internal.MongoOperationPublisher.lambda$sinkToCallback$30(MongoOperationPublisher.java:550)
		at com.mongodb.reactivestreams.client.internal.OperationExecutorImpl.lambda$execute$2(OperationExecutorImpl.java:73)
		at com.mongodb.internal.async.ErrorHandlingResultCallback.onResult(ErrorHandlingResultCallback.java:48)
		at com.mongodb.internal.operation.FindOperation$3.onResult(FindOperation.java:755)
		at com.mongodb.internal.operation.OperationHelper$ReferenceCountedReleasingWrappedCallback.onResult(OperationHelper.java:532)
		at com.mongodb.internal.operation.CommandOperationHelper$10.onResult(CommandOperationHelper.java:483)
		at com.mongodb.internal.async.ErrorHandlingResultCallback.onResult(ErrorHandlingResultCallback.java:48)
		at com.mongodb.internal.connection.DefaultServer$DefaultServerProtocolExecutor$2.onResult(DefaultServer.java:286)
		at com.mongodb.internal.async.ErrorHandlingResultCallback.onResult(ErrorHandlingResultCallback.java:48)
		at com.mongodb.internal.connection.CommandProtocolImpl$1.onResult(CommandProtocolImpl.java:84)
		at com.mongodb.internal.connection.DefaultConnectionPool$PooledConnection$2.onResult(DefaultConnectionPool.java:530)
		at com.mongodb.internal.connection.UsageTrackingInternalConnection$2.onResult(UsageTrackingInternalConnection.java:142)
		at com.mongodb.internal.async.ErrorHandlingResultCallback.onResult(ErrorHandlingResultCallback.java:48)
		at com.mongodb.internal.connection.InternalStreamConnection$2$1.onResult(InternalStreamConnection.java:462)
		at com.mongodb.internal.connection.InternalStreamConnection$2$1.onResult(InternalStreamConnection.java:439)
		at com.mongodb.internal.connection.InternalStreamConnection$MessageHeaderCallback$MessageCallback.onResult(InternalStreamConnection.java:744)
		at com.mongodb.internal.connection.InternalStreamConnection$MessageHeaderCallback$MessageCallback.onResult(InternalStreamConnection.java:711)
		at com.mongodb.internal.connection.InternalStreamConnection$5.completed(InternalStreamConnection.java:581)
		at com.mongodb.internal.connection.InternalStreamConnection$5.completed(InternalStreamConnection.java:578)
		at com.mongodb.connection.netty.NettyStream.readAsync(NettyStream.java:322)
		at com.mongodb.connection.netty.NettyStream.readAsync(NettyStream.java:269)
		at com.mongodb.internal.connection.InternalStreamConnection.readAsync(InternalStreamConnection.java:578)
		at com.mongodb.internal.connection.InternalStreamConnection.access$1100(InternalStreamConnection.java:78)
		at com.mongodb.internal.connection.InternalStreamConnection$MessageHeaderCallback.onResult(InternalStreamConnection.java:701)
		at com.mongodb.internal.connection.InternalStreamConnection$MessageHeaderCallback.onResult(InternalStreamConnection.java:686)
		at com.mongodb.internal.connection.InternalStreamConnection$5.completed(InternalStreamConnection.java:581)
		at com.mongodb.internal.connection.InternalStreamConnection$5.completed(InternalStreamConnection.java:578)
		at com.mongodb.connection.netty.NettyStream.readAsync(NettyStream.java:322)
		at com.mongodb.connection.netty.NettyStream.handleReadResponse(NettyStream.java:350)
		at com.mongodb.connection.netty.NettyStream.access$1200(NettyStream.java:104)
		at com.mongodb.connection.netty.NettyStream$InboundBufferHandler.channelRead0(NettyStream.java:409)
		at com.mongodb.connection.netty.NettyStream$InboundBufferHandler.channelRead0(NettyStream.java:406)
		at io.netty.channel.SimpleChannelInboundHandler.channelRead(SimpleChannelInboundHandler.java:99)
		at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:379)
		at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:365)
		at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:357)
		at io.netty.channel.DefaultChannelPipeline$HeadContext.channelRead(DefaultChannelPipeline.java:1410)
		at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:379)
		at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:365)
		at io.netty.channel.DefaultChannelPipeline.fireChannelRead(DefaultChannelPipeline.java:919)
		at io.netty.channel.nio.AbstractNioByteChannel$NioByteUnsafe.read(AbstractNioByteChannel.java:166)
		at io.netty.channel.nio.NioEventLoop.processSelectedKey(NioEventLoop.java:719)
		at io.netty.channel.nio.NioEventLoop.processSelectedKeysOptimized(NioEventLoop.java:655)
		at io.netty.channel.nio.NioEventLoop.processSelectedKeys(NioEventLoop.java:581)
		at io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:493)
		at io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:989)
		at io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)
		at io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)
		at java.lang.Thread.run(Thread.java:748)
Caused by: java.lang.IllegalArgumentException: Could not convert number [9.89898968968E11] of type [java.lang.Double] to target class [java.lang.Integer]: overflow
	at org.springframework.util.NumberUtils.raiseOverflowException(NumberUtils.java:175)
	at org.springframework.util.NumberUtils.convertNumberToTargetClass(NumberUtils.java:108)
	at org.springframework.core.convert.support.NumberToNumberConverterFactory$NumberToNumber.convert(NumberToNumberConverterFactory.java:66)
	at org.springframework.core.convert.support.NumberToNumberConverterFactory$NumberToNumber.convert(NumberToNumberConverterFactory.java:56)
	at org.springframework.core.convert.support.GenericConversionService$ConverterFactoryAdapter.convert(GenericConversionService.java:437)
	at org.springframework.core.convert.support.ConversionUtils.invokeConverter(ConversionUtils.java:41)
	at org.springframework.core.convert.support.GenericConversionService.convert(GenericConversionService.java:192)
	at org.springframework.core.convert.support.GenericConversionService.convert(GenericConversionService.java:175)
	at org.springframework.data.mongodb.core.convert.MappingMongoConverter.doConvert(MappingMongoConverter.java:1547)
	at org.springframework.data.mongodb.core.convert.MappingMongoConverter.doConvert(MappingMongoConverter.java:1540)
	at org.springframework.data.mongodb.core.convert.MappingMongoConverter.getPotentiallyConvertedSimpleRead(MappingMongoConverter.java:1060)
	at org.springframework.data.mongodb.core.convert.MappingMongoConverter.getPotentiallyConvertedSimpleRead(MappingMongoConverter.java:1038)
	at org.springframework.data.mongodb.core.convert.MappingMongoConverter$ConversionContext.convert(MappingMongoConverter.java:1919)
	at org.springframework.data.mongodb.core.convert.MappingMongoConverter$MongoDbPropertyValueProvider.getPropertyValue(MappingMongoConverter.java:1641)
	at org.springframework.data.mongodb.core.convert.MappingMongoConverter.readProperties(MappingMongoConverter.java:481)
	at org.springframework.data.mongodb.core.convert.MappingMongoConverter.populateProperties(MappingMongoConverter.java:394)
	at org.springframework.data.mongodb.core.convert.MappingMongoConverter.read(MappingMongoConverter.java:372)
	at org.springframework.data.mongodb.core.convert.MappingMongoConverter.readDocument(MappingMongoConverter.java:342)
	at org.springframework.data.mongodb.core.convert.MappingMongoConverter.read(MappingMongoConverter.java:278)
	at org.springframework.data.mongodb.core.convert.MappingMongoConverter.read(MappingMongoConverter.java:274)
	at org.springframework.data.mongodb.core.convert.MappingMongoConverter.read(MappingMongoConverter.java:102)
	at org.springframework.data.mongodb.core.ReactiveMongoTemplate$ReadDocumentCallback.doWith(ReactiveMongoTemplate.java:3155)
	at reactor.core.publisher.FluxConcatMap$ConcatMapImmediate.drain(FluxConcatMap.java:374)
	at reactor.core.publisher.FluxConcatMap$ConcatMapImmediate.onNext(FluxConcatMap.java:250)
	at reactor.core.publisher.FluxCreate$BufferAsyncSink.drain(FluxCreate.java:793)
	at reactor.core.publisher.FluxCreate$BufferAsyncSink.next(FluxCreate.java:718)
	at reactor.core.publisher.FluxCreate$SerializedFluxSink.next(FluxCreate.java:154)
	at java.util.ArrayList.forEach(ArrayList.java:1259)
	at com.mongodb.reactivestreams.client.internal.BatchCursorFlux.lambda$recurseCursor$4(BatchCursorFlux.java:94)
	at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.onNext(MonoPeekTerminal.java:171)
	at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.onNext(MonoPeekTerminal.java:180)
	at reactor.core.publisher.FluxPeekFuseable$PeekConditionalSubscriber.onNext(FluxPeekFuseable.java:854)
	at reactor.core.publisher.MonoCreate$DefaultMonoSink.success(MonoCreate.java:160)
	at com.mongodb.reactivestreams.client.internal.MongoOperationPublisher.lambda$sinkToCallback$30(MongoOperationPublisher.java:550)
	at com.mongodb.internal.operation.AsyncQueryBatchCursor.next(AsyncQueryBatchCursor.java:207)
	at com.mongodb.internal.operation.AsyncQueryBatchCursor.next(AsyncQueryBatchCursor.java:146)
	at com.mongodb.reactivestreams.client.internal.BatchCursor.lambda$next$0(BatchCursor.java:35)
	at reactor.core.publisher.MonoCreate.subscribe(MonoCreate.java:57)
	at reactor.core.publisher.Mono.subscribe(Mono.java:4150)
	at reactor.core.publisher.Mono.subscribeWith(Mono.java:4265)
	at reactor.core.publisher.Mono.subscribe(Mono.java:3982)
	at com.mongodb.reactivestreams.client.internal.BatchCursorFlux.recurseCursor(BatchCursorFlux.java:104)
	at com.mongodb.reactivestreams.client.internal.BatchCursorFlux.lambda$subscribe$0(BatchCursorFlux.java:56)
	at reactor.core.publisher.LambdaMonoSubscriber.onNext(LambdaMonoSubscriber.java:171)
	at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onNext(FluxMapFuseable.java:127)
	at reactor.core.publisher.Operators$MonoSubscriber.complete(Operators.java:1815)
	at reactor.core.publisher.MonoFlatMap$FlatMapInner.onNext(MonoFlatMap.java:249)
	at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.onNext(MonoPeekTerminal.java:180)
	at reactor.core.publisher.MonoCreate$DefaultMonoSink.success(MonoCreate.java:160)
	at com.mongodb.reactivestreams.client.internal.MongoOperationPublisher.lambda$sinkToCallback$30(MongoOperationPublisher.java:550)
	at com.mongodb.reactivestreams.client.internal.OperationExecutorImpl.lambda$execute$2(OperationExecutorImpl.java:73)
	at com.mongodb.internal.async.ErrorHandlingResultCallback.onResult(ErrorHandlingResultCallback.java:48)
	at com.mongodb.internal.operation.FindOperation$3.onResult(FindOperation.java:755)
	at com.mongodb.internal.operation.OperationHelper$ReferenceCountedReleasingWrappedCallback.onResult(OperationHelper.java:532)
	at com.mongodb.internal.operation.CommandOperationHelper$10.onResult(CommandOperationHelper.java:483)
	at com.mongodb.internal.async.ErrorHandlingResultCallback.onResult(ErrorHandlingResultCallback.java:48)
	at com.mongodb.internal.connection.DefaultServer$DefaultServerProtocolExecutor$2.onResult(DefaultServer.java:286)
	at com.mongodb.internal.async.ErrorHandlingResultCallback.onResult(ErrorHandlingResultCallback.java:48)
	at com.mongodb.internal.connection.CommandProtocolImpl$1.onResult(CommandProtocolImpl.java:84)
	at com.mongodb.internal.connection.DefaultConnectionPool$PooledConnection$2.onResult(DefaultConnectionPool.java:530)
	at com.mongodb.internal.connection.UsageTrackingInternalConnection$2.onResult(UsageTrackingInternalConnection.java:142)
	at com.mongodb.internal.async.ErrorHandlingResultCallback.onResult(ErrorHandlingResultCallback.java:48)
	at com.mongodb.internal.connection.InternalStreamConnection$2$1.onResult(InternalStreamConnection.java:462)
	at com.mongodb.internal.connection.InternalStreamConnection$2$1.onResult(InternalStreamConnection.java:439)
	at com.mongodb.internal.connection.InternalStreamConnection$MessageHeaderCallback$MessageCallback.onResult(InternalStreamConnection.java:744)
	at com.mongodb.internal.connection.InternalStreamConnection$MessageHeaderCallback$MessageCallback.onResult(InternalStreamConnection.java:711)
	at com.mongodb.internal.connection.InternalStreamConnection$5.completed(InternalStreamConnection.java:581)
	at com.mongodb.internal.connection.InternalStreamConnection$5.completed(InternalStreamConnection.java:578)
	at com.mongodb.connection.netty.NettyStream.readAsync(NettyStream.java:322)
	at com.mongodb.connection.netty.NettyStream.readAsync(NettyStream.java:269)
	at com.mongodb.internal.connection.InternalStreamConnection.readAsync(InternalStreamConnection.java:578)
	at com.mongodb.internal.connection.InternalStreamConnection.access$1100(InternalStreamConnection.java:78)
	at com.mongodb.internal.connection.InternalStreamConnection$MessageHeaderCallback.onResult(InternalStreamConnection.java:701)
	at com.mongodb.internal.connection.InternalStreamConnection$MessageHeaderCallback.onResult(InternalStreamConnection.java:686)
	at com.mongodb.internal.connection.InternalStreamConnection$5.completed(InternalStreamConnection.java:581)
	at com.mongodb.internal.connection.InternalStreamConnection$5.completed(InternalStreamConnection.java:578)
	at com.mongodb.connection.netty.NettyStream.readAsync(NettyStream.java:322)
	at com.mongodb.connection.netty.NettyStream.handleReadResponse(NettyStream.java:350)
	at com.mongodb.connection.netty.NettyStream.access$1200(NettyStream.java:104)
	at com.mongodb.connection.netty.NettyStream$InboundBufferHandler.channelRead0(NettyStream.java:409)
	at com.mongodb.connection.netty.NettyStream$InboundBufferHandler.channelRead0(NettyStream.java:406)
	at io.netty.channel.SimpleChannelInboundHandler.channelRead(SimpleChannelInboundHandler.java:99)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:379)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:365)
	at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:357)
	at io.netty.channel.DefaultChannelPipeline$HeadContext.channelRead(DefaultChannelPipeline.java:1410)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:379)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:365)
	at io.netty.channel.DefaultChannelPipeline.fireChannelRead(DefaultChannelPipeline.java:919)
	at io.netty.channel.nio.AbstractNioByteChannel$NioByteUnsafe.read(AbstractNioByteChannel.java:166)
	at io.netty.channel.nio.NioEventLoop.processSelectedKey(NioEventLoop.java:719)
	at io.netty.channel.nio.NioEventLoop.processSelectedKeysOptimized(NioEventLoop.java:655)
	at io.netty.channel.nio.NioEventLoop.processSelectedKeys(NioEventLoop.java:581)
	at io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:493)
	at io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:989)
	at io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)
	at io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)
	at java.lang.Thread.run(Thread.java:748)
2021-07-19 18:56:35,040 DEBUG [nioEventLoopGroup-3-3] org.springframework.core.log.CompositeLog : [aa5f98bb-2, L:/0:0:0:0:0:0:0:1:8090 - R:/0:0:0:0:0:0:0:1:59558] Encoding [{timestamp=Mon Jul 19 18:56:35 COT 2021, path=/customer, status=500, error=Internal Server Error, re (truncated)...]
2021-07-19 18:56:35,042 DEBUG [reactor-http-nio-3] org.springframework.core.log.LogFormatUtils : [aa5f98bb-2, L:/0:0:0:0:0:0:0:1:8090 - R:/0:0:0:0:0:0:0:1:59558] Completed 500 INTERNAL_SERVER_ERROR
2021-07-19 18:56:50,674 DEBUG [DiscoveryClient-CacheRefreshExecutor-0] org.springframework.core.log.CompositeLog : HTTP GET http://localhost:8761/eureka/apps/delta
2021-07-19 18:56:50,676 DEBUG [DiscoveryClient-CacheRefreshExecutor-0] org.springframework.core.log.CompositeLog : Accept=[application/json, application/*+json]
2021-07-19 18:56:50,681 DEBUG [DiscoveryClient-CacheRefreshExecutor-0] org.springframework.core.log.CompositeLog : Response 200 OK
2021-07-19 18:56:50,682 DEBUG [DiscoveryClient-CacheRefreshExecutor-0] org.springframework.core.log.CompositeLog : Reading to [org.springframework.cloud.netflix.eureka.http.EurekaApplications]
2021-07-19 18:56:51,971 DEBUG [DiscoveryClient-HeartbeatExecutor-0] org.springframework.core.log.CompositeLog : HTTP PUT http://localhost:8761/eureka/apps/CUSTOMER_SERVICE/host.docker.internal:customer_service:8090?status=UP&lastDirtyTimestamp=1626738890496
2021-07-19 18:56:51,973 DEBUG [DiscoveryClient-HeartbeatExecutor-0] org.springframework.core.log.CompositeLog : Accept=[application/json, application/*+json]
2021-07-19 18:56:51,999 DEBUG [DiscoveryClient-HeartbeatExecutor-0] org.springframework.core.log.CompositeLog : Response 200 OK
2021-07-19 18:56:54,010 DEBUG [reactor-http-nio-3] org.springframework.core.log.LogFormatUtils : [aa5f98bb-3, L:/0:0:0:0:0:0:0:1:8090 - R:/0:0:0:0:0:0:0:1:59558] HTTP GET "/customers"
2021-07-19 18:56:54,013 DEBUG [reactor-http-nio-3] org.springframework.web.reactive.handler.AbstractHandlerMapping : [aa5f98bb-3, L:/0:0:0:0:0:0:0:1:8090 - R:/0:0:0:0:0:0:0:1:59558] Mapped to ResourceWebHandler ["classpath:/META-INF/resources/", "classpath:/resources/", "classpath:/static/", "classpath:/public/"]
2021-07-19 18:56:54,017 DEBUG [reactor-http-nio-3] org.springframework.web.reactive.resource.ResourceWebHandler : [aa5f98bb-3, L:/0:0:0:0:0:0:0:1:8090 - R:/0:0:0:0:0:0:0:1:59558] Resource not found
2021-07-19 18:56:54,019 DEBUG [reactor-http-nio-3] org.springframework.core.log.CompositeLog : [aa5f98bb-3, L:/0:0:0:0:0:0:0:1:8090 - R:/0:0:0:0:0:0:0:1:59558] Resolved [ResponseStatusException: 404 NOT_FOUND] for HTTP GET /customers
2021-07-19 18:56:54,020 DEBUG [reactor-http-nio-3] org.springframework.core.log.CompositeLog : [aa5f98bb-3, L:/0:0:0:0:0:0:0:1:8090 - R:/0:0:0:0:0:0:0:1:59558] Encoding [{timestamp=Mon Jul 19 18:56:54 COT 2021, path=/customers, status=404, error=Not Found, message=null, (truncated)...]
2021-07-19 18:56:54,023 DEBUG [reactor-http-nio-3] org.springframework.core.log.LogFormatUtils : [aa5f98bb-3, L:/0:0:0:0:0:0:0:1:8090 - R:/0:0:0:0:0:0:0:1:59558] Completed 404 NOT_FOUND
2021-07-19 18:57:16,166 DEBUG [reactor-http-nio-3] org.springframework.core.log.LogFormatUtils : [aa5f98bb-4, L:/0:0:0:0:0:0:0:1:8090 - R:/0:0:0:0:0:0:0:1:59558] HTTP GET "/customer"
2021-07-19 18:57:16,167 DEBUG [reactor-http-nio-3] org.springframework.web.reactive.handler.AbstractHandlerMapping : [aa5f98bb-4, L:/0:0:0:0:0:0:0:1:8090 - R:/0:0:0:0:0:0:0:1:59558] Mapped to com.bank.manage.customer.controller.CustomerController#getAllCustomers()
2021-07-19 18:57:16,168 INFO [reactor-http-nio-3] com.bank.manage.customer.controller.CustomerController :  EndPoit get by all customers {} 
2021-07-19 18:57:16,170 DEBUG [reactor-http-nio-3] org.springframework.web.reactive.result.HandlerResultHandlerSupport : [aa5f98bb-4, L:/0:0:0:0:0:0:0:1:8090 - R:/0:0:0:0:0:0:0:1:59558] Found 'Content-Type:application/json' in response
2021-07-19 18:57:16,170 DEBUG [reactor-http-nio-3] org.springframework.web.reactive.result.method.annotation.AbstractMessageWriterResultHandler : [aa5f98bb-4, L:/0:0:0:0:0:0:0:1:8090 - R:/0:0:0:0:0:0:0:1:59558] 0..N [com.bank.manage.customer.persistence.entity.Customer]
2021-07-19 18:57:16,176 DEBUG [nioEventLoopGroup-3-3] org.springframework.core.log.CompositeLog : [aa5f98bb-4, L:/0:0:0:0:0:0:0:1:8090 - R:/0:0:0:0:0:0:0:1:59558] Resolved [ConversionFailedException: Failed to convert from type [java.lang.Double] to type [java.lang.Integer] for value '9.89898968968E11'; nested exception is java.lang.IllegalArgumentException: Could not convert number [9.89898968968E11] of type [java.lang.Double] to target class [java.lang.Integer]: overflow] for HTTP GET /customer
2021-07-19 18:57:16,177 ERROR [nioEventLoopGroup-3-3] org.springframework.core.log.CompositeLog : [aa5f98bb-4, L:/0:0:0:0:0:0:0:1:8090 - R:/0:0:0:0:0:0:0:1:59558]  500 Server Error for HTTP GET "/customer"
org.springframework.core.convert.ConversionFailedException: Failed to convert from type [java.lang.Double] to type [java.lang.Integer] for value '9.89898968968E11'; nested exception is java.lang.IllegalArgumentException: Could not convert number [9.89898968968E11] of type [java.lang.Double] to target class [java.lang.Integer]: overflow
	at org.springframework.core.convert.support.ConversionUtils.invokeConverter(ConversionUtils.java:47)
	Suppressed: reactor.core.publisher.FluxOnAssembly$OnAssemblyException: 
Error has been observed at the following site(s):
	|_ checkpoint ⇢ Handler com.bank.manage.customer.controller.CustomerController#getAllCustomers() [DispatcherHandler]
	|_ checkpoint ⇢ org.springframework.boot.actuate.metrics.web.reactive.server.MetricsWebFilter [DefaultWebFilterChain]
	|_ checkpoint ⇢ HTTP GET "/customer" [ExceptionHandlingWebHandler]
Stack trace:
		at org.springframework.core.convert.support.ConversionUtils.invokeConverter(ConversionUtils.java:47)
		at org.springframework.core.convert.support.GenericConversionService.convert(GenericConversionService.java:192)
		at org.springframework.core.convert.support.GenericConversionService.convert(GenericConversionService.java:175)
		at org.springframework.data.mongodb.core.convert.MappingMongoConverter.doConvert(MappingMongoConverter.java:1547)
		at org.springframework.data.mongodb.core.convert.MappingMongoConverter.doConvert(MappingMongoConverter.java:1540)
		at org.springframework.data.mongodb.core.convert.MappingMongoConverter.getPotentiallyConvertedSimpleRead(MappingMongoConverter.java:1060)
		at org.springframework.data.mongodb.core.convert.MappingMongoConverter.getPotentiallyConvertedSimpleRead(MappingMongoConverter.java:1038)
		at org.springframework.data.mongodb.core.convert.MappingMongoConverter$ConversionContext.convert(MappingMongoConverter.java:1919)
		at org.springframework.data.mongodb.core.convert.MappingMongoConverter$MongoDbPropertyValueProvider.getPropertyValue(MappingMongoConverter.java:1641)
		at org.springframework.data.mongodb.core.convert.MappingMongoConverter.readProperties(MappingMongoConverter.java:481)
		at org.springframework.data.mongodb.core.convert.MappingMongoConverter.populateProperties(MappingMongoConverter.java:394)
		at org.springframework.data.mongodb.core.convert.MappingMongoConverter.read(MappingMongoConverter.java:372)
		at org.springframework.data.mongodb.core.convert.MappingMongoConverter.readDocument(MappingMongoConverter.java:342)
		at org.springframework.data.mongodb.core.convert.MappingMongoConverter.read(MappingMongoConverter.java:278)
		at org.springframework.data.mongodb.core.convert.MappingMongoConverter.read(MappingMongoConverter.java:274)
		at org.springframework.data.mongodb.core.convert.MappingMongoConverter.read(MappingMongoConverter.java:102)
		at org.springframework.data.mongodb.core.ReactiveMongoTemplate$ReadDocumentCallback.doWith(ReactiveMongoTemplate.java:3155)
		at reactor.core.publisher.FluxConcatMap$ConcatMapImmediate.drain(FluxConcatMap.java:374)
		at reactor.core.publisher.FluxConcatMap$ConcatMapImmediate.onNext(FluxConcatMap.java:250)
		at reactor.core.publisher.FluxCreate$BufferAsyncSink.drain(FluxCreate.java:793)
		at reactor.core.publisher.FluxCreate$BufferAsyncSink.next(FluxCreate.java:718)
		at reactor.core.publisher.FluxCreate$SerializedFluxSink.next(FluxCreate.java:154)
		at java.util.ArrayList.forEach(ArrayList.java:1259)
		at com.mongodb.reactivestreams.client.internal.BatchCursorFlux.lambda$recurseCursor$4(BatchCursorFlux.java:94)
		at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.onNext(MonoPeekTerminal.java:171)
		at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.onNext(MonoPeekTerminal.java:180)
		at reactor.core.publisher.FluxPeekFuseable$PeekConditionalSubscriber.onNext(FluxPeekFuseable.java:854)
		at reactor.core.publisher.MonoCreate$DefaultMonoSink.success(MonoCreate.java:160)
		at com.mongodb.reactivestreams.client.internal.MongoOperationPublisher.lambda$sinkToCallback$30(MongoOperationPublisher.java:550)
		at com.mongodb.internal.operation.AsyncQueryBatchCursor.next(AsyncQueryBatchCursor.java:207)
		at com.mongodb.internal.operation.AsyncQueryBatchCursor.next(AsyncQueryBatchCursor.java:146)
		at com.mongodb.reactivestreams.client.internal.BatchCursor.lambda$next$0(BatchCursor.java:35)
		at reactor.core.publisher.MonoCreate.subscribe(MonoCreate.java:57)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4150)
		at reactor.core.publisher.Mono.subscribeWith(Mono.java:4265)
		at reactor.core.publisher.Mono.subscribe(Mono.java:3982)
		at com.mongodb.reactivestreams.client.internal.BatchCursorFlux.recurseCursor(BatchCursorFlux.java:104)
		at com.mongodb.reactivestreams.client.internal.BatchCursorFlux.lambda$subscribe$0(BatchCursorFlux.java:56)
		at reactor.core.publisher.LambdaMonoSubscriber.onNext(LambdaMonoSubscriber.java:171)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onNext(FluxMapFuseable.java:127)
		at reactor.core.publisher.Operators$MonoSubscriber.complete(Operators.java:1815)
		at reactor.core.publisher.MonoFlatMap$FlatMapInner.onNext(MonoFlatMap.java:249)
		at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.onNext(MonoPeekTerminal.java:180)
		at reactor.core.publisher.MonoCreate$DefaultMonoSink.success(MonoCreate.java:160)
		at com.mongodb.reactivestreams.client.internal.MongoOperationPublisher.lambda$sinkToCallback$30(MongoOperationPublisher.java:550)
		at com.mongodb.reactivestreams.client.internal.OperationExecutorImpl.lambda$execute$2(OperationExecutorImpl.java:73)
		at com.mongodb.internal.async.ErrorHandlingResultCallback.onResult(ErrorHandlingResultCallback.java:48)
		at com.mongodb.internal.operation.FindOperation$3.onResult(FindOperation.java:755)
		at com.mongodb.internal.operation.OperationHelper$ReferenceCountedReleasingWrappedCallback.onResult(OperationHelper.java:532)
		at com.mongodb.internal.operation.CommandOperationHelper$10.onResult(CommandOperationHelper.java:483)
		at com.mongodb.internal.async.ErrorHandlingResultCallback.onResult(ErrorHandlingResultCallback.java:48)
		at com.mongodb.internal.connection.DefaultServer$DefaultServerProtocolExecutor$2.onResult(DefaultServer.java:286)
		at com.mongodb.internal.async.ErrorHandlingResultCallback.onResult(ErrorHandlingResultCallback.java:48)
		at com.mongodb.internal.connection.CommandProtocolImpl$1.onResult(CommandProtocolImpl.java:84)
		at com.mongodb.internal.connection.DefaultConnectionPool$PooledConnection$2.onResult(DefaultConnectionPool.java:530)
		at com.mongodb.internal.connection.UsageTrackingInternalConnection$2.onResult(UsageTrackingInternalConnection.java:142)
		at com.mongodb.internal.async.ErrorHandlingResultCallback.onResult(ErrorHandlingResultCallback.java:48)
		at com.mongodb.internal.connection.InternalStreamConnection$2$1.onResult(InternalStreamConnection.java:462)
		at com.mongodb.internal.connection.InternalStreamConnection$2$1.onResult(InternalStreamConnection.java:439)
		at com.mongodb.internal.connection.InternalStreamConnection$MessageHeaderCallback$MessageCallback.onResult(InternalStreamConnection.java:744)
		at com.mongodb.internal.connection.InternalStreamConnection$MessageHeaderCallback$MessageCallback.onResult(InternalStreamConnection.java:711)
		at com.mongodb.internal.connection.InternalStreamConnection$5.completed(InternalStreamConnection.java:581)
		at com.mongodb.internal.connection.InternalStreamConnection$5.completed(InternalStreamConnection.java:578)
		at com.mongodb.connection.netty.NettyStream.readAsync(NettyStream.java:322)
		at com.mongodb.connection.netty.NettyStream.readAsync(NettyStream.java:269)
		at com.mongodb.internal.connection.InternalStreamConnection.readAsync(InternalStreamConnection.java:578)
		at com.mongodb.internal.connection.InternalStreamConnection.access$1100(InternalStreamConnection.java:78)
		at com.mongodb.internal.connection.InternalStreamConnection$MessageHeaderCallback.onResult(InternalStreamConnection.java:701)
		at com.mongodb.internal.connection.InternalStreamConnection$MessageHeaderCallback.onResult(InternalStreamConnection.java:686)
		at com.mongodb.internal.connection.InternalStreamConnection$5.completed(InternalStreamConnection.java:581)
		at com.mongodb.internal.connection.InternalStreamConnection$5.completed(InternalStreamConnection.java:578)
		at com.mongodb.connection.netty.NettyStream.readAsync(NettyStream.java:322)
		at com.mongodb.connection.netty.NettyStream.handleReadResponse(NettyStream.java:350)
		at com.mongodb.connection.netty.NettyStream.access$1200(NettyStream.java:104)
		at com.mongodb.connection.netty.NettyStream$InboundBufferHandler.channelRead0(NettyStream.java:409)
		at com.mongodb.connection.netty.NettyStream$InboundBufferHandler.channelRead0(NettyStream.java:406)
		at io.netty.channel.SimpleChannelInboundHandler.channelRead(SimpleChannelInboundHandler.java:99)
		at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:379)
		at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:365)
		at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:357)
		at io.netty.channel.DefaultChannelPipeline$HeadContext.channelRead(DefaultChannelPipeline.java:1410)
		at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:379)
		at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:365)
		at io.netty.channel.DefaultChannelPipeline.fireChannelRead(DefaultChannelPipeline.java:919)
		at io.netty.channel.nio.AbstractNioByteChannel$NioByteUnsafe.read(AbstractNioByteChannel.java:166)
		at io.netty.channel.nio.NioEventLoop.processSelectedKey(NioEventLoop.java:719)
		at io.netty.channel.nio.NioEventLoop.processSelectedKeysOptimized(NioEventLoop.java:655)
		at io.netty.channel.nio.NioEventLoop.processSelectedKeys(NioEventLoop.java:581)
		at io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:493)
		at io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:989)
		at io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)
		at io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)
		at java.lang.Thread.run(Thread.java:748)
Caused by: java.lang.IllegalArgumentException: Could not convert number [9.89898968968E11] of type [java.lang.Double] to target class [java.lang.Integer]: overflow
	at org.springframework.util.NumberUtils.raiseOverflowException(NumberUtils.java:175)
	at org.springframework.util.NumberUtils.convertNumberToTargetClass(NumberUtils.java:108)
	at org.springframework.core.convert.support.NumberToNumberConverterFactory$NumberToNumber.convert(NumberToNumberConverterFactory.java:66)
	at org.springframework.core.convert.support.NumberToNumberConverterFactory$NumberToNumber.convert(NumberToNumberConverterFactory.java:56)
	at org.springframework.core.convert.support.GenericConversionService$ConverterFactoryAdapter.convert(GenericConversionService.java:437)
	at org.springframework.core.convert.support.ConversionUtils.invokeConverter(ConversionUtils.java:41)
	at org.springframework.core.convert.support.GenericConversionService.convert(GenericConversionService.java:192)
	at org.springframework.core.convert.support.GenericConversionService.convert(GenericConversionService.java:175)
	at org.springframework.data.mongodb.core.convert.MappingMongoConverter.doConvert(MappingMongoConverter.java:1547)
	at org.springframework.data.mongodb.core.convert.MappingMongoConverter.doConvert(MappingMongoConverter.java:1540)
	at org.springframework.data.mongodb.core.convert.MappingMongoConverter.getPotentiallyConvertedSimpleRead(MappingMongoConverter.java:1060)
	at org.springframework.data.mongodb.core.convert.MappingMongoConverter.getPotentiallyConvertedSimpleRead(MappingMongoConverter.java:1038)
	at org.springframework.data.mongodb.core.convert.MappingMongoConverter$ConversionContext.convert(MappingMongoConverter.java:1919)
	at org.springframework.data.mongodb.core.convert.MappingMongoConverter$MongoDbPropertyValueProvider.getPropertyValue(MappingMongoConverter.java:1641)
	at org.springframework.data.mongodb.core.convert.MappingMongoConverter.readProperties(MappingMongoConverter.java:481)
	at org.springframework.data.mongodb.core.convert.MappingMongoConverter.populateProperties(MappingMongoConverter.java:394)
	at org.springframework.data.mongodb.core.convert.MappingMongoConverter.read(MappingMongoConverter.java:372)
	at org.springframework.data.mongodb.core.convert.MappingMongoConverter.readDocument(MappingMongoConverter.java:342)
	at org.springframework.data.mongodb.core.convert.MappingMongoConverter.read(MappingMongoConverter.java:278)
	at org.springframework.data.mongodb.core.convert.MappingMongoConverter.read(MappingMongoConverter.java:274)
	at org.springframework.data.mongodb.core.convert.MappingMongoConverter.read(MappingMongoConverter.java:102)
	at org.springframework.data.mongodb.core.ReactiveMongoTemplate$ReadDocumentCallback.doWith(ReactiveMongoTemplate.java:3155)
	at reactor.core.publisher.FluxConcatMap$ConcatMapImmediate.drain(FluxConcatMap.java:374)
	at reactor.core.publisher.FluxConcatMap$ConcatMapImmediate.onNext(FluxConcatMap.java:250)
	at reactor.core.publisher.FluxCreate$BufferAsyncSink.drain(FluxCreate.java:793)
	at reactor.core.publisher.FluxCreate$BufferAsyncSink.next(FluxCreate.java:718)
	at reactor.core.publisher.FluxCreate$SerializedFluxSink.next(FluxCreate.java:154)
	at java.util.ArrayList.forEach(ArrayList.java:1259)
	at com.mongodb.reactivestreams.client.internal.BatchCursorFlux.lambda$recurseCursor$4(BatchCursorFlux.java:94)
	at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.onNext(MonoPeekTerminal.java:171)
	at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.onNext(MonoPeekTerminal.java:180)
	at reactor.core.publisher.FluxPeekFuseable$PeekConditionalSubscriber.onNext(FluxPeekFuseable.java:854)
	at reactor.core.publisher.MonoCreate$DefaultMonoSink.success(MonoCreate.java:160)
	at com.mongodb.reactivestreams.client.internal.MongoOperationPublisher.lambda$sinkToCallback$30(MongoOperationPublisher.java:550)
	at com.mongodb.internal.operation.AsyncQueryBatchCursor.next(AsyncQueryBatchCursor.java:207)
	at com.mongodb.internal.operation.AsyncQueryBatchCursor.next(AsyncQueryBatchCursor.java:146)
	at com.mongodb.reactivestreams.client.internal.BatchCursor.lambda$next$0(BatchCursor.java:35)
	at reactor.core.publisher.MonoCreate.subscribe(MonoCreate.java:57)
	at reactor.core.publisher.Mono.subscribe(Mono.java:4150)
	at reactor.core.publisher.Mono.subscribeWith(Mono.java:4265)
	at reactor.core.publisher.Mono.subscribe(Mono.java:3982)
	at com.mongodb.reactivestreams.client.internal.BatchCursorFlux.recurseCursor(BatchCursorFlux.java:104)
	at com.mongodb.reactivestreams.client.internal.BatchCursorFlux.lambda$subscribe$0(BatchCursorFlux.java:56)
	at reactor.core.publisher.LambdaMonoSubscriber.onNext(LambdaMonoSubscriber.java:171)
	at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onNext(FluxMapFuseable.java:127)
	at reactor.core.publisher.Operators$MonoSubscriber.complete(Operators.java:1815)
	at reactor.core.publisher.MonoFlatMap$FlatMapInner.onNext(MonoFlatMap.java:249)
	at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.onNext(MonoPeekTerminal.java:180)
	at reactor.core.publisher.MonoCreate$DefaultMonoSink.success(MonoCreate.java:160)
	at com.mongodb.reactivestreams.client.internal.MongoOperationPublisher.lambda$sinkToCallback$30(MongoOperationPublisher.java:550)
	at com.mongodb.reactivestreams.client.internal.OperationExecutorImpl.lambda$execute$2(OperationExecutorImpl.java:73)
	at com.mongodb.internal.async.ErrorHandlingResultCallback.onResult(ErrorHandlingResultCallback.java:48)
	at com.mongodb.internal.operation.FindOperation$3.onResult(FindOperation.java:755)
	at com.mongodb.internal.operation.OperationHelper$ReferenceCountedReleasingWrappedCallback.onResult(OperationHelper.java:532)
	at com.mongodb.internal.operation.CommandOperationHelper$10.onResult(CommandOperationHelper.java:483)
	at com.mongodb.internal.async.ErrorHandlingResultCallback.onResult(ErrorHandlingResultCallback.java:48)
	at com.mongodb.internal.connection.DefaultServer$DefaultServerProtocolExecutor$2.onResult(DefaultServer.java:286)
	at com.mongodb.internal.async.ErrorHandlingResultCallback.onResult(ErrorHandlingResultCallback.java:48)
	at com.mongodb.internal.connection.CommandProtocolImpl$1.onResult(CommandProtocolImpl.java:84)
	at com.mongodb.internal.connection.DefaultConnectionPool$PooledConnection$2.onResult(DefaultConnectionPool.java:530)
	at com.mongodb.internal.connection.UsageTrackingInternalConnection$2.onResult(UsageTrackingInternalConnection.java:142)
	at com.mongodb.internal.async.ErrorHandlingResultCallback.onResult(ErrorHandlingResultCallback.java:48)
	at com.mongodb.internal.connection.InternalStreamConnection$2$1.onResult(InternalStreamConnection.java:462)
	at com.mongodb.internal.connection.InternalStreamConnection$2$1.onResult(InternalStreamConnection.java:439)
	at com.mongodb.internal.connection.InternalStreamConnection$MessageHeaderCallback$MessageCallback.onResult(InternalStreamConnection.java:744)
	at com.mongodb.internal.connection.InternalStreamConnection$MessageHeaderCallback$MessageCallback.onResult(InternalStreamConnection.java:711)
	at com.mongodb.internal.connection.InternalStreamConnection$5.completed(InternalStreamConnection.java:581)
	at com.mongodb.internal.connection.InternalStreamConnection$5.completed(InternalStreamConnection.java:578)
	at com.mongodb.connection.netty.NettyStream.readAsync(NettyStream.java:322)
	at com.mongodb.connection.netty.NettyStream.readAsync(NettyStream.java:269)
	at com.mongodb.internal.connection.InternalStreamConnection.readAsync(InternalStreamConnection.java:578)
	at com.mongodb.internal.connection.InternalStreamConnection.access$1100(InternalStreamConnection.java:78)
	at com.mongodb.internal.connection.InternalStreamConnection$MessageHeaderCallback.onResult(InternalStreamConnection.java:701)
	at com.mongodb.internal.connection.InternalStreamConnection$MessageHeaderCallback.onResult(InternalStreamConnection.java:686)
	at com.mongodb.internal.connection.InternalStreamConnection$5.completed(InternalStreamConnection.java:581)
	at com.mongodb.internal.connection.InternalStreamConnection$5.completed(InternalStreamConnection.java:578)
	at com.mongodb.connection.netty.NettyStream.readAsync(NettyStream.java:322)
	at com.mongodb.connection.netty.NettyStream.handleReadResponse(NettyStream.java:350)
	at com.mongodb.connection.netty.NettyStream.access$1200(NettyStream.java:104)
	at com.mongodb.connection.netty.NettyStream$InboundBufferHandler.channelRead0(NettyStream.java:409)
	at com.mongodb.connection.netty.NettyStream$InboundBufferHandler.channelRead0(NettyStream.java:406)
	at io.netty.channel.SimpleChannelInboundHandler.channelRead(SimpleChannelInboundHandler.java:99)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:379)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:365)
	at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:357)
	at io.netty.channel.DefaultChannelPipeline$HeadContext.channelRead(DefaultChannelPipeline.java:1410)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:379)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:365)
	at io.netty.channel.DefaultChannelPipeline.fireChannelRead(DefaultChannelPipeline.java:919)
	at io.netty.channel.nio.AbstractNioByteChannel$NioByteUnsafe.read(AbstractNioByteChannel.java:166)
	at io.netty.channel.nio.NioEventLoop.processSelectedKey(NioEventLoop.java:719)
	at io.netty.channel.nio.NioEventLoop.processSelectedKeysOptimized(NioEventLoop.java:655)
	at io.netty.channel.nio.NioEventLoop.processSelectedKeys(NioEventLoop.java:581)
	at io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:493)
	at io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:989)
	at io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)
	at io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)
	at java.lang.Thread.run(Thread.java:748)
2021-07-19 18:57:16,178 DEBUG [nioEventLoopGroup-3-3] org.springframework.core.log.CompositeLog : [aa5f98bb-4, L:/0:0:0:0:0:0:0:1:8090 - R:/0:0:0:0:0:0:0:1:59558] Encoding [{timestamp=Mon Jul 19 18:57:16 COT 2021, path=/customer, status=500, error=Internal Server Error, re (truncated)...]
2021-07-19 18:57:16,180 DEBUG [reactor-http-nio-3] org.springframework.core.log.LogFormatUtils : [aa5f98bb-4, L:/0:0:0:0:0:0:0:1:8090 - R:/0:0:0:0:0:0:0:1:59558] Completed 500 INTERNAL_SERVER_ERROR
2021-07-19 18:57:20,687 DEBUG [DiscoveryClient-CacheRefreshExecutor-0] org.springframework.core.log.CompositeLog : HTTP GET http://localhost:8761/eureka/apps/delta
2021-07-19 18:57:20,688 DEBUG [DiscoveryClient-CacheRefreshExecutor-0] org.springframework.core.log.CompositeLog : Accept=[application/json, application/*+json]
2021-07-19 18:57:20,693 DEBUG [DiscoveryClient-CacheRefreshExecutor-0] org.springframework.core.log.CompositeLog : Response 200 OK
2021-07-19 18:57:20,693 DEBUG [DiscoveryClient-CacheRefreshExecutor-0] org.springframework.core.log.CompositeLog : Reading to [org.springframework.cloud.netflix.eureka.http.EurekaApplications]
2021-07-19 18:57:22,002 DEBUG [DiscoveryClient-HeartbeatExecutor-0] org.springframework.core.log.CompositeLog : HTTP PUT http://localhost:8761/eureka/apps/CUSTOMER_SERVICE/host.docker.internal:customer_service:8090?status=UP&lastDirtyTimestamp=1626738890496
2021-07-19 18:57:22,004 DEBUG [DiscoveryClient-HeartbeatExecutor-0] org.springframework.core.log.CompositeLog : Accept=[application/json, application/*+json]
2021-07-19 18:57:22,011 DEBUG [DiscoveryClient-HeartbeatExecutor-0] org.springframework.core.log.CompositeLog : Response 200 OK
2021-07-19 18:57:22,973 INFO [RMI TCP Connection(13)-127.0.0.1] com.netflix.discovery.DiscoveryClient$3 : Saw local status change event StatusChangeEvent [timestamp=1626739042973, current=DOWN, previous=UP]
2021-07-19 18:57:22,974 INFO [DiscoveryClient-InstanceInfoReplicator-0] com.netflix.discovery.DiscoveryClient : DiscoveryClient_CUSTOMER_SERVICE/host.docker.internal:customer_service:8090: registering service...
2021-07-19 18:57:22,974 DEBUG [DiscoveryClient-InstanceInfoReplicator-0] org.springframework.core.log.CompositeLog : HTTP POST http://localhost:8761/eureka/apps/CUSTOMER_SERVICE
2021-07-19 18:57:22,975 DEBUG [DiscoveryClient-InstanceInfoReplicator-0] org.springframework.core.log.CompositeLog : Accept=[application/json, application/*+json]
2021-07-19 18:57:22,976 DEBUG [DiscoveryClient-InstanceInfoReplicator-0] org.springframework.core.log.CompositeLog : Writing [InstanceInfo [instanceId = host.docker.internal:customer_service:8090, appName = CUSTOMER_SERVICE, hostName = host.docker.internal, status = DOWN, ipAddr = 192.168.1.12, port = 8090, securePort = 443, dataCenterInfo = com.netflix.appinfo.MyDataCenterInfo@61bf71d6] as "application/json"
2021-07-19 18:57:22,989 INFO [RMI TCP Connection(13)-127.0.0.1] com.mongodb.diagnostics.logging.SLF4JLogger : Closed connection [connectionId{localValue:3, serverValue:15}] to localhost:27017 because the pool has been closed.
2021-07-19 18:57:22,993 DEBUG [DiscoveryClient-InstanceInfoReplicator-0] org.springframework.core.log.CompositeLog : Response 204 NO_CONTENT
2021-07-19 18:57:22,993 INFO [DiscoveryClient-InstanceInfoReplicator-0] com.netflix.discovery.DiscoveryClient : DiscoveryClient_CUSTOMER_SERVICE/host.docker.internal:customer_service:8090 - registration status: 204
2021-07-19 18:57:27,042 INFO [RMI TCP Connection(13)-127.0.0.1] com.netflix.discovery.DiscoveryClient : Shutting down DiscoveryClient ...
2021-07-19 18:57:30,047 INFO [RMI TCP Connection(13)-127.0.0.1] com.netflix.discovery.DiscoveryClient : Unregistering ...
2021-07-19 18:57:30,050 DEBUG [RMI TCP Connection(13)-127.0.0.1] org.springframework.core.log.CompositeLog : HTTP DELETE http://localhost:8761/eureka/apps/CUSTOMER_SERVICE/host.docker.internal:customer_service:8090
2021-07-19 18:57:30,051 DEBUG [RMI TCP Connection(13)-127.0.0.1] org.springframework.core.log.CompositeLog : Accept=[application/json, application/*+json]
2021-07-19 18:57:30,197 DEBUG [RMI TCP Connection(13)-127.0.0.1] org.springframework.core.log.CompositeLog : Response 200 OK
2021-07-19 18:57:30,199 INFO [RMI TCP Connection(13)-127.0.0.1] com.netflix.discovery.DiscoveryClient : DiscoveryClient_CUSTOMER_SERVICE/host.docker.internal:customer_service:8090 - deregister  status: 200
2021-07-19 18:57:30,204 INFO [RMI TCP Connection(13)-127.0.0.1] com.netflix.discovery.DiscoveryClient : Completed shut down of DiscoveryClient
2021-07-19 18:57:40,756 INFO [background-preinit] org.hibernate.validator.internal.util.Version : HV000001: Hibernate Validator 6.2.0.Final
2021-07-19 18:57:42,486 DEBUG [main] org.springframework.core.log.CompositeLog : HTTP GET http://localhost:8888/customer_service/default/main
2021-07-19 18:57:42,564 DEBUG [main] org.springframework.core.log.CompositeLog : Accept=[application/json, application/*+json]
2021-07-19 18:57:45,406 DEBUG [main] org.springframework.core.log.CompositeLog : Response 200 OK
2021-07-19 18:57:45,408 DEBUG [main] org.springframework.core.log.CompositeLog : Reading to [org.springframework.cloud.config.environment.Environment]
2021-07-19 18:57:45,447 INFO [main] org.springframework.boot.SpringApplication : No active profile set, falling back to default profiles: default
2021-07-19 18:57:47,699 INFO [main] com.mongodb.diagnostics.logging.SLF4JLogger : Cluster created with settings {hosts=[localhost:27017], mode=SINGLE, requiredClusterType=UNKNOWN, serverSelectionTimeout='30000 ms'}
2021-07-19 18:57:48,937 DEBUG [main] org.springframework.web.reactive.result.method.AbstractHandlerMethodMapping : 6 mappings in 'requestMappingHandlerMapping'
2021-07-19 18:57:48,987 DEBUG [main] org.springframework.web.reactive.handler.SimpleUrlHandlerMapping : Patterns [/webjars/**, /**] in 'resourceHandlerMapping'
2021-07-19 18:57:49,393 INFO [cluster-rtt-ClusterId{value='60f6117b070c716854aa20c6', description='null'}-localhost:27017] com.mongodb.diagnostics.logging.SLF4JLogger : Opened connection [connectionId{localValue:2, serverValue:17}] to localhost:27017
2021-07-19 18:57:49,393 INFO [cluster-ClusterId{value='60f6117b070c716854aa20c6', description='null'}-localhost:27017] com.mongodb.diagnostics.logging.SLF4JLogger : Opened connection [connectionId{localValue:1, serverValue:16}] to localhost:27017
2021-07-19 18:57:49,397 INFO [cluster-ClusterId{value='60f6117b070c716854aa20c6', description='null'}-localhost:27017] com.mongodb.diagnostics.logging.SLF4JLogger : Monitor thread successfully connected to server with description ServerDescription{address=localhost:27017, type=STANDALONE, state=CONNECTED, ok=true, minWireVersion=0, maxWireVersion=9, maxDocumentSize=16777216, logicalSessionTimeoutMinutes=30, roundTripTimeNanos=52207300}
2021-07-19 18:57:51,872 DEBUG [main] org.springframework.web.reactive.result.method.annotation.ControllerMethodResolver : ControllerAdvice beans: none
2021-07-19 18:57:51,929 DEBUG [main] org.springframework.web.server.adapter.HttpWebHandlerAdapter : enableLoggingRequestDetails='false': form data and headers will be masked to prevent unsafe logging of potentially sensitive data
2021-07-19 18:57:53,819 INFO [main] com.netflix.discovery.DiscoveryClient : Initializing Eureka in region us-east-1
2021-07-19 18:57:53,825 INFO [main] com.netflix.discovery.shared.resolver.aws.ConfigClusterResolver : Resolving eureka endpoints via configuration
2021-07-19 18:57:53,852 INFO [main] com.netflix.discovery.DiscoveryClient : Disable delta property : false
2021-07-19 18:57:53,852 INFO [main] com.netflix.discovery.DiscoveryClient : Single vip registry refresh property : null
2021-07-19 18:57:53,853 INFO [main] com.netflix.discovery.DiscoveryClient : Force full registry fetch : false
2021-07-19 18:57:53,853 INFO [main] com.netflix.discovery.DiscoveryClient : Application is null : false
2021-07-19 18:57:53,853 INFO [main] com.netflix.discovery.DiscoveryClient : Registered Applications size is zero : true
2021-07-19 18:57:53,853 INFO [main] com.netflix.discovery.DiscoveryClient : Application version is -1: true
2021-07-19 18:57:53,853 INFO [main] com.netflix.discovery.DiscoveryClient : Getting all instance registry info from the eureka server
2021-07-19 18:57:54,884 DEBUG [main] org.springframework.core.log.CompositeLog : HTTP GET http://localhost:8761/eureka/apps/
2021-07-19 18:57:54,935 DEBUG [main] org.springframework.core.log.CompositeLog : Accept=[application/json, application/*+json]
2021-07-19 18:57:54,996 DEBUG [main] org.springframework.core.log.CompositeLog : Response 200 OK
2021-07-19 18:57:54,997 DEBUG [main] org.springframework.core.log.CompositeLog : Reading to [org.springframework.cloud.netflix.eureka.http.EurekaApplications]
2021-07-19 18:57:55,005 INFO [main] com.netflix.discovery.DiscoveryClient : The response status is 200
2021-07-19 18:57:55,008 INFO [main] com.netflix.discovery.DiscoveryClient : Starting heartbeat executor: renew interval is: 30
2021-07-19 18:57:55,011 INFO [main] com.netflix.discovery.InstanceInfoReplicator : InstanceInfoReplicator onDemand update allowed rate per min is 4
2021-07-19 18:57:55,016 INFO [main] com.netflix.discovery.DiscoveryClient : Discovery Client initialized at timestamp 1626739075015 with initial instances count: 2
2021-07-19 18:57:55,026 INFO [main] com.netflix.discovery.DiscoveryClient$3 : Saw local status change event StatusChangeEvent [timestamp=1626739075026, current=UP, previous=STARTING]
2021-07-19 18:57:55,029 INFO [DiscoveryClient-InstanceInfoReplicator-0] com.netflix.discovery.DiscoveryClient : DiscoveryClient_CUSTOMER_SERVICE/host.docker.internal:customer_service:8090: registering service...
2021-07-19 18:57:55,038 DEBUG [DiscoveryClient-InstanceInfoReplicator-0] org.springframework.core.log.CompositeLog : HTTP POST http://localhost:8761/eureka/apps/CUSTOMER_SERVICE
2021-07-19 18:57:55,040 DEBUG [DiscoveryClient-InstanceInfoReplicator-0] org.springframework.core.log.CompositeLog : Accept=[application/json, application/*+json]
2021-07-19 18:57:55,046 DEBUG [DiscoveryClient-InstanceInfoReplicator-0] org.springframework.core.log.CompositeLog : Writing [InstanceInfo [instanceId = host.docker.internal:customer_service:8090, appName = CUSTOMER_SERVICE, hostName = host.docker.internal, status = UP, ipAddr = 192.168.1.12, port = 8090, securePort = 443, dataCenterInfo = com.netflix.appinfo.MyDataCenterInfo@246cccf] as "application/json"
2021-07-19 18:57:55,097 DEBUG [DiscoveryClient-InstanceInfoReplicator-0] org.springframework.core.log.CompositeLog : Response 204 NO_CONTENT
2021-07-19 18:57:55,098 INFO [DiscoveryClient-InstanceInfoReplicator-0] com.netflix.discovery.DiscoveryClient : DiscoveryClient_CUSTOMER_SERVICE/host.docker.internal:customer_service:8090 - registration status: 204
2021-07-19 18:57:57,243 INFO [main] org.springframework.boot.StartupInfoLogger : Started Application in 18.175 seconds (JVM running for 19.779)
2021-07-19 18:58:25,010 DEBUG [DiscoveryClient-CacheRefreshExecutor-0] org.springframework.core.log.CompositeLog : HTTP GET http://localhost:8761/eureka/apps/delta
2021-07-19 18:58:25,011 DEBUG [DiscoveryClient-CacheRefreshExecutor-0] org.springframework.core.log.CompositeLog : Accept=[application/json, application/*+json]
2021-07-19 18:58:25,012 DEBUG [DiscoveryClient-HeartbeatExecutor-0] org.springframework.core.log.CompositeLog : HTTP PUT http://localhost:8761/eureka/apps/CUSTOMER_SERVICE/host.docker.internal:customer_service:8090?status=UP&lastDirtyTimestamp=1626739075026
2021-07-19 18:58:25,017 DEBUG [DiscoveryClient-CacheRefreshExecutor-0] org.springframework.core.log.CompositeLog : Response 200 OK
2021-07-19 18:58:25,017 DEBUG [DiscoveryClient-CacheRefreshExecutor-0] org.springframework.core.log.CompositeLog : Reading to [org.springframework.cloud.netflix.eureka.http.EurekaApplications]
2021-07-19 18:58:25,027 DEBUG [DiscoveryClient-HeartbeatExecutor-0] org.springframework.core.log.CompositeLog : Accept=[application/json, application/*+json]
2021-07-19 18:58:25,030 DEBUG [DiscoveryClient-HeartbeatExecutor-0] org.springframework.core.log.CompositeLog : Response 200 OK
2021-07-19 18:58:55,022 DEBUG [DiscoveryClient-CacheRefreshExecutor-0] org.springframework.core.log.CompositeLog : HTTP GET http://localhost:8761/eureka/apps/delta
2021-07-19 18:58:55,023 DEBUG [DiscoveryClient-CacheRefreshExecutor-0] org.springframework.core.log.CompositeLog : Accept=[application/json, application/*+json]
2021-07-19 18:58:55,027 DEBUG [DiscoveryClient-CacheRefreshExecutor-0] org.springframework.core.log.CompositeLog : Response 200 OK
2021-07-19 18:58:55,028 DEBUG [DiscoveryClient-CacheRefreshExecutor-0] org.springframework.core.log.CompositeLog : Reading to [org.springframework.cloud.netflix.eureka.http.EurekaApplications]
2021-07-19 18:58:55,032 DEBUG [DiscoveryClient-HeartbeatExecutor-0] org.springframework.core.log.CompositeLog : HTTP PUT http://localhost:8761/eureka/apps/CUSTOMER_SERVICE/host.docker.internal:customer_service:8090?status=UP&lastDirtyTimestamp=1626739075026
2021-07-19 18:58:55,033 DEBUG [DiscoveryClient-HeartbeatExecutor-0] org.springframework.core.log.CompositeLog : Accept=[application/json, application/*+json]
2021-07-19 18:58:55,037 DEBUG [DiscoveryClient-HeartbeatExecutor-0] org.springframework.core.log.CompositeLog : Response 200 OK
2021-07-19 18:59:03,562 DEBUG [reactor-http-nio-3] org.springframework.core.log.LogFormatUtils : [cbb15442-1, L:/0:0:0:0:0:0:0:1:8090 - R:/0:0:0:0:0:0:0:1:52362] HTTP GET "/customer"
2021-07-19 18:59:03,586 DEBUG [reactor-http-nio-3] org.springframework.web.reactive.handler.AbstractHandlerMapping : [cbb15442-1, L:/0:0:0:0:0:0:0:1:8090 - R:/0:0:0:0:0:0:0:1:52362] Mapped to com.bank.manage.customer.controller.CustomerController#getAllCustomers()
2021-07-19 18:59:03,601 INFO [reactor-http-nio-3] com.bank.manage.customer.controller.CustomerController :  EndPoit get by all customers {} 
2021-07-19 18:59:03,620 DEBUG [reactor-http-nio-3] org.springframework.web.reactive.result.HandlerResultHandlerSupport : [cbb15442-1, L:/0:0:0:0:0:0:0:1:8090 - R:/0:0:0:0:0:0:0:1:52362] Found 'Content-Type:application/json' in response
2021-07-19 18:59:03,622 DEBUG [reactor-http-nio-3] org.springframework.web.reactive.result.method.annotation.AbstractMessageWriterResultHandler : [cbb15442-1, L:/0:0:0:0:0:0:0:1:8090 - R:/0:0:0:0:0:0:0:1:52362] 0..N [com.bank.manage.customer.persistence.entity.Customer]
2021-07-19 18:59:03,688 INFO [nioEventLoopGroup-3-3] com.mongodb.diagnostics.logging.SLF4JLogger : Opened connection [connectionId{localValue:3, serverValue:18}] to localhost:27017
2021-07-19 18:59:03,813 DEBUG [nioEventLoopGroup-3-3] org.springframework.core.log.CompositeLog : [cbb15442-1, L:/0:0:0:0:0:0:0:1:8090 - R:/0:0:0:0:0:0:0:1:52362] Resolved [ConversionFailedException: Failed to convert from type [java.lang.Double] to type [java.lang.Integer] for value '9.89898968968E11'; nested exception is java.lang.IllegalArgumentException: Could not convert number [9.89898968968E11] of type [java.lang.Double] to target class [java.lang.Integer]: overflow] for HTTP GET /customer
2021-07-19 18:59:03,815 ERROR [nioEventLoopGroup-3-3] org.springframework.core.log.CompositeLog : [cbb15442-1, L:/0:0:0:0:0:0:0:1:8090 - R:/0:0:0:0:0:0:0:1:52362]  500 Server Error for HTTP GET "/customer"
org.springframework.core.convert.ConversionFailedException: Failed to convert from type [java.lang.Double] to type [java.lang.Integer] for value '9.89898968968E11'; nested exception is java.lang.IllegalArgumentException: Could not convert number [9.89898968968E11] of type [java.lang.Double] to target class [java.lang.Integer]: overflow
	at org.springframework.core.convert.support.ConversionUtils.invokeConverter(ConversionUtils.java:47)
	Suppressed: reactor.core.publisher.FluxOnAssembly$OnAssemblyException: 
Error has been observed at the following site(s):
	|_ checkpoint ⇢ Handler com.bank.manage.customer.controller.CustomerController#getAllCustomers() [DispatcherHandler]
	|_ checkpoint ⇢ org.springframework.boot.actuate.metrics.web.reactive.server.MetricsWebFilter [DefaultWebFilterChain]
	|_ checkpoint ⇢ HTTP GET "/customer" [ExceptionHandlingWebHandler]
Stack trace:
		at org.springframework.core.convert.support.ConversionUtils.invokeConverter(ConversionUtils.java:47)
		at org.springframework.core.convert.support.GenericConversionService.convert(GenericConversionService.java:192)
		at org.springframework.core.convert.support.GenericConversionService.convert(GenericConversionService.java:175)
		at org.springframework.data.mongodb.core.convert.MappingMongoConverter.doConvert(MappingMongoConverter.java:1547)
		at org.springframework.data.mongodb.core.convert.MappingMongoConverter.doConvert(MappingMongoConverter.java:1540)
		at org.springframework.data.mongodb.core.convert.MappingMongoConverter.getPotentiallyConvertedSimpleRead(MappingMongoConverter.java:1060)
		at org.springframework.data.mongodb.core.convert.MappingMongoConverter.getPotentiallyConvertedSimpleRead(MappingMongoConverter.java:1038)
		at org.springframework.data.mongodb.core.convert.MappingMongoConverter$ConversionContext.convert(MappingMongoConverter.java:1919)
		at org.springframework.data.mongodb.core.convert.MappingMongoConverter$MongoDbPropertyValueProvider.getPropertyValue(MappingMongoConverter.java:1641)
		at org.springframework.data.mongodb.core.convert.MappingMongoConverter.readProperties(MappingMongoConverter.java:481)
		at org.springframework.data.mongodb.core.convert.MappingMongoConverter.populateProperties(MappingMongoConverter.java:394)
		at org.springframework.data.mongodb.core.convert.MappingMongoConverter.read(MappingMongoConverter.java:372)
		at org.springframework.data.mongodb.core.convert.MappingMongoConverter.readDocument(MappingMongoConverter.java:342)
		at org.springframework.data.mongodb.core.convert.MappingMongoConverter.read(MappingMongoConverter.java:278)
		at org.springframework.data.mongodb.core.convert.MappingMongoConverter.read(MappingMongoConverter.java:274)
		at org.springframework.data.mongodb.core.convert.MappingMongoConverter.read(MappingMongoConverter.java:102)
		at org.springframework.data.mongodb.core.ReactiveMongoTemplate$ReadDocumentCallback.doWith(ReactiveMongoTemplate.java:3155)
		at reactor.core.publisher.FluxConcatMap$ConcatMapImmediate.drain(FluxConcatMap.java:374)
		at reactor.core.publisher.FluxConcatMap$ConcatMapImmediate.onNext(FluxConcatMap.java:250)
		at reactor.core.publisher.FluxCreate$BufferAsyncSink.drain(FluxCreate.java:793)
		at reactor.core.publisher.FluxCreate$BufferAsyncSink.next(FluxCreate.java:718)
		at reactor.core.publisher.FluxCreate$SerializedFluxSink.next(FluxCreate.java:154)
		at java.util.ArrayList.forEach(ArrayList.java:1259)
		at com.mongodb.reactivestreams.client.internal.BatchCursorFlux.lambda$recurseCursor$4(BatchCursorFlux.java:94)
		at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.onNext(MonoPeekTerminal.java:171)
		at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.onNext(MonoPeekTerminal.java:180)
		at reactor.core.publisher.FluxPeekFuseable$PeekConditionalSubscriber.onNext(FluxPeekFuseable.java:854)
		at reactor.core.publisher.MonoCreate$DefaultMonoSink.success(MonoCreate.java:160)
		at com.mongodb.reactivestreams.client.internal.MongoOperationPublisher.lambda$sinkToCallback$30(MongoOperationPublisher.java:550)
		at com.mongodb.internal.operation.AsyncQueryBatchCursor.next(AsyncQueryBatchCursor.java:207)
		at com.mongodb.internal.operation.AsyncQueryBatchCursor.next(AsyncQueryBatchCursor.java:146)
		at com.mongodb.reactivestreams.client.internal.BatchCursor.lambda$next$0(BatchCursor.java:35)
		at reactor.core.publisher.MonoCreate.subscribe(MonoCreate.java:57)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4150)
		at reactor.core.publisher.Mono.subscribeWith(Mono.java:4265)
		at reactor.core.publisher.Mono.subscribe(Mono.java:3982)
		at com.mongodb.reactivestreams.client.internal.BatchCursorFlux.recurseCursor(BatchCursorFlux.java:104)
		at com.mongodb.reactivestreams.client.internal.BatchCursorFlux.lambda$subscribe$0(BatchCursorFlux.java:56)
		at reactor.core.publisher.LambdaMonoSubscriber.onNext(LambdaMonoSubscriber.java:171)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onNext(FluxMapFuseable.java:127)
		at reactor.core.publisher.Operators$MonoSubscriber.complete(Operators.java:1815)
		at reactor.core.publisher.MonoFlatMap$FlatMapInner.onNext(MonoFlatMap.java:249)
		at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.onNext(MonoPeekTerminal.java:180)
		at reactor.core.publisher.MonoCreate$DefaultMonoSink.success(MonoCreate.java:160)
		at com.mongodb.reactivestreams.client.internal.MongoOperationPublisher.lambda$sinkToCallback$30(MongoOperationPublisher.java:550)
		at com.mongodb.reactivestreams.client.internal.OperationExecutorImpl.lambda$execute$2(OperationExecutorImpl.java:73)
		at com.mongodb.internal.async.ErrorHandlingResultCallback.onResult(ErrorHandlingResultCallback.java:48)
		at com.mongodb.internal.operation.FindOperation$3.onResult(FindOperation.java:755)
		at com.mongodb.internal.operation.OperationHelper$ReferenceCountedReleasingWrappedCallback.onResult(OperationHelper.java:532)
		at com.mongodb.internal.operation.CommandOperationHelper$10.onResult(CommandOperationHelper.java:483)
		at com.mongodb.internal.async.ErrorHandlingResultCallback.onResult(ErrorHandlingResultCallback.java:48)
		at com.mongodb.internal.connection.DefaultServer$DefaultServerProtocolExecutor$2.onResult(DefaultServer.java:286)
		at com.mongodb.internal.async.ErrorHandlingResultCallback.onResult(ErrorHandlingResultCallback.java:48)
		at com.mongodb.internal.connection.CommandProtocolImpl$1.onResult(CommandProtocolImpl.java:84)
		at com.mongodb.internal.connection.DefaultConnectionPool$PooledConnection$2.onResult(DefaultConnectionPool.java:530)
		at com.mongodb.internal.connection.UsageTrackingInternalConnection$2.onResult(UsageTrackingInternalConnection.java:142)
		at com.mongodb.internal.async.ErrorHandlingResultCallback.onResult(ErrorHandlingResultCallback.java:48)
		at com.mongodb.internal.connection.InternalStreamConnection$2$1.onResult(InternalStreamConnection.java:462)
		at com.mongodb.internal.connection.InternalStreamConnection$2$1.onResult(InternalStreamConnection.java:439)
		at com.mongodb.internal.connection.InternalStreamConnection$MessageHeaderCallback$MessageCallback.onResult(InternalStreamConnection.java:744)
		at com.mongodb.internal.connection.InternalStreamConnection$MessageHeaderCallback$MessageCallback.onResult(InternalStreamConnection.java:711)
		at com.mongodb.internal.connection.InternalStreamConnection$5.completed(InternalStreamConnection.java:581)
		at com.mongodb.internal.connection.InternalStreamConnection$5.completed(InternalStreamConnection.java:578)
		at com.mongodb.connection.netty.NettyStream.readAsync(NettyStream.java:322)
		at com.mongodb.connection.netty.NettyStream.handleReadResponse(NettyStream.java:350)
		at com.mongodb.connection.netty.NettyStream.access$1200(NettyStream.java:104)
		at com.mongodb.connection.netty.NettyStream$InboundBufferHandler.channelRead0(NettyStream.java:409)
		at com.mongodb.connection.netty.NettyStream$InboundBufferHandler.channelRead0(NettyStream.java:406)
		at io.netty.channel.SimpleChannelInboundHandler.channelRead(SimpleChannelInboundHandler.java:99)
		at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:379)
		at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:365)
		at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:357)
		at io.netty.channel.DefaultChannelPipeline$HeadContext.channelRead(DefaultChannelPipeline.java:1410)
		at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:379)
		at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:365)
		at io.netty.channel.DefaultChannelPipeline.fireChannelRead(DefaultChannelPipeline.java:919)
		at io.netty.channel.nio.AbstractNioByteChannel$NioByteUnsafe.read(AbstractNioByteChannel.java:166)
		at io.netty.channel.nio.NioEventLoop.processSelectedKey(NioEventLoop.java:719)
		at io.netty.channel.nio.NioEventLoop.processSelectedKeysOptimized(NioEventLoop.java:655)
		at io.netty.channel.nio.NioEventLoop.processSelectedKeys(NioEventLoop.java:581)
		at io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:493)
		at io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:989)
		at io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)
		at io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)
		at java.lang.Thread.run(Thread.java:748)
Caused by: java.lang.IllegalArgumentException: Could not convert number [9.89898968968E11] of type [java.lang.Double] to target class [java.lang.Integer]: overflow
	at org.springframework.util.NumberUtils.raiseOverflowException(NumberUtils.java:175)
	at org.springframework.util.NumberUtils.convertNumberToTargetClass(NumberUtils.java:108)
	at org.springframework.core.convert.support.NumberToNumberConverterFactory$NumberToNumber.convert(NumberToNumberConverterFactory.java:66)
	at org.springframework.core.convert.support.NumberToNumberConverterFactory$NumberToNumber.convert(NumberToNumberConverterFactory.java:56)
	at org.springframework.core.convert.support.GenericConversionService$ConverterFactoryAdapter.convert(GenericConversionService.java:437)
	at org.springframework.core.convert.support.ConversionUtils.invokeConverter(ConversionUtils.java:41)
	at org.springframework.core.convert.support.GenericConversionService.convert(GenericConversionService.java:192)
	at org.springframework.core.convert.support.GenericConversionService.convert(GenericConversionService.java:175)
	at org.springframework.data.mongodb.core.convert.MappingMongoConverter.doConvert(MappingMongoConverter.java:1547)
	at org.springframework.data.mongodb.core.convert.MappingMongoConverter.doConvert(MappingMongoConverter.java:1540)
	at org.springframework.data.mongodb.core.convert.MappingMongoConverter.getPotentiallyConvertedSimpleRead(MappingMongoConverter.java:1060)
	at org.springframework.data.mongodb.core.convert.MappingMongoConverter.getPotentiallyConvertedSimpleRead(MappingMongoConverter.java:1038)
	at org.springframework.data.mongodb.core.convert.MappingMongoConverter$ConversionContext.convert(MappingMongoConverter.java:1919)
	at org.springframework.data.mongodb.core.convert.MappingMongoConverter$MongoDbPropertyValueProvider.getPropertyValue(MappingMongoConverter.java:1641)
	at org.springframework.data.mongodb.core.convert.MappingMongoConverter.readProperties(MappingMongoConverter.java:481)
	at org.springframework.data.mongodb.core.convert.MappingMongoConverter.populateProperties(MappingMongoConverter.java:394)
	at org.springframework.data.mongodb.core.convert.MappingMongoConverter.read(MappingMongoConverter.java:372)
	at org.springframework.data.mongodb.core.convert.MappingMongoConverter.readDocument(MappingMongoConverter.java:342)
	at org.springframework.data.mongodb.core.convert.MappingMongoConverter.read(MappingMongoConverter.java:278)
	at org.springframework.data.mongodb.core.convert.MappingMongoConverter.read(MappingMongoConverter.java:274)
	at org.springframework.data.mongodb.core.convert.MappingMongoConverter.read(MappingMongoConverter.java:102)
	at org.springframework.data.mongodb.core.ReactiveMongoTemplate$ReadDocumentCallback.doWith(ReactiveMongoTemplate.java:3155)
	at reactor.core.publisher.FluxConcatMap$ConcatMapImmediate.drain(FluxConcatMap.java:374)
	at reactor.core.publisher.FluxConcatMap$ConcatMapImmediate.onNext(FluxConcatMap.java:250)
	at reactor.core.publisher.FluxCreate$BufferAsyncSink.drain(FluxCreate.java:793)
	at reactor.core.publisher.FluxCreate$BufferAsyncSink.next(FluxCreate.java:718)
	at reactor.core.publisher.FluxCreate$SerializedFluxSink.next(FluxCreate.java:154)
	at java.util.ArrayList.forEach(ArrayList.java:1259)
	at com.mongodb.reactivestreams.client.internal.BatchCursorFlux.lambda$recurseCursor$4(BatchCursorFlux.java:94)
	at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.onNext(MonoPeekTerminal.java:171)
	at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.onNext(MonoPeekTerminal.java:180)
	at reactor.core.publisher.FluxPeekFuseable$PeekConditionalSubscriber.onNext(FluxPeekFuseable.java:854)
	at reactor.core.publisher.MonoCreate$DefaultMonoSink.success(MonoCreate.java:160)
	at com.mongodb.reactivestreams.client.internal.MongoOperationPublisher.lambda$sinkToCallback$30(MongoOperationPublisher.java:550)
	at com.mongodb.internal.operation.AsyncQueryBatchCursor.next(AsyncQueryBatchCursor.java:207)
	at com.mongodb.internal.operation.AsyncQueryBatchCursor.next(AsyncQueryBatchCursor.java:146)
	at com.mongodb.reactivestreams.client.internal.BatchCursor.lambda$next$0(BatchCursor.java:35)
	at reactor.core.publisher.MonoCreate.subscribe(MonoCreate.java:57)
	at reactor.core.publisher.Mono.subscribe(Mono.java:4150)
	at reactor.core.publisher.Mono.subscribeWith(Mono.java:4265)
	at reactor.core.publisher.Mono.subscribe(Mono.java:3982)
	at com.mongodb.reactivestreams.client.internal.BatchCursorFlux.recurseCursor(BatchCursorFlux.java:104)
	at com.mongodb.reactivestreams.client.internal.BatchCursorFlux.lambda$subscribe$0(BatchCursorFlux.java:56)
	at reactor.core.publisher.LambdaMonoSubscriber.onNext(LambdaMonoSubscriber.java:171)
	at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onNext(FluxMapFuseable.java:127)
	at reactor.core.publisher.Operators$MonoSubscriber.complete(Operators.java:1815)
	at reactor.core.publisher.MonoFlatMap$FlatMapInner.onNext(MonoFlatMap.java:249)
	at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.onNext(MonoPeekTerminal.java:180)
	at reactor.core.publisher.MonoCreate$DefaultMonoSink.success(MonoCreate.java:160)
	at com.mongodb.reactivestreams.client.internal.MongoOperationPublisher.lambda$sinkToCallback$30(MongoOperationPublisher.java:550)
	at com.mongodb.reactivestreams.client.internal.OperationExecutorImpl.lambda$execute$2(OperationExecutorImpl.java:73)
	at com.mongodb.internal.async.ErrorHandlingResultCallback.onResult(ErrorHandlingResultCallback.java:48)
	at com.mongodb.internal.operation.FindOperation$3.onResult(FindOperation.java:755)
	at com.mongodb.internal.operation.OperationHelper$ReferenceCountedReleasingWrappedCallback.onResult(OperationHelper.java:532)
	at com.mongodb.internal.operation.CommandOperationHelper$10.onResult(CommandOperationHelper.java:483)
	at com.mongodb.internal.async.ErrorHandlingResultCallback.onResult(ErrorHandlingResultCallback.java:48)
	at com.mongodb.internal.connection.DefaultServer$DefaultServerProtocolExecutor$2.onResult(DefaultServer.java:286)
	at com.mongodb.internal.async.ErrorHandlingResultCallback.onResult(ErrorHandlingResultCallback.java:48)
	at com.mongodb.internal.connection.CommandProtocolImpl$1.onResult(CommandProtocolImpl.java:84)
	at com.mongodb.internal.connection.DefaultConnectionPool$PooledConnection$2.onResult(DefaultConnectionPool.java:530)
	at com.mongodb.internal.connection.UsageTrackingInternalConnection$2.onResult(UsageTrackingInternalConnection.java:142)
	at com.mongodb.internal.async.ErrorHandlingResultCallback.onResult(ErrorHandlingResultCallback.java:48)
	at com.mongodb.internal.connection.InternalStreamConnection$2$1.onResult(InternalStreamConnection.java:462)
	at com.mongodb.internal.connection.InternalStreamConnection$2$1.onResult(InternalStreamConnection.java:439)
	at com.mongodb.internal.connection.InternalStreamConnection$MessageHeaderCallback$MessageCallback.onResult(InternalStreamConnection.java:744)
	at com.mongodb.internal.connection.InternalStreamConnection$MessageHeaderCallback$MessageCallback.onResult(InternalStreamConnection.java:711)
	at com.mongodb.internal.connection.InternalStreamConnection$5.completed(InternalStreamConnection.java:581)
	at com.mongodb.internal.connection.InternalStreamConnection$5.completed(InternalStreamConnection.java:578)
	at com.mongodb.connection.netty.NettyStream.readAsync(NettyStream.java:322)
	at com.mongodb.connection.netty.NettyStream.handleReadResponse(NettyStream.java:350)
	at com.mongodb.connection.netty.NettyStream.access$1200(NettyStream.java:104)
	at com.mongodb.connection.netty.NettyStream$InboundBufferHandler.channelRead0(NettyStream.java:409)
	at com.mongodb.connection.netty.NettyStream$InboundBufferHandler.channelRead0(NettyStream.java:406)
	at io.netty.channel.SimpleChannelInboundHandler.channelRead(SimpleChannelInboundHandler.java:99)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:379)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:365)
	at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:357)
	at io.netty.channel.DefaultChannelPipeline$HeadContext.channelRead(DefaultChannelPipeline.java:1410)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:379)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:365)
	at io.netty.channel.DefaultChannelPipeline.fireChannelRead(DefaultChannelPipeline.java:919)
	at io.netty.channel.nio.AbstractNioByteChannel$NioByteUnsafe.read(AbstractNioByteChannel.java:166)
	at io.netty.channel.nio.NioEventLoop.processSelectedKey(NioEventLoop.java:719)
	at io.netty.channel.nio.NioEventLoop.processSelectedKeysOptimized(NioEventLoop.java:655)
	at io.netty.channel.nio.NioEventLoop.processSelectedKeys(NioEventLoop.java:581)
	at io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:493)
	at io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:989)
	at io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)
	at io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)
	at java.lang.Thread.run(Thread.java:748)
2021-07-19 18:59:03,828 DEBUG [nioEventLoopGroup-3-3] org.springframework.core.log.CompositeLog : [cbb15442-1, L:/0:0:0:0:0:0:0:1:8090 - R:/0:0:0:0:0:0:0:1:52362] Encoding [{timestamp=Mon Jul 19 18:59:03 COT 2021, path=/customer, status=500, error=Internal Server Error, re (truncated)...]
2021-07-19 18:59:03,845 DEBUG [reactor-http-nio-3] org.springframework.core.log.LogFormatUtils : [cbb15442-1, L:/0:0:0:0:0:0:0:1:8090 - R:/0:0:0:0:0:0:0:1:52362] Completed 500 INTERNAL_SERVER_ERROR
2021-07-19 18:59:25,029 DEBUG [DiscoveryClient-CacheRefreshExecutor-0] org.springframework.core.log.CompositeLog : HTTP GET http://localhost:8761/eureka/apps/delta
2021-07-19 18:59:25,030 DEBUG [DiscoveryClient-CacheRefreshExecutor-0] org.springframework.core.log.CompositeLog : Accept=[application/json, application/*+json]
2021-07-19 18:59:25,034 DEBUG [DiscoveryClient-CacheRefreshExecutor-0] org.springframework.core.log.CompositeLog : Response 200 OK
2021-07-19 18:59:25,035 DEBUG [DiscoveryClient-CacheRefreshExecutor-0] org.springframework.core.log.CompositeLog : Reading to [org.springframework.cloud.netflix.eureka.http.EurekaApplications]
2021-07-19 18:59:25,039 DEBUG [DiscoveryClient-HeartbeatExecutor-0] org.springframework.core.log.CompositeLog : HTTP PUT http://localhost:8761/eureka/apps/CUSTOMER_SERVICE/host.docker.internal:customer_service:8090?status=UP&lastDirtyTimestamp=1626739075026
2021-07-19 18:59:25,039 DEBUG [DiscoveryClient-HeartbeatExecutor-0] org.springframework.core.log.CompositeLog : Accept=[application/json, application/*+json]
2021-07-19 18:59:25,042 DEBUG [DiscoveryClient-HeartbeatExecutor-0] org.springframework.core.log.CompositeLog : Response 200 OK
2021-07-19 18:59:55,038 DEBUG [DiscoveryClient-CacheRefreshExecutor-0] org.springframework.core.log.CompositeLog : HTTP GET http://localhost:8761/eureka/apps/delta
2021-07-19 18:59:55,040 DEBUG [DiscoveryClient-CacheRefreshExecutor-0] org.springframework.core.log.CompositeLog : Accept=[application/json, application/*+json]
2021-07-19 18:59:55,045 DEBUG [DiscoveryClient-HeartbeatExecutor-0] org.springframework.core.log.CompositeLog : HTTP PUT http://localhost:8761/eureka/apps/CUSTOMER_SERVICE/host.docker.internal:customer_service:8090?status=UP&lastDirtyTimestamp=1626739075026
2021-07-19 18:59:55,046 DEBUG [DiscoveryClient-HeartbeatExecutor-0] org.springframework.core.log.CompositeLog : Accept=[application/json, application/*+json]
2021-07-19 18:59:55,053 DEBUG [DiscoveryClient-HeartbeatExecutor-0] org.springframework.core.log.CompositeLog : Response 200 OK
2021-07-19 18:59:55,137 DEBUG [DiscoveryClient-CacheRefreshExecutor-0] org.springframework.core.log.CompositeLog : Response 200 OK
2021-07-19 18:59:55,138 DEBUG [DiscoveryClient-CacheRefreshExecutor-0] org.springframework.core.log.CompositeLog : Reading to [org.springframework.cloud.netflix.eureka.http.EurekaApplications]
2021-07-19 19:00:25,057 DEBUG [DiscoveryClient-HeartbeatExecutor-0] org.springframework.core.log.CompositeLog : HTTP PUT http://localhost:8761/eureka/apps/CUSTOMER_SERVICE/host.docker.internal:customer_service:8090?status=UP&lastDirtyTimestamp=1626739075026
2021-07-19 19:00:25,058 DEBUG [DiscoveryClient-HeartbeatExecutor-0] org.springframework.core.log.CompositeLog : Accept=[application/json, application/*+json]
2021-07-19 19:00:25,065 DEBUG [DiscoveryClient-HeartbeatExecutor-0] org.springframework.core.log.CompositeLog : Response 200 OK
2021-07-19 19:00:25,141 DEBUG [DiscoveryClient-CacheRefreshExecutor-0] org.springframework.core.log.CompositeLog : HTTP GET http://localhost:8761/eureka/apps/delta
2021-07-19 19:00:25,142 DEBUG [DiscoveryClient-CacheRefreshExecutor-0] org.springframework.core.log.CompositeLog : Accept=[application/json, application/*+json]
2021-07-19 19:00:25,146 DEBUG [DiscoveryClient-CacheRefreshExecutor-0] org.springframework.core.log.CompositeLog : Response 200 OK
2021-07-19 19:00:25,146 DEBUG [DiscoveryClient-CacheRefreshExecutor-0] org.springframework.core.log.CompositeLog : Reading to [org.springframework.cloud.netflix.eureka.http.EurekaApplications]
2021-07-19 19:00:31,290 DEBUG [reactor-http-nio-3] org.springframework.core.log.LogFormatUtils : [cbb15442-2, L:/0:0:0:0:0:0:0:1:8090 - R:/0:0:0:0:0:0:0:1:52362] HTTP GET "/"
2021-07-19 19:00:31,292 DEBUG [reactor-http-nio-3] org.springframework.web.reactive.handler.AbstractHandlerMapping : [cbb15442-2, L:/0:0:0:0:0:0:0:1:8090 - R:/0:0:0:0:0:0:0:1:52362] Mapped to ResourceWebHandler ["classpath:/META-INF/resources/", "classpath:/resources/", "classpath:/static/", "classpath:/public/"]
2021-07-19 19:00:31,294 DEBUG [reactor-http-nio-3] org.springframework.web.reactive.resource.ResourceWebHandler : [cbb15442-2, L:/0:0:0:0:0:0:0:1:8090 - R:/0:0:0:0:0:0:0:1:52362] Resource not found
2021-07-19 19:00:31,295 DEBUG [reactor-http-nio-3] org.springframework.core.log.CompositeLog : [cbb15442-2, L:/0:0:0:0:0:0:0:1:8090 - R:/0:0:0:0:0:0:0:1:52362] Resolved [ResponseStatusException: 404 NOT_FOUND] for HTTP GET /
2021-07-19 19:00:31,296 DEBUG [reactor-http-nio-3] org.springframework.core.log.CompositeLog : [cbb15442-2, L:/0:0:0:0:0:0:0:1:8090 - R:/0:0:0:0:0:0:0:1:52362] Encoding [{timestamp=Mon Jul 19 19:00:31 COT 2021, path=/, status=404, error=Not Found, message=null, requestI (truncated)...]
2021-07-19 19:00:31,297 DEBUG [reactor-http-nio-3] org.springframework.core.log.LogFormatUtils : [cbb15442-2, L:/0:0:0:0:0:0:0:1:8090 - R:/0:0:0:0:0:0:0:1:52362] Completed 404 NOT_FOUND
2021-07-19 19:00:40,437 DEBUG [reactor-http-nio-3] org.springframework.core.log.LogFormatUtils : [cbb15442-3, L:/0:0:0:0:0:0:0:1:8090 - R:/0:0:0:0:0:0:0:1:52362] HTTP GET "/customer"
2021-07-19 19:00:40,439 DEBUG [reactor-http-nio-3] org.springframework.web.reactive.handler.AbstractHandlerMapping : [cbb15442-3, L:/0:0:0:0:0:0:0:1:8090 - R:/0:0:0:0:0:0:0:1:52362] Mapped to com.bank.manage.customer.controller.CustomerController#getAllCustomers()
2021-07-19 19:00:40,440 INFO [reactor-http-nio-3] com.bank.manage.customer.controller.CustomerController :  EndPoit get by all customers {} 
2021-07-19 19:00:40,441 DEBUG [reactor-http-nio-3] org.springframework.web.reactive.result.HandlerResultHandlerSupport : [cbb15442-3, L:/0:0:0:0:0:0:0:1:8090 - R:/0:0:0:0:0:0:0:1:52362] Found 'Content-Type:application/json' in response
2021-07-19 19:00:40,441 DEBUG [reactor-http-nio-3] org.springframework.web.reactive.result.method.annotation.AbstractMessageWriterResultHandler : [cbb15442-3, L:/0:0:0:0:0:0:0:1:8090 - R:/0:0:0:0:0:0:0:1:52362] 0..N [com.bank.manage.customer.persistence.entity.Customer]
2021-07-19 19:00:40,446 DEBUG [nioEventLoopGroup-3-3] org.springframework.core.log.CompositeLog : [cbb15442-3, L:/0:0:0:0:0:0:0:1:8090 - R:/0:0:0:0:0:0:0:1:52362] Resolved [ConversionFailedException: Failed to convert from type [java.lang.Double] to type [java.lang.Integer] for value '9.89898968968E11'; nested exception is java.lang.IllegalArgumentException: Could not convert number [9.89898968968E11] of type [java.lang.Double] to target class [java.lang.Integer]: overflow] for HTTP GET /customer
2021-07-19 19:00:40,447 ERROR [nioEventLoopGroup-3-3] org.springframework.core.log.CompositeLog : [cbb15442-3, L:/0:0:0:0:0:0:0:1:8090 - R:/0:0:0:0:0:0:0:1:52362]  500 Server Error for HTTP GET "/customer"
org.springframework.core.convert.ConversionFailedException: Failed to convert from type [java.lang.Double] to type [java.lang.Integer] for value '9.89898968968E11'; nested exception is java.lang.IllegalArgumentException: Could not convert number [9.89898968968E11] of type [java.lang.Double] to target class [java.lang.Integer]: overflow
	at org.springframework.core.convert.support.ConversionUtils.invokeConverter(ConversionUtils.java:47)
	Suppressed: reactor.core.publisher.FluxOnAssembly$OnAssemblyException: 
Error has been observed at the following site(s):
	|_ checkpoint ⇢ Handler com.bank.manage.customer.controller.CustomerController#getAllCustomers() [DispatcherHandler]
	|_ checkpoint ⇢ org.springframework.boot.actuate.metrics.web.reactive.server.MetricsWebFilter [DefaultWebFilterChain]
	|_ checkpoint ⇢ HTTP GET "/customer" [ExceptionHandlingWebHandler]
Stack trace:
		at org.springframework.core.convert.support.ConversionUtils.invokeConverter(ConversionUtils.java:47)
		at org.springframework.core.convert.support.GenericConversionService.convert(GenericConversionService.java:192)
		at org.springframework.core.convert.support.GenericConversionService.convert(GenericConversionService.java:175)
		at org.springframework.data.mongodb.core.convert.MappingMongoConverter.doConvert(MappingMongoConverter.java:1547)
		at org.springframework.data.mongodb.core.convert.MappingMongoConverter.doConvert(MappingMongoConverter.java:1540)
		at org.springframework.data.mongodb.core.convert.MappingMongoConverter.getPotentiallyConvertedSimpleRead(MappingMongoConverter.java:1060)
		at org.springframework.data.mongodb.core.convert.MappingMongoConverter.getPotentiallyConvertedSimpleRead(MappingMongoConverter.java:1038)
		at org.springframework.data.mongodb.core.convert.MappingMongoConverter$ConversionContext.convert(MappingMongoConverter.java:1919)
		at org.springframework.data.mongodb.core.convert.MappingMongoConverter$MongoDbPropertyValueProvider.getPropertyValue(MappingMongoConverter.java:1641)
		at org.springframework.data.mongodb.core.convert.MappingMongoConverter.readProperties(MappingMongoConverter.java:481)
		at org.springframework.data.mongodb.core.convert.MappingMongoConverter.populateProperties(MappingMongoConverter.java:394)
		at org.springframework.data.mongodb.core.convert.MappingMongoConverter.read(MappingMongoConverter.java:372)
		at org.springframework.data.mongodb.core.convert.MappingMongoConverter.readDocument(MappingMongoConverter.java:342)
		at org.springframework.data.mongodb.core.convert.MappingMongoConverter.read(MappingMongoConverter.java:278)
		at org.springframework.data.mongodb.core.convert.MappingMongoConverter.read(MappingMongoConverter.java:274)
		at org.springframework.data.mongodb.core.convert.MappingMongoConverter.read(MappingMongoConverter.java:102)
		at org.springframework.data.mongodb.core.ReactiveMongoTemplate$ReadDocumentCallback.doWith(ReactiveMongoTemplate.java:3155)
		at reactor.core.publisher.FluxConcatMap$ConcatMapImmediate.drain(FluxConcatMap.java:374)
		at reactor.core.publisher.FluxConcatMap$ConcatMapImmediate.onNext(FluxConcatMap.java:250)
		at reactor.core.publisher.FluxCreate$BufferAsyncSink.drain(FluxCreate.java:793)
		at reactor.core.publisher.FluxCreate$BufferAsyncSink.next(FluxCreate.java:718)
		at reactor.core.publisher.FluxCreate$SerializedFluxSink.next(FluxCreate.java:154)
		at java.util.ArrayList.forEach(ArrayList.java:1259)
		at com.mongodb.reactivestreams.client.internal.BatchCursorFlux.lambda$recurseCursor$4(BatchCursorFlux.java:94)
		at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.onNext(MonoPeekTerminal.java:171)
		at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.onNext(MonoPeekTerminal.java:180)
		at reactor.core.publisher.FluxPeekFuseable$PeekConditionalSubscriber.onNext(FluxPeekFuseable.java:854)
		at reactor.core.publisher.MonoCreate$DefaultMonoSink.success(MonoCreate.java:160)
		at com.mongodb.reactivestreams.client.internal.MongoOperationPublisher.lambda$sinkToCallback$30(MongoOperationPublisher.java:550)
		at com.mongodb.internal.operation.AsyncQueryBatchCursor.next(AsyncQueryBatchCursor.java:207)
		at com.mongodb.internal.operation.AsyncQueryBatchCursor.next(AsyncQueryBatchCursor.java:146)
		at com.mongodb.reactivestreams.client.internal.BatchCursor.lambda$next$0(BatchCursor.java:35)
		at reactor.core.publisher.MonoCreate.subscribe(MonoCreate.java:57)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4150)
		at reactor.core.publisher.Mono.subscribeWith(Mono.java:4265)
		at reactor.core.publisher.Mono.subscribe(Mono.java:3982)
		at com.mongodb.reactivestreams.client.internal.BatchCursorFlux.recurseCursor(BatchCursorFlux.java:104)
		at com.mongodb.reactivestreams.client.internal.BatchCursorFlux.lambda$subscribe$0(BatchCursorFlux.java:56)
		at reactor.core.publisher.LambdaMonoSubscriber.onNext(LambdaMonoSubscriber.java:171)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onNext(FluxMapFuseable.java:127)
		at reactor.core.publisher.Operators$MonoSubscriber.complete(Operators.java:1815)
		at reactor.core.publisher.MonoFlatMap$FlatMapInner.onNext(MonoFlatMap.java:249)
		at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.onNext(MonoPeekTerminal.java:180)
		at reactor.core.publisher.MonoCreate$DefaultMonoSink.success(MonoCreate.java:160)
		at com.mongodb.reactivestreams.client.internal.MongoOperationPublisher.lambda$sinkToCallback$30(MongoOperationPublisher.java:550)
		at com.mongodb.reactivestreams.client.internal.OperationExecutorImpl.lambda$execute$2(OperationExecutorImpl.java:73)
		at com.mongodb.internal.async.ErrorHandlingResultCallback.onResult(ErrorHandlingResultCallback.java:48)
		at com.mongodb.internal.operation.FindOperation$3.onResult(FindOperation.java:755)
		at com.mongodb.internal.operation.OperationHelper$ReferenceCountedReleasingWrappedCallback.onResult(OperationHelper.java:532)
		at com.mongodb.internal.operation.CommandOperationHelper$10.onResult(CommandOperationHelper.java:483)
		at com.mongodb.internal.async.ErrorHandlingResultCallback.onResult(ErrorHandlingResultCallback.java:48)
		at com.mongodb.internal.connection.DefaultServer$DefaultServerProtocolExecutor$2.onResult(DefaultServer.java:286)
		at com.mongodb.internal.async.ErrorHandlingResultCallback.onResult(ErrorHandlingResultCallback.java:48)
		at com.mongodb.internal.connection.CommandProtocolImpl$1.onResult(CommandProtocolImpl.java:84)
		at com.mongodb.internal.connection.DefaultConnectionPool$PooledConnection$2.onResult(DefaultConnectionPool.java:530)
		at com.mongodb.internal.connection.UsageTrackingInternalConnection$2.onResult(UsageTrackingInternalConnection.java:142)
		at com.mongodb.internal.async.ErrorHandlingResultCallback.onResult(ErrorHandlingResultCallback.java:48)
		at com.mongodb.internal.connection.InternalStreamConnection$2$1.onResult(InternalStreamConnection.java:462)
		at com.mongodb.internal.connection.InternalStreamConnection$2$1.onResult(InternalStreamConnection.java:439)
		at com.mongodb.internal.connection.InternalStreamConnection$MessageHeaderCallback$MessageCallback.onResult(InternalStreamConnection.java:744)
		at com.mongodb.internal.connection.InternalStreamConnection$MessageHeaderCallback$MessageCallback.onResult(InternalStreamConnection.java:711)
		at com.mongodb.internal.connection.InternalStreamConnection$5.completed(InternalStreamConnection.java:581)
		at com.mongodb.internal.connection.InternalStreamConnection$5.completed(InternalStreamConnection.java:578)
		at com.mongodb.connection.netty.NettyStream.readAsync(NettyStream.java:322)
		at com.mongodb.connection.netty.NettyStream.readAsync(NettyStream.java:269)
		at com.mongodb.internal.connection.InternalStreamConnection.readAsync(InternalStreamConnection.java:578)
		at com.mongodb.internal.connection.InternalStreamConnection.access$1100(InternalStreamConnection.java:78)
		at com.mongodb.internal.connection.InternalStreamConnection$MessageHeaderCallback.onResult(InternalStreamConnection.java:701)
		at com.mongodb.internal.connection.InternalStreamConnection$MessageHeaderCallback.onResult(InternalStreamConnection.java:686)
		at com.mongodb.internal.connection.InternalStreamConnection$5.completed(InternalStreamConnection.java:581)
		at com.mongodb.internal.connection.InternalStreamConnection$5.completed(InternalStreamConnection.java:578)
		at com.mongodb.connection.netty.NettyStream.readAsync(NettyStream.java:322)
		at com.mongodb.connection.netty.NettyStream.handleReadResponse(NettyStream.java:350)
		at com.mongodb.connection.netty.NettyStream.access$1200(NettyStream.java:104)
		at com.mongodb.connection.netty.NettyStream$InboundBufferHandler.channelRead0(NettyStream.java:409)
		at com.mongodb.connection.netty.NettyStream$InboundBufferHandler.channelRead0(NettyStream.java:406)
		at io.netty.channel.SimpleChannelInboundHandler.channelRead(SimpleChannelInboundHandler.java:99)
		at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:379)
		at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:365)
		at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:357)
		at io.netty.channel.DefaultChannelPipeline$HeadContext.channelRead(DefaultChannelPipeline.java:1410)
		at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:379)
		at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:365)
		at io.netty.channel.DefaultChannelPipeline.fireChannelRead(DefaultChannelPipeline.java:919)
		at io.netty.channel.nio.AbstractNioByteChannel$NioByteUnsafe.read(AbstractNioByteChannel.java:166)
		at io.netty.channel.nio.NioEventLoop.processSelectedKey(NioEventLoop.java:719)
		at io.netty.channel.nio.NioEventLoop.processSelectedKeysOptimized(NioEventLoop.java:655)
		at io.netty.channel.nio.NioEventLoop.processSelectedKeys(NioEventLoop.java:581)
		at io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:493)
		at io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:989)
		at io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)
		at io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)
		at java.lang.Thread.run(Thread.java:748)
Caused by: java.lang.IllegalArgumentException: Could not convert number [9.89898968968E11] of type [java.lang.Double] to target class [java.lang.Integer]: overflow
	at org.springframework.util.NumberUtils.raiseOverflowException(NumberUtils.java:175)
	at org.springframework.util.NumberUtils.convertNumberToTargetClass(NumberUtils.java:108)
	at org.springframework.core.convert.support.NumberToNumberConverterFactory$NumberToNumber.convert(NumberToNumberConverterFactory.java:66)
	at org.springframework.core.convert.support.NumberToNumberConverterFactory$NumberToNumber.convert(NumberToNumberConverterFactory.java:56)
	at org.springframework.core.convert.support.GenericConversionService$ConverterFactoryAdapter.convert(GenericConversionService.java:437)
	at org.springframework.core.convert.support.ConversionUtils.invokeConverter(ConversionUtils.java:41)
	at org.springframework.core.convert.support.GenericConversionService.convert(GenericConversionService.java:192)
	at org.springframework.core.convert.support.GenericConversionService.convert(GenericConversionService.java:175)
	at org.springframework.data.mongodb.core.convert.MappingMongoConverter.doConvert(MappingMongoConverter.java:1547)
	at org.springframework.data.mongodb.core.convert.MappingMongoConverter.doConvert(MappingMongoConverter.java:1540)
	at org.springframework.data.mongodb.core.convert.MappingMongoConverter.getPotentiallyConvertedSimpleRead(MappingMongoConverter.java:1060)
	at org.springframework.data.mongodb.core.convert.MappingMongoConverter.getPotentiallyConvertedSimpleRead(MappingMongoConverter.java:1038)
	at org.springframework.data.mongodb.core.convert.MappingMongoConverter$ConversionContext.convert(MappingMongoConverter.java:1919)
	at org.springframework.data.mongodb.core.convert.MappingMongoConverter$MongoDbPropertyValueProvider.getPropertyValue(MappingMongoConverter.java:1641)
	at org.springframework.data.mongodb.core.convert.MappingMongoConverter.readProperties(MappingMongoConverter.java:481)
	at org.springframework.data.mongodb.core.convert.MappingMongoConverter.populateProperties(MappingMongoConverter.java:394)
	at org.springframework.data.mongodb.core.convert.MappingMongoConverter.read(MappingMongoConverter.java:372)
	at org.springframework.data.mongodb.core.convert.MappingMongoConverter.readDocument(MappingMongoConverter.java:342)
	at org.springframework.data.mongodb.core.convert.MappingMongoConverter.read(MappingMongoConverter.java:278)
	at org.springframework.data.mongodb.core.convert.MappingMongoConverter.read(MappingMongoConverter.java:274)
	at org.springframework.data.mongodb.core.convert.MappingMongoConverter.read(MappingMongoConverter.java:102)
	at org.springframework.data.mongodb.core.ReactiveMongoTemplate$ReadDocumentCallback.doWith(ReactiveMongoTemplate.java:3155)
	at reactor.core.publisher.FluxConcatMap$ConcatMapImmediate.drain(FluxConcatMap.java:374)
	at reactor.core.publisher.FluxConcatMap$ConcatMapImmediate.onNext(FluxConcatMap.java:250)
	at reactor.core.publisher.FluxCreate$BufferAsyncSink.drain(FluxCreate.java:793)
	at reactor.core.publisher.FluxCreate$BufferAsyncSink.next(FluxCreate.java:718)
	at reactor.core.publisher.FluxCreate$SerializedFluxSink.next(FluxCreate.java:154)
	at java.util.ArrayList.forEach(ArrayList.java:1259)
	at com.mongodb.reactivestreams.client.internal.BatchCursorFlux.lambda$recurseCursor$4(BatchCursorFlux.java:94)
	at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.onNext(MonoPeekTerminal.java:171)
	at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.onNext(MonoPeekTerminal.java:180)
	at reactor.core.publisher.FluxPeekFuseable$PeekConditionalSubscriber.onNext(FluxPeekFuseable.java:854)
	at reactor.core.publisher.MonoCreate$DefaultMonoSink.success(MonoCreate.java:160)
	at com.mongodb.reactivestreams.client.internal.MongoOperationPublisher.lambda$sinkToCallback$30(MongoOperationPublisher.java:550)
	at com.mongodb.internal.operation.AsyncQueryBatchCursor.next(AsyncQueryBatchCursor.java:207)
	at com.mongodb.internal.operation.AsyncQueryBatchCursor.next(AsyncQueryBatchCursor.java:146)
	at com.mongodb.reactivestreams.client.internal.BatchCursor.lambda$next$0(BatchCursor.java:35)
	at reactor.core.publisher.MonoCreate.subscribe(MonoCreate.java:57)
	at reactor.core.publisher.Mono.subscribe(Mono.java:4150)
	at reactor.core.publisher.Mono.subscribeWith(Mono.java:4265)
	at reactor.core.publisher.Mono.subscribe(Mono.java:3982)
	at com.mongodb.reactivestreams.client.internal.BatchCursorFlux.recurseCursor(BatchCursorFlux.java:104)
	at com.mongodb.reactivestreams.client.internal.BatchCursorFlux.lambda$subscribe$0(BatchCursorFlux.java:56)
	at reactor.core.publisher.LambdaMonoSubscriber.onNext(LambdaMonoSubscriber.java:171)
	at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onNext(FluxMapFuseable.java:127)
	at reactor.core.publisher.Operators$MonoSubscriber.complete(Operators.java:1815)
	at reactor.core.publisher.MonoFlatMap$FlatMapInner.onNext(MonoFlatMap.java:249)
	at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.onNext(MonoPeekTerminal.java:180)
	at reactor.core.publisher.MonoCreate$DefaultMonoSink.success(MonoCreate.java:160)
	at com.mongodb.reactivestreams.client.internal.MongoOperationPublisher.lambda$sinkToCallback$30(MongoOperationPublisher.java:550)
	at com.mongodb.reactivestreams.client.internal.OperationExecutorImpl.lambda$execute$2(OperationExecutorImpl.java:73)
	at com.mongodb.internal.async.ErrorHandlingResultCallback.onResult(ErrorHandlingResultCallback.java:48)
	at com.mongodb.internal.operation.FindOperation$3.onResult(FindOperation.java:755)
	at com.mongodb.internal.operation.OperationHelper$ReferenceCountedReleasingWrappedCallback.onResult(OperationHelper.java:532)
	at com.mongodb.internal.operation.CommandOperationHelper$10.onResult(CommandOperationHelper.java:483)
	at com.mongodb.internal.async.ErrorHandlingResultCallback.onResult(ErrorHandlingResultCallback.java:48)
	at com.mongodb.internal.connection.DefaultServer$DefaultServerProtocolExecutor$2.onResult(DefaultServer.java:286)
	at com.mongodb.internal.async.ErrorHandlingResultCallback.onResult(ErrorHandlingResultCallback.java:48)
	at com.mongodb.internal.connection.CommandProtocolImpl$1.onResult(CommandProtocolImpl.java:84)
	at com.mongodb.internal.connection.DefaultConnectionPool$PooledConnection$2.onResult(DefaultConnectionPool.java:530)
	at com.mongodb.internal.connection.UsageTrackingInternalConnection$2.onResult(UsageTrackingInternalConnection.java:142)
	at com.mongodb.internal.async.ErrorHandlingResultCallback.onResult(ErrorHandlingResultCallback.java:48)
	at com.mongodb.internal.connection.InternalStreamConnection$2$1.onResult(InternalStreamConnection.java:462)
	at com.mongodb.internal.connection.InternalStreamConnection$2$1.onResult(InternalStreamConnection.java:439)
	at com.mongodb.internal.connection.InternalStreamConnection$MessageHeaderCallback$MessageCallback.onResult(InternalStreamConnection.java:744)
	at com.mongodb.internal.connection.InternalStreamConnection$MessageHeaderCallback$MessageCallback.onResult(InternalStreamConnection.java:711)
	at com.mongodb.internal.connection.InternalStreamConnection$5.completed(InternalStreamConnection.java:581)
	at com.mongodb.internal.connection.InternalStreamConnection$5.completed(InternalStreamConnection.java:578)
	at com.mongodb.connection.netty.NettyStream.readAsync(NettyStream.java:322)
	at com.mongodb.connection.netty.NettyStream.readAsync(NettyStream.java:269)
	at com.mongodb.internal.connection.InternalStreamConnection.readAsync(InternalStreamConnection.java:578)
	at com.mongodb.internal.connection.InternalStreamConnection.access$1100(InternalStreamConnection.java:78)
	at com.mongodb.internal.connection.InternalStreamConnection$MessageHeaderCallback.onResult(InternalStreamConnection.java:701)
	at com.mongodb.internal.connection.InternalStreamConnection$MessageHeaderCallback.onResult(InternalStreamConnection.java:686)
	at com.mongodb.internal.connection.InternalStreamConnection$5.completed(InternalStreamConnection.java:581)
	at com.mongodb.internal.connection.InternalStreamConnection$5.completed(InternalStreamConnection.java:578)
	at com.mongodb.connection.netty.NettyStream.readAsync(NettyStream.java:322)
	at com.mongodb.connection.netty.NettyStream.handleReadResponse(NettyStream.java:350)
	at com.mongodb.connection.netty.NettyStream.access$1200(NettyStream.java:104)
	at com.mongodb.connection.netty.NettyStream$InboundBufferHandler.channelRead0(NettyStream.java:409)
	at com.mongodb.connection.netty.NettyStream$InboundBufferHandler.channelRead0(NettyStream.java:406)
	at io.netty.channel.SimpleChannelInboundHandler.channelRead(SimpleChannelInboundHandler.java:99)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:379)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:365)
	at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:357)
	at io.netty.channel.DefaultChannelPipeline$HeadContext.channelRead(DefaultChannelPipeline.java:1410)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:379)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:365)
	at io.netty.channel.DefaultChannelPipeline.fireChannelRead(DefaultChannelPipeline.java:919)
	at io.netty.channel.nio.AbstractNioByteChannel$NioByteUnsafe.read(AbstractNioByteChannel.java:166)
	at io.netty.channel.nio.NioEventLoop.processSelectedKey(NioEventLoop.java:719)
	at io.netty.channel.nio.NioEventLoop.processSelectedKeysOptimized(NioEventLoop.java:655)
	at io.netty.channel.nio.NioEventLoop.processSelectedKeys(NioEventLoop.java:581)
	at io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:493)
	at io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:989)
	at io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)
	at io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)
	at java.lang.Thread.run(Thread.java:748)
2021-07-19 19:00:40,453 DEBUG [nioEventLoopGroup-3-3] org.springframework.core.log.CompositeLog : [cbb15442-3, L:/0:0:0:0:0:0:0:1:8090 - R:/0:0:0:0:0:0:0:1:52362] Encoding [{timestamp=Mon Jul 19 19:00:40 COT 2021, path=/customer, status=500, error=Internal Server Error, re (truncated)...]
2021-07-19 19:00:40,455 DEBUG [reactor-http-nio-3] org.springframework.core.log.LogFormatUtils : [cbb15442-3, L:/0:0:0:0:0:0:0:1:8090 - R:/0:0:0:0:0:0:0:1:52362] Completed 500 INTERNAL_SERVER_ERROR
2021-07-19 19:00:55,079 DEBUG [DiscoveryClient-HeartbeatExecutor-0] org.springframework.core.log.CompositeLog : HTTP PUT http://localhost:8761/eureka/apps/CUSTOMER_SERVICE/host.docker.internal:customer_service:8090?status=UP&lastDirtyTimestamp=1626739075026
2021-07-19 19:00:55,079 DEBUG [DiscoveryClient-HeartbeatExecutor-0] org.springframework.core.log.CompositeLog : Accept=[application/json, application/*+json]
2021-07-19 19:00:55,082 DEBUG [DiscoveryClient-HeartbeatExecutor-0] org.springframework.core.log.CompositeLog : Response 200 OK
2021-07-19 19:00:55,148 DEBUG [DiscoveryClient-CacheRefreshExecutor-0] org.springframework.core.log.CompositeLog : HTTP GET http://localhost:8761/eureka/apps/delta
2021-07-19 19:00:55,148 DEBUG [DiscoveryClient-CacheRefreshExecutor-0] org.springframework.core.log.CompositeLog : Accept=[application/json, application/*+json]
2021-07-19 19:00:55,152 DEBUG [DiscoveryClient-CacheRefreshExecutor-0] org.springframework.core.log.CompositeLog : Response 200 OK
2021-07-19 19:00:55,153 DEBUG [DiscoveryClient-CacheRefreshExecutor-0] org.springframework.core.log.CompositeLog : Reading to [org.springframework.cloud.netflix.eureka.http.EurekaApplications]
2021-07-19 19:01:25,084 DEBUG [DiscoveryClient-HeartbeatExecutor-0] org.springframework.core.log.CompositeLog : HTTP PUT http://localhost:8761/eureka/apps/CUSTOMER_SERVICE/host.docker.internal:customer_service:8090?status=UP&lastDirtyTimestamp=1626739075026
2021-07-19 19:01:25,085 DEBUG [DiscoveryClient-HeartbeatExecutor-0] org.springframework.core.log.CompositeLog : Accept=[application/json, application/*+json]
2021-07-19 19:01:25,147 DEBUG [DiscoveryClient-HeartbeatExecutor-0] org.springframework.core.log.CompositeLog : Response 200 OK
2021-07-19 19:01:25,156 DEBUG [DiscoveryClient-CacheRefreshExecutor-0] org.springframework.core.log.CompositeLog : HTTP GET http://localhost:8761/eureka/apps/delta
2021-07-19 19:01:25,157 DEBUG [DiscoveryClient-CacheRefreshExecutor-0] org.springframework.core.log.CompositeLog : Accept=[application/json, application/*+json]
2021-07-19 19:01:25,161 DEBUG [DiscoveryClient-CacheRefreshExecutor-0] org.springframework.core.log.CompositeLog : Response 200 OK
2021-07-19 19:01:25,162 DEBUG [DiscoveryClient-CacheRefreshExecutor-0] org.springframework.core.log.CompositeLog : Reading to [org.springframework.cloud.netflix.eureka.http.EurekaApplications]
2021-07-19 19:01:28,399 INFO [RMI TCP Connection(13)-127.0.0.1] com.netflix.discovery.DiscoveryClient$3 : Saw local status change event StatusChangeEvent [timestamp=1626739288399, current=DOWN, previous=UP]
2021-07-19 19:01:28,400 INFO [DiscoveryClient-InstanceInfoReplicator-0] com.netflix.discovery.DiscoveryClient : DiscoveryClient_CUSTOMER_SERVICE/host.docker.internal:customer_service:8090: registering service...
2021-07-19 19:01:28,400 DEBUG [DiscoveryClient-InstanceInfoReplicator-0] org.springframework.core.log.CompositeLog : HTTP POST http://localhost:8761/eureka/apps/CUSTOMER_SERVICE
2021-07-19 19:01:28,401 DEBUG [DiscoveryClient-InstanceInfoReplicator-0] org.springframework.core.log.CompositeLog : Accept=[application/json, application/*+json]
2021-07-19 19:01:28,401 DEBUG [DiscoveryClient-InstanceInfoReplicator-0] org.springframework.core.log.CompositeLog : Writing [InstanceInfo [instanceId = host.docker.internal:customer_service:8090, appName = CUSTOMER_SERVICE, hostName = host.docker.internal, status = DOWN, ipAddr = 192.168.1.12, port = 8090, securePort = 443, dataCenterInfo = com.netflix.appinfo.MyDataCenterInfo@246cccf] as "application/json"
2021-07-19 19:01:28,419 INFO [RMI TCP Connection(13)-127.0.0.1] com.mongodb.diagnostics.logging.SLF4JLogger : Closed connection [connectionId{localValue:3, serverValue:18}] to localhost:27017 because the pool has been closed.
2021-07-19 19:01:28,455 DEBUG [DiscoveryClient-InstanceInfoReplicator-0] org.springframework.core.log.CompositeLog : Response 204 NO_CONTENT
2021-07-19 19:01:28,455 INFO [DiscoveryClient-InstanceInfoReplicator-0] com.netflix.discovery.DiscoveryClient : DiscoveryClient_CUSTOMER_SERVICE/host.docker.internal:customer_service:8090 - registration status: 204
2021-07-19 19:01:32,488 INFO [RMI TCP Connection(13)-127.0.0.1] com.netflix.discovery.DiscoveryClient : Shutting down DiscoveryClient ...
2021-07-19 19:01:35,494 INFO [RMI TCP Connection(13)-127.0.0.1] com.netflix.discovery.DiscoveryClient : Unregistering ...
2021-07-19 19:01:35,497 DEBUG [RMI TCP Connection(13)-127.0.0.1] org.springframework.core.log.CompositeLog : HTTP DELETE http://localhost:8761/eureka/apps/CUSTOMER_SERVICE/host.docker.internal:customer_service:8090
2021-07-19 19:01:35,499 DEBUG [RMI TCP Connection(13)-127.0.0.1] org.springframework.core.log.CompositeLog : Accept=[application/json, application/*+json]
2021-07-19 19:01:35,521 DEBUG [RMI TCP Connection(13)-127.0.0.1] org.springframework.core.log.CompositeLog : Response 200 OK
2021-07-19 19:01:35,522 INFO [RMI TCP Connection(13)-127.0.0.1] com.netflix.discovery.DiscoveryClient : DiscoveryClient_CUSTOMER_SERVICE/host.docker.internal:customer_service:8090 - deregister  status: 200
2021-07-19 19:01:35,532 INFO [RMI TCP Connection(13)-127.0.0.1] com.netflix.discovery.DiscoveryClient : Completed shut down of DiscoveryClient
2021-07-19 19:01:49,120 INFO [background-preinit] org.hibernate.validator.internal.util.Version : HV000001: Hibernate Validator 6.2.0.Final
2021-07-19 19:01:50,761 DEBUG [main] org.springframework.core.log.CompositeLog : HTTP GET http://localhost:8888/customer_service/default/main
2021-07-19 19:01:50,835 DEBUG [main] org.springframework.core.log.CompositeLog : Accept=[application/json, application/*+json]
2021-07-19 19:01:52,685 DEBUG [main] org.springframework.core.log.CompositeLog : Response 200 OK
2021-07-19 19:01:52,686 DEBUG [main] org.springframework.core.log.CompositeLog : Reading to [org.springframework.cloud.config.environment.Environment]
2021-07-19 19:01:52,729 INFO [main] org.springframework.boot.SpringApplication : No active profile set, falling back to default profiles: default
2021-07-19 19:01:55,152 INFO [main] com.mongodb.diagnostics.logging.SLF4JLogger : Cluster created with settings {hosts=[localhost:27017], mode=SINGLE, requiredClusterType=UNKNOWN, serverSelectionTimeout='30000 ms'}
2021-07-19 19:01:56,372 DEBUG [main] org.springframework.web.reactive.result.method.AbstractHandlerMethodMapping : 6 mappings in 'requestMappingHandlerMapping'
2021-07-19 19:01:56,421 DEBUG [main] org.springframework.web.reactive.handler.SimpleUrlHandlerMapping : Patterns [/webjars/**, /**] in 'resourceHandlerMapping'
2021-07-19 19:01:57,108 INFO [cluster-rtt-ClusterId{value='60f61273e839967e071c35c3', description='null'}-localhost:27017] com.mongodb.diagnostics.logging.SLF4JLogger : Opened connection [connectionId{localValue:2, serverValue:19}] to localhost:27017
2021-07-19 19:01:57,108 INFO [cluster-ClusterId{value='60f61273e839967e071c35c3', description='null'}-localhost:27017] com.mongodb.diagnostics.logging.SLF4JLogger : Opened connection [connectionId{localValue:1, serverValue:20}] to localhost:27017
2021-07-19 19:01:57,111 INFO [cluster-ClusterId{value='60f61273e839967e071c35c3', description='null'}-localhost:27017] com.mongodb.diagnostics.logging.SLF4JLogger : Monitor thread successfully connected to server with description ServerDescription{address=localhost:27017, type=STANDALONE, state=CONNECTED, ok=true, minWireVersion=0, maxWireVersion=9, maxDocumentSize=16777216, logicalSessionTimeoutMinutes=30, roundTripTimeNanos=99804800}
2021-07-19 19:01:59,742 DEBUG [main] org.springframework.web.reactive.result.method.annotation.ControllerMethodResolver : ControllerAdvice beans: none
2021-07-19 19:01:59,799 DEBUG [main] org.springframework.web.server.adapter.HttpWebHandlerAdapter : enableLoggingRequestDetails='false': form data and headers will be masked to prevent unsafe logging of potentially sensitive data
2021-07-19 19:02:01,660 INFO [main] com.netflix.discovery.DiscoveryClient : Initializing Eureka in region us-east-1
2021-07-19 19:02:01,666 INFO [main] com.netflix.discovery.shared.resolver.aws.ConfigClusterResolver : Resolving eureka endpoints via configuration
2021-07-19 19:02:01,701 INFO [main] com.netflix.discovery.DiscoveryClient : Disable delta property : false
2021-07-19 19:02:01,701 INFO [main] com.netflix.discovery.DiscoveryClient : Single vip registry refresh property : null
2021-07-19 19:02:01,702 INFO [main] com.netflix.discovery.DiscoveryClient : Force full registry fetch : false
2021-07-19 19:02:01,702 INFO [main] com.netflix.discovery.DiscoveryClient : Application is null : false
2021-07-19 19:02:01,702 INFO [main] com.netflix.discovery.DiscoveryClient : Registered Applications size is zero : true
2021-07-19 19:02:01,702 INFO [main] com.netflix.discovery.DiscoveryClient : Application version is -1: true
2021-07-19 19:02:01,703 INFO [main] com.netflix.discovery.DiscoveryClient : Getting all instance registry info from the eureka server
2021-07-19 19:02:02,704 DEBUG [main] org.springframework.core.log.CompositeLog : HTTP GET http://localhost:8761/eureka/apps/
2021-07-19 19:02:02,754 DEBUG [main] org.springframework.core.log.CompositeLog : Accept=[application/json, application/*+json]
2021-07-19 19:02:02,816 DEBUG [main] org.springframework.core.log.CompositeLog : Response 200 OK
2021-07-19 19:02:02,817 DEBUG [main] org.springframework.core.log.CompositeLog : Reading to [org.springframework.cloud.netflix.eureka.http.EurekaApplications]
2021-07-19 19:02:02,824 INFO [main] com.netflix.discovery.DiscoveryClient : The response status is 200
2021-07-19 19:02:02,828 INFO [main] com.netflix.discovery.DiscoveryClient : Starting heartbeat executor: renew interval is: 30
2021-07-19 19:02:02,832 INFO [main] com.netflix.discovery.InstanceInfoReplicator : InstanceInfoReplicator onDemand update allowed rate per min is 4
2021-07-19 19:02:02,837 INFO [main] com.netflix.discovery.DiscoveryClient : Discovery Client initialized at timestamp 1626739322836 with initial instances count: 2
2021-07-19 19:02:02,848 INFO [main] com.netflix.discovery.DiscoveryClient$3 : Saw local status change event StatusChangeEvent [timestamp=1626739322848, current=UP, previous=STARTING]
2021-07-19 19:02:02,850 INFO [DiscoveryClient-InstanceInfoReplicator-0] com.netflix.discovery.DiscoveryClient : DiscoveryClient_CUSTOMER_SERVICE/host.docker.internal:customer_service:8090: registering service...
2021-07-19 19:02:02,863 DEBUG [DiscoveryClient-InstanceInfoReplicator-0] org.springframework.core.log.CompositeLog : HTTP POST http://localhost:8761/eureka/apps/CUSTOMER_SERVICE
2021-07-19 19:02:02,865 DEBUG [DiscoveryClient-InstanceInfoReplicator-0] org.springframework.core.log.CompositeLog : Accept=[application/json, application/*+json]
2021-07-19 19:02:02,874 DEBUG [DiscoveryClient-InstanceInfoReplicator-0] org.springframework.core.log.CompositeLog : Writing [InstanceInfo [instanceId = host.docker.internal:customer_service:8090, appName = CUSTOMER_SERVICE, hostName = host.docker.internal, status = UP, ipAddr = 192.168.1.12, port = 8090, securePort = 443, dataCenterInfo = com.netflix.appinfo.MyDataCenterInfo@45aabcce] as "application/json"
2021-07-19 19:02:02,932 DEBUG [DiscoveryClient-InstanceInfoReplicator-0] org.springframework.core.log.CompositeLog : Response 204 NO_CONTENT
2021-07-19 19:02:02,932 INFO [DiscoveryClient-InstanceInfoReplicator-0] com.netflix.discovery.DiscoveryClient : DiscoveryClient_CUSTOMER_SERVICE/host.docker.internal:customer_service:8090 - registration status: 204
2021-07-19 19:02:05,074 INFO [main] org.springframework.boot.StartupInfoLogger : Started Application in 17.612 seconds (JVM running for 19.156)
2021-07-19 19:02:15,902 DEBUG [reactor-http-nio-3] org.springframework.core.log.LogFormatUtils : [4147b1bf-1, L:/0:0:0:0:0:0:0:1:8090 - R:/0:0:0:0:0:0:0:1:60904] HTTP GET "/customer"
2021-07-19 19:02:15,925 DEBUG [reactor-http-nio-3] org.springframework.web.reactive.handler.AbstractHandlerMapping : [4147b1bf-1, L:/0:0:0:0:0:0:0:1:8090 - R:/0:0:0:0:0:0:0:1:60904] Mapped to com.bank.manage.customer.controller.CustomerController#getAllCustomers()
2021-07-19 19:02:15,938 INFO [reactor-http-nio-3] com.bank.manage.customer.controller.CustomerController :  EndPoit get by all customers {} 
2021-07-19 19:02:15,958 DEBUG [reactor-http-nio-3] org.springframework.web.reactive.result.HandlerResultHandlerSupport : [4147b1bf-1, L:/0:0:0:0:0:0:0:1:8090 - R:/0:0:0:0:0:0:0:1:60904] Found 'Content-Type:application/json' in response
2021-07-19 19:02:15,958 DEBUG [reactor-http-nio-3] org.springframework.web.reactive.result.method.annotation.AbstractMessageWriterResultHandler : [4147b1bf-1, L:/0:0:0:0:0:0:0:1:8090 - R:/0:0:0:0:0:0:0:1:60904] 0..N [com.bank.manage.customer.persistence.entity.Customer]
2021-07-19 19:02:16,036 INFO [nioEventLoopGroup-3-3] com.mongodb.diagnostics.logging.SLF4JLogger : Opened connection [connectionId{localValue:3, serverValue:21}] to localhost:27017
2021-07-19 19:02:16,132 DEBUG [nioEventLoopGroup-3-3] org.springframework.core.log.CompositeLog : [4147b1bf-1, L:/0:0:0:0:0:0:0:1:8090 - R:/0:0:0:0:0:0:0:1:60904] Resolved [ConversionFailedException: Failed to convert from type [java.lang.Double] to type [java.lang.Integer] for value '9.89898968968E11'; nested exception is java.lang.IllegalArgumentException: Could not convert number [9.89898968968E11] of type [java.lang.Double] to target class [java.lang.Integer]: overflow] for HTTP GET /customer
2021-07-19 19:02:16,135 ERROR [nioEventLoopGroup-3-3] org.springframework.core.log.CompositeLog : [4147b1bf-1, L:/0:0:0:0:0:0:0:1:8090 - R:/0:0:0:0:0:0:0:1:60904]  500 Server Error for HTTP GET "/customer"
org.springframework.core.convert.ConversionFailedException: Failed to convert from type [java.lang.Double] to type [java.lang.Integer] for value '9.89898968968E11'; nested exception is java.lang.IllegalArgumentException: Could not convert number [9.89898968968E11] of type [java.lang.Double] to target class [java.lang.Integer]: overflow
	at org.springframework.core.convert.support.ConversionUtils.invokeConverter(ConversionUtils.java:47)
	Suppressed: reactor.core.publisher.FluxOnAssembly$OnAssemblyException: 
Error has been observed at the following site(s):
	|_ checkpoint ⇢ Handler com.bank.manage.customer.controller.CustomerController#getAllCustomers() [DispatcherHandler]
	|_ checkpoint ⇢ org.springframework.boot.actuate.metrics.web.reactive.server.MetricsWebFilter [DefaultWebFilterChain]
	|_ checkpoint ⇢ HTTP GET "/customer" [ExceptionHandlingWebHandler]
Stack trace:
		at org.springframework.core.convert.support.ConversionUtils.invokeConverter(ConversionUtils.java:47)
		at org.springframework.core.convert.support.GenericConversionService.convert(GenericConversionService.java:192)
		at org.springframework.core.convert.support.GenericConversionService.convert(GenericConversionService.java:175)
		at org.springframework.data.mongodb.core.convert.MappingMongoConverter.doConvert(MappingMongoConverter.java:1547)
		at org.springframework.data.mongodb.core.convert.MappingMongoConverter.doConvert(MappingMongoConverter.java:1540)
		at org.springframework.data.mongodb.core.convert.MappingMongoConverter.getPotentiallyConvertedSimpleRead(MappingMongoConverter.java:1060)
		at org.springframework.data.mongodb.core.convert.MappingMongoConverter.getPotentiallyConvertedSimpleRead(MappingMongoConverter.java:1038)
		at org.springframework.data.mongodb.core.convert.MappingMongoConverter$ConversionContext.convert(MappingMongoConverter.java:1919)
		at org.springframework.data.mongodb.core.convert.MappingMongoConverter$MongoDbPropertyValueProvider.getPropertyValue(MappingMongoConverter.java:1641)
		at org.springframework.data.mongodb.core.convert.MappingMongoConverter.readProperties(MappingMongoConverter.java:481)
		at org.springframework.data.mongodb.core.convert.MappingMongoConverter.populateProperties(MappingMongoConverter.java:394)
		at org.springframework.data.mongodb.core.convert.MappingMongoConverter.read(MappingMongoConverter.java:372)
		at org.springframework.data.mongodb.core.convert.MappingMongoConverter.readDocument(MappingMongoConverter.java:342)
		at org.springframework.data.mongodb.core.convert.MappingMongoConverter.read(MappingMongoConverter.java:278)
		at org.springframework.data.mongodb.core.convert.MappingMongoConverter.read(MappingMongoConverter.java:274)
		at org.springframework.data.mongodb.core.convert.MappingMongoConverter.read(MappingMongoConverter.java:102)
		at org.springframework.data.mongodb.core.ReactiveMongoTemplate$ReadDocumentCallback.doWith(ReactiveMongoTemplate.java:3155)
		at reactor.core.publisher.FluxConcatMap$ConcatMapImmediate.drain(FluxConcatMap.java:374)
		at reactor.core.publisher.FluxConcatMap$ConcatMapImmediate.onNext(FluxConcatMap.java:250)
		at reactor.core.publisher.FluxCreate$BufferAsyncSink.drain(FluxCreate.java:793)
		at reactor.core.publisher.FluxCreate$BufferAsyncSink.next(FluxCreate.java:718)
		at reactor.core.publisher.FluxCreate$SerializedFluxSink.next(FluxCreate.java:154)
		at java.util.ArrayList.forEach(ArrayList.java:1259)
		at com.mongodb.reactivestreams.client.internal.BatchCursorFlux.lambda$recurseCursor$4(BatchCursorFlux.java:94)
		at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.onNext(MonoPeekTerminal.java:171)
		at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.onNext(MonoPeekTerminal.java:180)
		at reactor.core.publisher.FluxPeekFuseable$PeekConditionalSubscriber.onNext(FluxPeekFuseable.java:854)
		at reactor.core.publisher.MonoCreate$DefaultMonoSink.success(MonoCreate.java:160)
		at com.mongodb.reactivestreams.client.internal.MongoOperationPublisher.lambda$sinkToCallback$30(MongoOperationPublisher.java:550)
		at com.mongodb.internal.operation.AsyncQueryBatchCursor.next(AsyncQueryBatchCursor.java:207)
		at com.mongodb.internal.operation.AsyncQueryBatchCursor.next(AsyncQueryBatchCursor.java:146)
		at com.mongodb.reactivestreams.client.internal.BatchCursor.lambda$next$0(BatchCursor.java:35)
		at reactor.core.publisher.MonoCreate.subscribe(MonoCreate.java:57)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4150)
		at reactor.core.publisher.Mono.subscribeWith(Mono.java:4265)
		at reactor.core.publisher.Mono.subscribe(Mono.java:3982)
		at com.mongodb.reactivestreams.client.internal.BatchCursorFlux.recurseCursor(BatchCursorFlux.java:104)
		at com.mongodb.reactivestreams.client.internal.BatchCursorFlux.lambda$subscribe$0(BatchCursorFlux.java:56)
		at reactor.core.publisher.LambdaMonoSubscriber.onNext(LambdaMonoSubscriber.java:171)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onNext(FluxMapFuseable.java:127)
		at reactor.core.publisher.Operators$MonoSubscriber.complete(Operators.java:1815)
		at reactor.core.publisher.MonoFlatMap$FlatMapInner.onNext(MonoFlatMap.java:249)
		at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.onNext(MonoPeekTerminal.java:180)
		at reactor.core.publisher.MonoCreate$DefaultMonoSink.success(MonoCreate.java:160)
		at com.mongodb.reactivestreams.client.internal.MongoOperationPublisher.lambda$sinkToCallback$30(MongoOperationPublisher.java:550)
		at com.mongodb.reactivestreams.client.internal.OperationExecutorImpl.lambda$execute$2(OperationExecutorImpl.java:73)
		at com.mongodb.internal.async.ErrorHandlingResultCallback.onResult(ErrorHandlingResultCallback.java:48)
		at com.mongodb.internal.operation.FindOperation$3.onResult(FindOperation.java:755)
		at com.mongodb.internal.operation.OperationHelper$ReferenceCountedReleasingWrappedCallback.onResult(OperationHelper.java:532)
		at com.mongodb.internal.operation.CommandOperationHelper$10.onResult(CommandOperationHelper.java:483)
		at com.mongodb.internal.async.ErrorHandlingResultCallback.onResult(ErrorHandlingResultCallback.java:48)
		at com.mongodb.internal.connection.DefaultServer$DefaultServerProtocolExecutor$2.onResult(DefaultServer.java:286)
		at com.mongodb.internal.async.ErrorHandlingResultCallback.onResult(ErrorHandlingResultCallback.java:48)
		at com.mongodb.internal.connection.CommandProtocolImpl$1.onResult(CommandProtocolImpl.java:84)
		at com.mongodb.internal.connection.DefaultConnectionPool$PooledConnection$2.onResult(DefaultConnectionPool.java:530)
		at com.mongodb.internal.connection.UsageTrackingInternalConnection$2.onResult(UsageTrackingInternalConnection.java:142)
		at com.mongodb.internal.async.ErrorHandlingResultCallback.onResult(ErrorHandlingResultCallback.java:48)
		at com.mongodb.internal.connection.InternalStreamConnection$2$1.onResult(InternalStreamConnection.java:462)
		at com.mongodb.internal.connection.InternalStreamConnection$2$1.onResult(InternalStreamConnection.java:439)
		at com.mongodb.internal.connection.InternalStreamConnection$MessageHeaderCallback$MessageCallback.onResult(InternalStreamConnection.java:744)
		at com.mongodb.internal.connection.InternalStreamConnection$MessageHeaderCallback$MessageCallback.onResult(InternalStreamConnection.java:711)
		at com.mongodb.internal.connection.InternalStreamConnection$5.completed(InternalStreamConnection.java:581)
		at com.mongodb.internal.connection.InternalStreamConnection$5.completed(InternalStreamConnection.java:578)
		at com.mongodb.connection.netty.NettyStream.readAsync(NettyStream.java:322)
		at com.mongodb.connection.netty.NettyStream.handleReadResponse(NettyStream.java:350)
		at com.mongodb.connection.netty.NettyStream.access$1200(NettyStream.java:104)
		at com.mongodb.connection.netty.NettyStream$InboundBufferHandler.channelRead0(NettyStream.java:409)
		at com.mongodb.connection.netty.NettyStream$InboundBufferHandler.channelRead0(NettyStream.java:406)
		at io.netty.channel.SimpleChannelInboundHandler.channelRead(SimpleChannelInboundHandler.java:99)
		at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:379)
		at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:365)
		at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:357)
		at io.netty.channel.DefaultChannelPipeline$HeadContext.channelRead(DefaultChannelPipeline.java:1410)
		at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:379)
		at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:365)
		at io.netty.channel.DefaultChannelPipeline.fireChannelRead(DefaultChannelPipeline.java:919)
		at io.netty.channel.nio.AbstractNioByteChannel$NioByteUnsafe.read(AbstractNioByteChannel.java:166)
		at io.netty.channel.nio.NioEventLoop.processSelectedKey(NioEventLoop.java:719)
		at io.netty.channel.nio.NioEventLoop.processSelectedKeysOptimized(NioEventLoop.java:655)
		at io.netty.channel.nio.NioEventLoop.processSelectedKeys(NioEventLoop.java:581)
		at io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:493)
		at io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:989)
		at io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)
		at io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)
		at java.lang.Thread.run(Thread.java:748)
Caused by: java.lang.IllegalArgumentException: Could not convert number [9.89898968968E11] of type [java.lang.Double] to target class [java.lang.Integer]: overflow
	at org.springframework.util.NumberUtils.raiseOverflowException(NumberUtils.java:175)
	at org.springframework.util.NumberUtils.convertNumberToTargetClass(NumberUtils.java:108)
	at org.springframework.core.convert.support.NumberToNumberConverterFactory$NumberToNumber.convert(NumberToNumberConverterFactory.java:66)
	at org.springframework.core.convert.support.NumberToNumberConverterFactory$NumberToNumber.convert(NumberToNumberConverterFactory.java:56)
	at org.springframework.core.convert.support.GenericConversionService$ConverterFactoryAdapter.convert(GenericConversionService.java:437)
	at org.springframework.core.convert.support.ConversionUtils.invokeConverter(ConversionUtils.java:41)
	at org.springframework.core.convert.support.GenericConversionService.convert(GenericConversionService.java:192)
	at org.springframework.core.convert.support.GenericConversionService.convert(GenericConversionService.java:175)
	at org.springframework.data.mongodb.core.convert.MappingMongoConverter.doConvert(MappingMongoConverter.java:1547)
	at org.springframework.data.mongodb.core.convert.MappingMongoConverter.doConvert(MappingMongoConverter.java:1540)
	at org.springframework.data.mongodb.core.convert.MappingMongoConverter.getPotentiallyConvertedSimpleRead(MappingMongoConverter.java:1060)
	at org.springframework.data.mongodb.core.convert.MappingMongoConverter.getPotentiallyConvertedSimpleRead(MappingMongoConverter.java:1038)
	at org.springframework.data.mongodb.core.convert.MappingMongoConverter$ConversionContext.convert(MappingMongoConverter.java:1919)
	at org.springframework.data.mongodb.core.convert.MappingMongoConverter$MongoDbPropertyValueProvider.getPropertyValue(MappingMongoConverter.java:1641)
	at org.springframework.data.mongodb.core.convert.MappingMongoConverter.readProperties(MappingMongoConverter.java:481)
	at org.springframework.data.mongodb.core.convert.MappingMongoConverter.populateProperties(MappingMongoConverter.java:394)
	at org.springframework.data.mongodb.core.convert.MappingMongoConverter.read(MappingMongoConverter.java:372)
	at org.springframework.data.mongodb.core.convert.MappingMongoConverter.readDocument(MappingMongoConverter.java:342)
	at org.springframework.data.mongodb.core.convert.MappingMongoConverter.read(MappingMongoConverter.java:278)
	at org.springframework.data.mongodb.core.convert.MappingMongoConverter.read(MappingMongoConverter.java:274)
	at org.springframework.data.mongodb.core.convert.MappingMongoConverter.read(MappingMongoConverter.java:102)
	at org.springframework.data.mongodb.core.ReactiveMongoTemplate$ReadDocumentCallback.doWith(ReactiveMongoTemplate.java:3155)
	at reactor.core.publisher.FluxConcatMap$ConcatMapImmediate.drain(FluxConcatMap.java:374)
	at reactor.core.publisher.FluxConcatMap$ConcatMapImmediate.onNext(FluxConcatMap.java:250)
	at reactor.core.publisher.FluxCreate$BufferAsyncSink.drain(FluxCreate.java:793)
	at reactor.core.publisher.FluxCreate$BufferAsyncSink.next(FluxCreate.java:718)
	at reactor.core.publisher.FluxCreate$SerializedFluxSink.next(FluxCreate.java:154)
	at java.util.ArrayList.forEach(ArrayList.java:1259)
	at com.mongodb.reactivestreams.client.internal.BatchCursorFlux.lambda$recurseCursor$4(BatchCursorFlux.java:94)
	at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.onNext(MonoPeekTerminal.java:171)
	at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.onNext(MonoPeekTerminal.java:180)
	at reactor.core.publisher.FluxPeekFuseable$PeekConditionalSubscriber.onNext(FluxPeekFuseable.java:854)
	at reactor.core.publisher.MonoCreate$DefaultMonoSink.success(MonoCreate.java:160)
	at com.mongodb.reactivestreams.client.internal.MongoOperationPublisher.lambda$sinkToCallback$30(MongoOperationPublisher.java:550)
	at com.mongodb.internal.operation.AsyncQueryBatchCursor.next(AsyncQueryBatchCursor.java:207)
	at com.mongodb.internal.operation.AsyncQueryBatchCursor.next(AsyncQueryBatchCursor.java:146)
	at com.mongodb.reactivestreams.client.internal.BatchCursor.lambda$next$0(BatchCursor.java:35)
	at reactor.core.publisher.MonoCreate.subscribe(MonoCreate.java:57)
	at reactor.core.publisher.Mono.subscribe(Mono.java:4150)
	at reactor.core.publisher.Mono.subscribeWith(Mono.java:4265)
	at reactor.core.publisher.Mono.subscribe(Mono.java:3982)
	at com.mongodb.reactivestreams.client.internal.BatchCursorFlux.recurseCursor(BatchCursorFlux.java:104)
	at com.mongodb.reactivestreams.client.internal.BatchCursorFlux.lambda$subscribe$0(BatchCursorFlux.java:56)
	at reactor.core.publisher.LambdaMonoSubscriber.onNext(LambdaMonoSubscriber.java:171)
	at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onNext(FluxMapFuseable.java:127)
	at reactor.core.publisher.Operators$MonoSubscriber.complete(Operators.java:1815)
	at reactor.core.publisher.MonoFlatMap$FlatMapInner.onNext(MonoFlatMap.java:249)
	at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.onNext(MonoPeekTerminal.java:180)
	at reactor.core.publisher.MonoCreate$DefaultMonoSink.success(MonoCreate.java:160)
	at com.mongodb.reactivestreams.client.internal.MongoOperationPublisher.lambda$sinkToCallback$30(MongoOperationPublisher.java:550)
	at com.mongodb.reactivestreams.client.internal.OperationExecutorImpl.lambda$execute$2(OperationExecutorImpl.java:73)
	at com.mongodb.internal.async.ErrorHandlingResultCallback.onResult(ErrorHandlingResultCallback.java:48)
	at com.mongodb.internal.operation.FindOperation$3.onResult(FindOperation.java:755)
	at com.mongodb.internal.operation.OperationHelper$ReferenceCountedReleasingWrappedCallback.onResult(OperationHelper.java:532)
	at com.mongodb.internal.operation.CommandOperationHelper$10.onResult(CommandOperationHelper.java:483)
	at com.mongodb.internal.async.ErrorHandlingResultCallback.onResult(ErrorHandlingResultCallback.java:48)
	at com.mongodb.internal.connection.DefaultServer$DefaultServerProtocolExecutor$2.onResult(DefaultServer.java:286)
	at com.mongodb.internal.async.ErrorHandlingResultCallback.onResult(ErrorHandlingResultCallback.java:48)
	at com.mongodb.internal.connection.CommandProtocolImpl$1.onResult(CommandProtocolImpl.java:84)
	at com.mongodb.internal.connection.DefaultConnectionPool$PooledConnection$2.onResult(DefaultConnectionPool.java:530)
	at com.mongodb.internal.connection.UsageTrackingInternalConnection$2.onResult(UsageTrackingInternalConnection.java:142)
	at com.mongodb.internal.async.ErrorHandlingResultCallback.onResult(ErrorHandlingResultCallback.java:48)
	at com.mongodb.internal.connection.InternalStreamConnection$2$1.onResult(InternalStreamConnection.java:462)
	at com.mongodb.internal.connection.InternalStreamConnection$2$1.onResult(InternalStreamConnection.java:439)
	at com.mongodb.internal.connection.InternalStreamConnection$MessageHeaderCallback$MessageCallback.onResult(InternalStreamConnection.java:744)
	at com.mongodb.internal.connection.InternalStreamConnection$MessageHeaderCallback$MessageCallback.onResult(InternalStreamConnection.java:711)
	at com.mongodb.internal.connection.InternalStreamConnection$5.completed(InternalStreamConnection.java:581)
	at com.mongodb.internal.connection.InternalStreamConnection$5.completed(InternalStreamConnection.java:578)
	at com.mongodb.connection.netty.NettyStream.readAsync(NettyStream.java:322)
	at com.mongodb.connection.netty.NettyStream.handleReadResponse(NettyStream.java:350)
	at com.mongodb.connection.netty.NettyStream.access$1200(NettyStream.java:104)
	at com.mongodb.connection.netty.NettyStream$InboundBufferHandler.channelRead0(NettyStream.java:409)
	at com.mongodb.connection.netty.NettyStream$InboundBufferHandler.channelRead0(NettyStream.java:406)
	at io.netty.channel.SimpleChannelInboundHandler.channelRead(SimpleChannelInboundHandler.java:99)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:379)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:365)
	at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:357)
	at io.netty.channel.DefaultChannelPipeline$HeadContext.channelRead(DefaultChannelPipeline.java:1410)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:379)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:365)
	at io.netty.channel.DefaultChannelPipeline.fireChannelRead(DefaultChannelPipeline.java:919)
	at io.netty.channel.nio.AbstractNioByteChannel$NioByteUnsafe.read(AbstractNioByteChannel.java:166)
	at io.netty.channel.nio.NioEventLoop.processSelectedKey(NioEventLoop.java:719)
	at io.netty.channel.nio.NioEventLoop.processSelectedKeysOptimized(NioEventLoop.java:655)
	at io.netty.channel.nio.NioEventLoop.processSelectedKeys(NioEventLoop.java:581)
	at io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:493)
	at io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:989)
	at io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)
	at io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)
	at java.lang.Thread.run(Thread.java:748)
2021-07-19 19:02:16,152 DEBUG [nioEventLoopGroup-3-3] org.springframework.core.log.CompositeLog : [4147b1bf-1, L:/0:0:0:0:0:0:0:1:8090 - R:/0:0:0:0:0:0:0:1:60904] Encoding [{timestamp=Mon Jul 19 19:02:16 COT 2021, path=/customer, status=500, error=Internal Server Error, re (truncated)...]
2021-07-19 19:02:16,175 DEBUG [reactor-http-nio-3] org.springframework.core.log.LogFormatUtils : [4147b1bf-1, L:/0:0:0:0:0:0:0:1:8090 - R:/0:0:0:0:0:0:0:1:60904] Completed 500 INTERNAL_SERVER_ERROR
2021-07-19 19:02:17,516 DEBUG [reactor-http-nio-3] org.springframework.core.log.LogFormatUtils : [4147b1bf-2, L:/0:0:0:0:0:0:0:1:8090 - R:/0:0:0:0:0:0:0:1:60904] HTTP GET "/customer"
2021-07-19 19:02:17,517 DEBUG [reactor-http-nio-3] org.springframework.web.reactive.handler.AbstractHandlerMapping : [4147b1bf-2, L:/0:0:0:0:0:0:0:1:8090 - R:/0:0:0:0:0:0:0:1:60904] Mapped to com.bank.manage.customer.controller.CustomerController#getAllCustomers()
2021-07-19 19:02:17,518 INFO [reactor-http-nio-3] com.bank.manage.customer.controller.CustomerController :  EndPoit get by all customers {} 
2021-07-19 19:02:17,519 DEBUG [reactor-http-nio-3] org.springframework.web.reactive.result.HandlerResultHandlerSupport : [4147b1bf-2, L:/0:0:0:0:0:0:0:1:8090 - R:/0:0:0:0:0:0:0:1:60904] Found 'Content-Type:application/json' in response
2021-07-19 19:02:17,519 DEBUG [reactor-http-nio-3] org.springframework.web.reactive.result.method.annotation.AbstractMessageWriterResultHandler : [4147b1bf-2, L:/0:0:0:0:0:0:0:1:8090 - R:/0:0:0:0:0:0:0:1:60904] 0..N [com.bank.manage.customer.persistence.entity.Customer]
2021-07-19 19:02:17,527 DEBUG [nioEventLoopGroup-3-3] org.springframework.core.log.CompositeLog : [4147b1bf-2, L:/0:0:0:0:0:0:0:1:8090 - R:/0:0:0:0:0:0:0:1:60904] Resolved [ConversionFailedException: Failed to convert from type [java.lang.Double] to type [java.lang.Integer] for value '9.89898968968E11'; nested exception is java.lang.IllegalArgumentException: Could not convert number [9.89898968968E11] of type [java.lang.Double] to target class [java.lang.Integer]: overflow] for HTTP GET /customer
2021-07-19 19:02:17,528 ERROR [nioEventLoopGroup-3-3] org.springframework.core.log.CompositeLog : [4147b1bf-2, L:/0:0:0:0:0:0:0:1:8090 - R:/0:0:0:0:0:0:0:1:60904]  500 Server Error for HTTP GET "/customer"
org.springframework.core.convert.ConversionFailedException: Failed to convert from type [java.lang.Double] to type [java.lang.Integer] for value '9.89898968968E11'; nested exception is java.lang.IllegalArgumentException: Could not convert number [9.89898968968E11] of type [java.lang.Double] to target class [java.lang.Integer]: overflow
	at org.springframework.core.convert.support.ConversionUtils.invokeConverter(ConversionUtils.java:47)
	Suppressed: reactor.core.publisher.FluxOnAssembly$OnAssemblyException: 
Error has been observed at the following site(s):
	|_ checkpoint ⇢ Handler com.bank.manage.customer.controller.CustomerController#getAllCustomers() [DispatcherHandler]
	|_ checkpoint ⇢ org.springframework.boot.actuate.metrics.web.reactive.server.MetricsWebFilter [DefaultWebFilterChain]
	|_ checkpoint ⇢ HTTP GET "/customer" [ExceptionHandlingWebHandler]
Stack trace:
		at org.springframework.core.convert.support.ConversionUtils.invokeConverter(ConversionUtils.java:47)
		at org.springframework.core.convert.support.GenericConversionService.convert(GenericConversionService.java:192)
		at org.springframework.core.convert.support.GenericConversionService.convert(GenericConversionService.java:175)
		at org.springframework.data.mongodb.core.convert.MappingMongoConverter.doConvert(MappingMongoConverter.java:1547)
		at org.springframework.data.mongodb.core.convert.MappingMongoConverter.doConvert(MappingMongoConverter.java:1540)
		at org.springframework.data.mongodb.core.convert.MappingMongoConverter.getPotentiallyConvertedSimpleRead(MappingMongoConverter.java:1060)
		at org.springframework.data.mongodb.core.convert.MappingMongoConverter.getPotentiallyConvertedSimpleRead(MappingMongoConverter.java:1038)
		at org.springframework.data.mongodb.core.convert.MappingMongoConverter$ConversionContext.convert(MappingMongoConverter.java:1919)
		at org.springframework.data.mongodb.core.convert.MappingMongoConverter$MongoDbPropertyValueProvider.getPropertyValue(MappingMongoConverter.java:1641)
		at org.springframework.data.mongodb.core.convert.MappingMongoConverter.readProperties(MappingMongoConverter.java:481)
		at org.springframework.data.mongodb.core.convert.MappingMongoConverter.populateProperties(MappingMongoConverter.java:394)
		at org.springframework.data.mongodb.core.convert.MappingMongoConverter.read(MappingMongoConverter.java:372)
		at org.springframework.data.mongodb.core.convert.MappingMongoConverter.readDocument(MappingMongoConverter.java:342)
		at org.springframework.data.mongodb.core.convert.MappingMongoConverter.read(MappingMongoConverter.java:278)
		at org.springframework.data.mongodb.core.convert.MappingMongoConverter.read(MappingMongoConverter.java:274)
		at org.springframework.data.mongodb.core.convert.MappingMongoConverter.read(MappingMongoConverter.java:102)
		at org.springframework.data.mongodb.core.ReactiveMongoTemplate$ReadDocumentCallback.doWith(ReactiveMongoTemplate.java:3155)
		at reactor.core.publisher.FluxConcatMap$ConcatMapImmediate.drain(FluxConcatMap.java:374)
		at reactor.core.publisher.FluxConcatMap$ConcatMapImmediate.onNext(FluxConcatMap.java:250)
		at reactor.core.publisher.FluxCreate$BufferAsyncSink.drain(FluxCreate.java:793)
		at reactor.core.publisher.FluxCreate$BufferAsyncSink.next(FluxCreate.java:718)
		at reactor.core.publisher.FluxCreate$SerializedFluxSink.next(FluxCreate.java:154)
		at java.util.ArrayList.forEach(ArrayList.java:1259)
		at com.mongodb.reactivestreams.client.internal.BatchCursorFlux.lambda$recurseCursor$4(BatchCursorFlux.java:94)
		at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.onNext(MonoPeekTerminal.java:171)
		at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.onNext(MonoPeekTerminal.java:180)
		at reactor.core.publisher.FluxPeekFuseable$PeekConditionalSubscriber.onNext(FluxPeekFuseable.java:854)
		at reactor.core.publisher.MonoCreate$DefaultMonoSink.success(MonoCreate.java:160)
		at com.mongodb.reactivestreams.client.internal.MongoOperationPublisher.lambda$sinkToCallback$30(MongoOperationPublisher.java:550)
		at com.mongodb.internal.operation.AsyncQueryBatchCursor.next(AsyncQueryBatchCursor.java:207)
		at com.mongodb.internal.operation.AsyncQueryBatchCursor.next(AsyncQueryBatchCursor.java:146)
		at com.mongodb.reactivestreams.client.internal.BatchCursor.lambda$next$0(BatchCursor.java:35)
		at reactor.core.publisher.MonoCreate.subscribe(MonoCreate.java:57)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4150)
		at reactor.core.publisher.Mono.subscribeWith(Mono.java:4265)
		at reactor.core.publisher.Mono.subscribe(Mono.java:3982)
		at com.mongodb.reactivestreams.client.internal.BatchCursorFlux.recurseCursor(BatchCursorFlux.java:104)
		at com.mongodb.reactivestreams.client.internal.BatchCursorFlux.lambda$subscribe$0(BatchCursorFlux.java:56)
		at reactor.core.publisher.LambdaMonoSubscriber.onNext(LambdaMonoSubscriber.java:171)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onNext(FluxMapFuseable.java:127)
		at reactor.core.publisher.Operators$MonoSubscriber.complete(Operators.java:1815)
		at reactor.core.publisher.MonoFlatMap$FlatMapInner.onNext(MonoFlatMap.java:249)
		at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.onNext(MonoPeekTerminal.java:180)
		at reactor.core.publisher.MonoCreate$DefaultMonoSink.success(MonoCreate.java:160)
		at com.mongodb.reactivestreams.client.internal.MongoOperationPublisher.lambda$sinkToCallback$30(MongoOperationPublisher.java:550)
		at com.mongodb.reactivestreams.client.internal.OperationExecutorImpl.lambda$execute$2(OperationExecutorImpl.java:73)
		at com.mongodb.internal.async.ErrorHandlingResultCallback.onResult(ErrorHandlingResultCallback.java:48)
		at com.mongodb.internal.operation.FindOperation$3.onResult(FindOperation.java:755)
		at com.mongodb.internal.operation.OperationHelper$ReferenceCountedReleasingWrappedCallback.onResult(OperationHelper.java:532)
		at com.mongodb.internal.operation.CommandOperationHelper$10.onResult(CommandOperationHelper.java:483)
		at com.mongodb.internal.async.ErrorHandlingResultCallback.onResult(ErrorHandlingResultCallback.java:48)
		at com.mongodb.internal.connection.DefaultServer$DefaultServerProtocolExecutor$2.onResult(DefaultServer.java:286)
		at com.mongodb.internal.async.ErrorHandlingResultCallback.onResult(ErrorHandlingResultCallback.java:48)
		at com.mongodb.internal.connection.CommandProtocolImpl$1.onResult(CommandProtocolImpl.java:84)
		at com.mongodb.internal.connection.DefaultConnectionPool$PooledConnection$2.onResult(DefaultConnectionPool.java:530)
		at com.mongodb.internal.connection.UsageTrackingInternalConnection$2.onResult(UsageTrackingInternalConnection.java:142)
		at com.mongodb.internal.async.ErrorHandlingResultCallback.onResult(ErrorHandlingResultCallback.java:48)
		at com.mongodb.internal.connection.InternalStreamConnection$2$1.onResult(InternalStreamConnection.java:462)
		at com.mongodb.internal.connection.InternalStreamConnection$2$1.onResult(InternalStreamConnection.java:439)
		at com.mongodb.internal.connection.InternalStreamConnection$MessageHeaderCallback$MessageCallback.onResult(InternalStreamConnection.java:744)
		at com.mongodb.internal.connection.InternalStreamConnection$MessageHeaderCallback$MessageCallback.onResult(InternalStreamConnection.java:711)
		at com.mongodb.internal.connection.InternalStreamConnection$5.completed(InternalStreamConnection.java:581)
		at com.mongodb.internal.connection.InternalStreamConnection$5.completed(InternalStreamConnection.java:578)
		at com.mongodb.connection.netty.NettyStream.readAsync(NettyStream.java:322)
		at com.mongodb.connection.netty.NettyStream.readAsync(NettyStream.java:269)
		at com.mongodb.internal.connection.InternalStreamConnection.readAsync(InternalStreamConnection.java:578)
		at com.mongodb.internal.connection.InternalStreamConnection.access$1100(InternalStreamConnection.java:78)
		at com.mongodb.internal.connection.InternalStreamConnection$MessageHeaderCallback.onResult(InternalStreamConnection.java:701)
		at com.mongodb.internal.connection.InternalStreamConnection$MessageHeaderCallback.onResult(InternalStreamConnection.java:686)
		at com.mongodb.internal.connection.InternalStreamConnection$5.completed(InternalStreamConnection.java:581)
		at com.mongodb.internal.connection.InternalStreamConnection$5.completed(InternalStreamConnection.java:578)
		at com.mongodb.connection.netty.NettyStream.readAsync(NettyStream.java:322)
		at com.mongodb.connection.netty.NettyStream.handleReadResponse(NettyStream.java:350)
		at com.mongodb.connection.netty.NettyStream.access$1200(NettyStream.java:104)
		at com.mongodb.connection.netty.NettyStream$InboundBufferHandler.channelRead0(NettyStream.java:409)
		at com.mongodb.connection.netty.NettyStream$InboundBufferHandler.channelRead0(NettyStream.java:406)
		at io.netty.channel.SimpleChannelInboundHandler.channelRead(SimpleChannelInboundHandler.java:99)
		at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:379)
		at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:365)
		at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:357)
		at io.netty.channel.DefaultChannelPipeline$HeadContext.channelRead(DefaultChannelPipeline.java:1410)
		at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:379)
		at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:365)
		at io.netty.channel.DefaultChannelPipeline.fireChannelRead(DefaultChannelPipeline.java:919)
		at io.netty.channel.nio.AbstractNioByteChannel$NioByteUnsafe.read(AbstractNioByteChannel.java:166)
		at io.netty.channel.nio.NioEventLoop.processSelectedKey(NioEventLoop.java:719)
		at io.netty.channel.nio.NioEventLoop.processSelectedKeysOptimized(NioEventLoop.java:655)
		at io.netty.channel.nio.NioEventLoop.processSelectedKeys(NioEventLoop.java:581)
		at io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:493)
		at io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:989)
		at io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)
		at io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)
		at java.lang.Thread.run(Thread.java:748)
Caused by: java.lang.IllegalArgumentException: Could not convert number [9.89898968968E11] of type [java.lang.Double] to target class [java.lang.Integer]: overflow
	at org.springframework.util.NumberUtils.raiseOverflowException(NumberUtils.java:175)
	at org.springframework.util.NumberUtils.convertNumberToTargetClass(NumberUtils.java:108)
	at org.springframework.core.convert.support.NumberToNumberConverterFactory$NumberToNumber.convert(NumberToNumberConverterFactory.java:66)
	at org.springframework.core.convert.support.NumberToNumberConverterFactory$NumberToNumber.convert(NumberToNumberConverterFactory.java:56)
	at org.springframework.core.convert.support.GenericConversionService$ConverterFactoryAdapter.convert(GenericConversionService.java:437)
	at org.springframework.core.convert.support.ConversionUtils.invokeConverter(ConversionUtils.java:41)
	at org.springframework.core.convert.support.GenericConversionService.convert(GenericConversionService.java:192)
	at org.springframework.core.convert.support.GenericConversionService.convert(GenericConversionService.java:175)
	at org.springframework.data.mongodb.core.convert.MappingMongoConverter.doConvert(MappingMongoConverter.java:1547)
	at org.springframework.data.mongodb.core.convert.MappingMongoConverter.doConvert(MappingMongoConverter.java:1540)
	at org.springframework.data.mongodb.core.convert.MappingMongoConverter.getPotentiallyConvertedSimpleRead(MappingMongoConverter.java:1060)
	at org.springframework.data.mongodb.core.convert.MappingMongoConverter.getPotentiallyConvertedSimpleRead(MappingMongoConverter.java:1038)
	at org.springframework.data.mongodb.core.convert.MappingMongoConverter$ConversionContext.convert(MappingMongoConverter.java:1919)
	at org.springframework.data.mongodb.core.convert.MappingMongoConverter$MongoDbPropertyValueProvider.getPropertyValue(MappingMongoConverter.java:1641)
	at org.springframework.data.mongodb.core.convert.MappingMongoConverter.readProperties(MappingMongoConverter.java:481)
	at org.springframework.data.mongodb.core.convert.MappingMongoConverter.populateProperties(MappingMongoConverter.java:394)
	at org.springframework.data.mongodb.core.convert.MappingMongoConverter.read(MappingMongoConverter.java:372)
	at org.springframework.data.mongodb.core.convert.MappingMongoConverter.readDocument(MappingMongoConverter.java:342)
	at org.springframework.data.mongodb.core.convert.MappingMongoConverter.read(MappingMongoConverter.java:278)
	at org.springframework.data.mongodb.core.convert.MappingMongoConverter.read(MappingMongoConverter.java:274)
	at org.springframework.data.mongodb.core.convert.MappingMongoConverter.read(MappingMongoConverter.java:102)
	at org.springframework.data.mongodb.core.ReactiveMongoTemplate$ReadDocumentCallback.doWith(ReactiveMongoTemplate.java:3155)
	at reactor.core.publisher.FluxConcatMap$ConcatMapImmediate.drain(FluxConcatMap.java:374)
	at reactor.core.publisher.FluxConcatMap$ConcatMapImmediate.onNext(FluxConcatMap.java:250)
	at reactor.core.publisher.FluxCreate$BufferAsyncSink.drain(FluxCreate.java:793)
	at reactor.core.publisher.FluxCreate$BufferAsyncSink.next(FluxCreate.java:718)
	at reactor.core.publisher.FluxCreate$SerializedFluxSink.next(FluxCreate.java:154)
	at java.util.ArrayList.forEach(ArrayList.java:1259)
	at com.mongodb.reactivestreams.client.internal.BatchCursorFlux.lambda$recurseCursor$4(BatchCursorFlux.java:94)
	at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.onNext(MonoPeekTerminal.java:171)
	at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.onNext(MonoPeekTerminal.java:180)
	at reactor.core.publisher.FluxPeekFuseable$PeekConditionalSubscriber.onNext(FluxPeekFuseable.java:854)
	at reactor.core.publisher.MonoCreate$DefaultMonoSink.success(MonoCreate.java:160)
	at com.mongodb.reactivestreams.client.internal.MongoOperationPublisher.lambda$sinkToCallback$30(MongoOperationPublisher.java:550)
	at com.mongodb.internal.operation.AsyncQueryBatchCursor.next(AsyncQueryBatchCursor.java:207)
	at com.mongodb.internal.operation.AsyncQueryBatchCursor.next(AsyncQueryBatchCursor.java:146)
	at com.mongodb.reactivestreams.client.internal.BatchCursor.lambda$next$0(BatchCursor.java:35)
	at reactor.core.publisher.MonoCreate.subscribe(MonoCreate.java:57)
	at reactor.core.publisher.Mono.subscribe(Mono.java:4150)
	at reactor.core.publisher.Mono.subscribeWith(Mono.java:4265)
	at reactor.core.publisher.Mono.subscribe(Mono.java:3982)
	at com.mongodb.reactivestreams.client.internal.BatchCursorFlux.recurseCursor(BatchCursorFlux.java:104)
	at com.mongodb.reactivestreams.client.internal.BatchCursorFlux.lambda$subscribe$0(BatchCursorFlux.java:56)
	at reactor.core.publisher.LambdaMonoSubscriber.onNext(LambdaMonoSubscriber.java:171)
	at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onNext(FluxMapFuseable.java:127)
	at reactor.core.publisher.Operators$MonoSubscriber.complete(Operators.java:1815)
	at reactor.core.publisher.MonoFlatMap$FlatMapInner.onNext(MonoFlatMap.java:249)
	at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.onNext(MonoPeekTerminal.java:180)
	at reactor.core.publisher.MonoCreate$DefaultMonoSink.success(MonoCreate.java:160)
	at com.mongodb.reactivestreams.client.internal.MongoOperationPublisher.lambda$sinkToCallback$30(MongoOperationPublisher.java:550)
	at com.mongodb.reactivestreams.client.internal.OperationExecutorImpl.lambda$execute$2(OperationExecutorImpl.java:73)
	at com.mongodb.internal.async.ErrorHandlingResultCallback.onResult(ErrorHandlingResultCallback.java:48)
	at com.mongodb.internal.operation.FindOperation$3.onResult(FindOperation.java:755)
	at com.mongodb.internal.operation.OperationHelper$ReferenceCountedReleasingWrappedCallback.onResult(OperationHelper.java:532)
	at com.mongodb.internal.operation.CommandOperationHelper$10.onResult(CommandOperationHelper.java:483)
	at com.mongodb.internal.async.ErrorHandlingResultCallback.onResult(ErrorHandlingResultCallback.java:48)
	at com.mongodb.internal.connection.DefaultServer$DefaultServerProtocolExecutor$2.onResult(DefaultServer.java:286)
	at com.mongodb.internal.async.ErrorHandlingResultCallback.onResult(ErrorHandlingResultCallback.java:48)
	at com.mongodb.internal.connection.CommandProtocolImpl$1.onResult(CommandProtocolImpl.java:84)
	at com.mongodb.internal.connection.DefaultConnectionPool$PooledConnection$2.onResult(DefaultConnectionPool.java:530)
	at com.mongodb.internal.connection.UsageTrackingInternalConnection$2.onResult(UsageTrackingInternalConnection.java:142)
	at com.mongodb.internal.async.ErrorHandlingResultCallback.onResult(ErrorHandlingResultCallback.java:48)
	at com.mongodb.internal.connection.InternalStreamConnection$2$1.onResult(InternalStreamConnection.java:462)
	at com.mongodb.internal.connection.InternalStreamConnection$2$1.onResult(InternalStreamConnection.java:439)
	at com.mongodb.internal.connection.InternalStreamConnection$MessageHeaderCallback$MessageCallback.onResult(InternalStreamConnection.java:744)
	at com.mongodb.internal.connection.InternalStreamConnection$MessageHeaderCallback$MessageCallback.onResult(InternalStreamConnection.java:711)
	at com.mongodb.internal.connection.InternalStreamConnection$5.completed(InternalStreamConnection.java:581)
	at com.mongodb.internal.connection.InternalStreamConnection$5.completed(InternalStreamConnection.java:578)
	at com.mongodb.connection.netty.NettyStream.readAsync(NettyStream.java:322)
	at com.mongodb.connection.netty.NettyStream.readAsync(NettyStream.java:269)
	at com.mongodb.internal.connection.InternalStreamConnection.readAsync(InternalStreamConnection.java:578)
	at com.mongodb.internal.connection.InternalStreamConnection.access$1100(InternalStreamConnection.java:78)
	at com.mongodb.internal.connection.InternalStreamConnection$MessageHeaderCallback.onResult(InternalStreamConnection.java:701)
	at com.mongodb.internal.connection.InternalStreamConnection$MessageHeaderCallback.onResult(InternalStreamConnection.java:686)
	at com.mongodb.internal.connection.InternalStreamConnection$5.completed(InternalStreamConnection.java:581)
	at com.mongodb.internal.connection.InternalStreamConnection$5.completed(InternalStreamConnection.java:578)
	at com.mongodb.connection.netty.NettyStream.readAsync(NettyStream.java:322)
	at com.mongodb.connection.netty.NettyStream.handleReadResponse(NettyStream.java:350)
	at com.mongodb.connection.netty.NettyStream.access$1200(NettyStream.java:104)
	at com.mongodb.connection.netty.NettyStream$InboundBufferHandler.channelRead0(NettyStream.java:409)
	at com.mongodb.connection.netty.NettyStream$InboundBufferHandler.channelRead0(NettyStream.java:406)
	at io.netty.channel.SimpleChannelInboundHandler.channelRead(SimpleChannelInboundHandler.java:99)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:379)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:365)
	at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:357)
	at io.netty.channel.DefaultChannelPipeline$HeadContext.channelRead(DefaultChannelPipeline.java:1410)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:379)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:365)
	at io.netty.channel.DefaultChannelPipeline.fireChannelRead(DefaultChannelPipeline.java:919)
	at io.netty.channel.nio.AbstractNioByteChannel$NioByteUnsafe.read(AbstractNioByteChannel.java:166)
	at io.netty.channel.nio.NioEventLoop.processSelectedKey(NioEventLoop.java:719)
	at io.netty.channel.nio.NioEventLoop.processSelectedKeysOptimized(NioEventLoop.java:655)
	at io.netty.channel.nio.NioEventLoop.processSelectedKeys(NioEventLoop.java:581)
	at io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:493)
	at io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:989)
	at io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)
	at io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)
	at java.lang.Thread.run(Thread.java:748)
2021-07-19 19:02:17,530 DEBUG [nioEventLoopGroup-3-3] org.springframework.core.log.CompositeLog : [4147b1bf-2, L:/0:0:0:0:0:0:0:1:8090 - R:/0:0:0:0:0:0:0:1:60904] Encoding [{timestamp=Mon Jul 19 19:02:17 COT 2021, path=/customer, status=500, error=Internal Server Error, re (truncated)...]
2021-07-19 19:02:17,531 DEBUG [reactor-http-nio-3] org.springframework.core.log.LogFormatUtils : [4147b1bf-2, L:/0:0:0:0:0:0:0:1:8090 - R:/0:0:0:0:0:0:0:1:60904] Completed 500 INTERNAL_SERVER_ERROR
2021-07-19 19:02:20,565 DEBUG [reactor-http-nio-3] org.springframework.core.log.LogFormatUtils : [4147b1bf-3, L:/0:0:0:0:0:0:0:1:8090 - R:/0:0:0:0:0:0:0:1:60904] HTTP GET "/customer"
2021-07-19 19:02:20,566 DEBUG [reactor-http-nio-3] org.springframework.web.reactive.handler.AbstractHandlerMapping : [4147b1bf-3, L:/0:0:0:0:0:0:0:1:8090 - R:/0:0:0:0:0:0:0:1:60904] Mapped to com.bank.manage.customer.controller.CustomerController#getAllCustomers()
2021-07-19 19:02:20,567 INFO [reactor-http-nio-3] com.bank.manage.customer.controller.CustomerController :  EndPoit get by all customers {} 
2021-07-19 19:02:20,568 DEBUG [reactor-http-nio-3] org.springframework.web.reactive.result.HandlerResultHandlerSupport : [4147b1bf-3, L:/0:0:0:0:0:0:0:1:8090 - R:/0:0:0:0:0:0:0:1:60904] Found 'Content-Type:application/json' in response
2021-07-19 19:02:20,568 DEBUG [reactor-http-nio-3] org.springframework.web.reactive.result.method.annotation.AbstractMessageWriterResultHandler : [4147b1bf-3, L:/0:0:0:0:0:0:0:1:8090 - R:/0:0:0:0:0:0:0:1:60904] 0..N [com.bank.manage.customer.persistence.entity.Customer]
2021-07-19 19:02:20,574 DEBUG [nioEventLoopGroup-3-3] org.springframework.core.log.CompositeLog : [4147b1bf-3, L:/0:0:0:0:0:0:0:1:8090 - R:/0:0:0:0:0:0:0:1:60904] Resolved [ConversionFailedException: Failed to convert from type [java.lang.Double] to type [java.lang.Integer] for value '9.89898968968E11'; nested exception is java.lang.IllegalArgumentException: Could not convert number [9.89898968968E11] of type [java.lang.Double] to target class [java.lang.Integer]: overflow] for HTTP GET /customer
2021-07-19 19:02:20,575 ERROR [nioEventLoopGroup-3-3] org.springframework.core.log.CompositeLog : [4147b1bf-3, L:/0:0:0:0:0:0:0:1:8090 - R:/0:0:0:0:0:0:0:1:60904]  500 Server Error for HTTP GET "/customer"
org.springframework.core.convert.ConversionFailedException: Failed to convert from type [java.lang.Double] to type [java.lang.Integer] for value '9.89898968968E11'; nested exception is java.lang.IllegalArgumentException: Could not convert number [9.89898968968E11] of type [java.lang.Double] to target class [java.lang.Integer]: overflow
	at org.springframework.core.convert.support.ConversionUtils.invokeConverter(ConversionUtils.java:47)
	Suppressed: reactor.core.publisher.FluxOnAssembly$OnAssemblyException: 
Error has been observed at the following site(s):
	|_ checkpoint ⇢ Handler com.bank.manage.customer.controller.CustomerController#getAllCustomers() [DispatcherHandler]
	|_ checkpoint ⇢ org.springframework.boot.actuate.metrics.web.reactive.server.MetricsWebFilter [DefaultWebFilterChain]
	|_ checkpoint ⇢ HTTP GET "/customer" [ExceptionHandlingWebHandler]
Stack trace:
		at org.springframework.core.convert.support.ConversionUtils.invokeConverter(ConversionUtils.java:47)
		at org.springframework.core.convert.support.GenericConversionService.convert(GenericConversionService.java:192)
		at org.springframework.core.convert.support.GenericConversionService.convert(GenericConversionService.java:175)
		at org.springframework.data.mongodb.core.convert.MappingMongoConverter.doConvert(MappingMongoConverter.java:1547)
		at org.springframework.data.mongodb.core.convert.MappingMongoConverter.doConvert(MappingMongoConverter.java:1540)
		at org.springframework.data.mongodb.core.convert.MappingMongoConverter.getPotentiallyConvertedSimpleRead(MappingMongoConverter.java:1060)
		at org.springframework.data.mongodb.core.convert.MappingMongoConverter.getPotentiallyConvertedSimpleRead(MappingMongoConverter.java:1038)
		at org.springframework.data.mongodb.core.convert.MappingMongoConverter$ConversionContext.convert(MappingMongoConverter.java:1919)
		at org.springframework.data.mongodb.core.convert.MappingMongoConverter$MongoDbPropertyValueProvider.getPropertyValue(MappingMongoConverter.java:1641)
		at org.springframework.data.mongodb.core.convert.MappingMongoConverter.readProperties(MappingMongoConverter.java:481)
		at org.springframework.data.mongodb.core.convert.MappingMongoConverter.populateProperties(MappingMongoConverter.java:394)
		at org.springframework.data.mongodb.core.convert.MappingMongoConverter.read(MappingMongoConverter.java:372)
		at org.springframework.data.mongodb.core.convert.MappingMongoConverter.readDocument(MappingMongoConverter.java:342)
		at org.springframework.data.mongodb.core.convert.MappingMongoConverter.read(MappingMongoConverter.java:278)
		at org.springframework.data.mongodb.core.convert.MappingMongoConverter.read(MappingMongoConverter.java:274)
		at org.springframework.data.mongodb.core.convert.MappingMongoConverter.read(MappingMongoConverter.java:102)
		at org.springframework.data.mongodb.core.ReactiveMongoTemplate$ReadDocumentCallback.doWith(ReactiveMongoTemplate.java:3155)
		at reactor.core.publisher.FluxConcatMap$ConcatMapImmediate.drain(FluxConcatMap.java:374)
		at reactor.core.publisher.FluxConcatMap$ConcatMapImmediate.onNext(FluxConcatMap.java:250)
		at reactor.core.publisher.FluxCreate$BufferAsyncSink.drain(FluxCreate.java:793)
		at reactor.core.publisher.FluxCreate$BufferAsyncSink.next(FluxCreate.java:718)
		at reactor.core.publisher.FluxCreate$SerializedFluxSink.next(FluxCreate.java:154)
		at java.util.ArrayList.forEach(ArrayList.java:1259)
		at com.mongodb.reactivestreams.client.internal.BatchCursorFlux.lambda$recurseCursor$4(BatchCursorFlux.java:94)
		at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.onNext(MonoPeekTerminal.java:171)
		at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.onNext(MonoPeekTerminal.java:180)
		at reactor.core.publisher.FluxPeekFuseable$PeekConditionalSubscriber.onNext(FluxPeekFuseable.java:854)
		at reactor.core.publisher.MonoCreate$DefaultMonoSink.success(MonoCreate.java:160)
		at com.mongodb.reactivestreams.client.internal.MongoOperationPublisher.lambda$sinkToCallback$30(MongoOperationPublisher.java:550)
		at com.mongodb.internal.operation.AsyncQueryBatchCursor.next(AsyncQueryBatchCursor.java:207)
		at com.mongodb.internal.operation.AsyncQueryBatchCursor.next(AsyncQueryBatchCursor.java:146)
		at com.mongodb.reactivestreams.client.internal.BatchCursor.lambda$next$0(BatchCursor.java:35)
		at reactor.core.publisher.MonoCreate.subscribe(MonoCreate.java:57)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4150)
		at reactor.core.publisher.Mono.subscribeWith(Mono.java:4265)
		at reactor.core.publisher.Mono.subscribe(Mono.java:3982)
		at com.mongodb.reactivestreams.client.internal.BatchCursorFlux.recurseCursor(BatchCursorFlux.java:104)
		at com.mongodb.reactivestreams.client.internal.BatchCursorFlux.lambda$subscribe$0(BatchCursorFlux.java:56)
		at reactor.core.publisher.LambdaMonoSubscriber.onNext(LambdaMonoSubscriber.java:171)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onNext(FluxMapFuseable.java:127)
		at reactor.core.publisher.Operators$MonoSubscriber.complete(Operators.java:1815)
		at reactor.core.publisher.MonoFlatMap$FlatMapInner.onNext(MonoFlatMap.java:249)
		at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.onNext(MonoPeekTerminal.java:180)
		at reactor.core.publisher.MonoCreate$DefaultMonoSink.success(MonoCreate.java:160)
		at com.mongodb.reactivestreams.client.internal.MongoOperationPublisher.lambda$sinkToCallback$30(MongoOperationPublisher.java:550)
		at com.mongodb.reactivestreams.client.internal.OperationExecutorImpl.lambda$execute$2(OperationExecutorImpl.java:73)
		at com.mongodb.internal.async.ErrorHandlingResultCallback.onResult(ErrorHandlingResultCallback.java:48)
		at com.mongodb.internal.operation.FindOperation$3.onResult(FindOperation.java:755)
		at com.mongodb.internal.operation.OperationHelper$ReferenceCountedReleasingWrappedCallback.onResult(OperationHelper.java:532)
		at com.mongodb.internal.operation.CommandOperationHelper$10.onResult(CommandOperationHelper.java:483)
		at com.mongodb.internal.async.ErrorHandlingResultCallback.onResult(ErrorHandlingResultCallback.java:48)
		at com.mongodb.internal.connection.DefaultServer$DefaultServerProtocolExecutor$2.onResult(DefaultServer.java:286)
		at com.mongodb.internal.async.ErrorHandlingResultCallback.onResult(ErrorHandlingResultCallback.java:48)
		at com.mongodb.internal.connection.CommandProtocolImpl$1.onResult(CommandProtocolImpl.java:84)
		at com.mongodb.internal.connection.DefaultConnectionPool$PooledConnection$2.onResult(DefaultConnectionPool.java:530)
		at com.mongodb.internal.connection.UsageTrackingInternalConnection$2.onResult(UsageTrackingInternalConnection.java:142)
		at com.mongodb.internal.async.ErrorHandlingResultCallback.onResult(ErrorHandlingResultCallback.java:48)
		at com.mongodb.internal.connection.InternalStreamConnection$2$1.onResult(InternalStreamConnection.java:462)
		at com.mongodb.internal.connection.InternalStreamConnection$2$1.onResult(InternalStreamConnection.java:439)
		at com.mongodb.internal.connection.InternalStreamConnection$MessageHeaderCallback$MessageCallback.onResult(InternalStreamConnection.java:744)
		at com.mongodb.internal.connection.InternalStreamConnection$MessageHeaderCallback$MessageCallback.onResult(InternalStreamConnection.java:711)
		at com.mongodb.internal.connection.InternalStreamConnection$5.completed(InternalStreamConnection.java:581)
		at com.mongodb.internal.connection.InternalStreamConnection$5.completed(InternalStreamConnection.java:578)
		at com.mongodb.connection.netty.NettyStream.readAsync(NettyStream.java:322)
		at com.mongodb.connection.netty.NettyStream.readAsync(NettyStream.java:269)
		at com.mongodb.internal.connection.InternalStreamConnection.readAsync(InternalStreamConnection.java:578)
		at com.mongodb.internal.connection.InternalStreamConnection.access$1100(InternalStreamConnection.java:78)
		at com.mongodb.internal.connection.InternalStreamConnection$MessageHeaderCallback.onResult(InternalStreamConnection.java:701)
		at com.mongodb.internal.connection.InternalStreamConnection$MessageHeaderCallback.onResult(InternalStreamConnection.java:686)
		at com.mongodb.internal.connection.InternalStreamConnection$5.completed(InternalStreamConnection.java:581)
		at com.mongodb.internal.connection.InternalStreamConnection$5.completed(InternalStreamConnection.java:578)
		at com.mongodb.connection.netty.NettyStream.readAsync(NettyStream.java:322)
		at com.mongodb.connection.netty.NettyStream.handleReadResponse(NettyStream.java:350)
		at com.mongodb.connection.netty.NettyStream.access$1200(NettyStream.java:104)
		at com.mongodb.connection.netty.NettyStream$InboundBufferHandler.channelRead0(NettyStream.java:409)
		at com.mongodb.connection.netty.NettyStream$InboundBufferHandler.channelRead0(NettyStream.java:406)
		at io.netty.channel.SimpleChannelInboundHandler.channelRead(SimpleChannelInboundHandler.java:99)
		at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:379)
		at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:365)
		at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:357)
		at io.netty.channel.DefaultChannelPipeline$HeadContext.channelRead(DefaultChannelPipeline.java:1410)
		at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:379)
		at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:365)
		at io.netty.channel.DefaultChannelPipeline.fireChannelRead(DefaultChannelPipeline.java:919)
		at io.netty.channel.nio.AbstractNioByteChannel$NioByteUnsafe.read(AbstractNioByteChannel.java:166)
		at io.netty.channel.nio.NioEventLoop.processSelectedKey(NioEventLoop.java:719)
		at io.netty.channel.nio.NioEventLoop.processSelectedKeysOptimized(NioEventLoop.java:655)
		at io.netty.channel.nio.NioEventLoop.processSelectedKeys(NioEventLoop.java:581)
		at io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:493)
		at io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:989)
		at io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)
		at io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)
		at java.lang.Thread.run(Thread.java:748)
Caused by: java.lang.IllegalArgumentException: Could not convert number [9.89898968968E11] of type [java.lang.Double] to target class [java.lang.Integer]: overflow
	at org.springframework.util.NumberUtils.raiseOverflowException(NumberUtils.java:175)
	at org.springframework.util.NumberUtils.convertNumberToTargetClass(NumberUtils.java:108)
	at org.springframework.core.convert.support.NumberToNumberConverterFactory$NumberToNumber.convert(NumberToNumberConverterFactory.java:66)
	at org.springframework.core.convert.support.NumberToNumberConverterFactory$NumberToNumber.convert(NumberToNumberConverterFactory.java:56)
	at org.springframework.core.convert.support.GenericConversionService$ConverterFactoryAdapter.convert(GenericConversionService.java:437)
	at org.springframework.core.convert.support.ConversionUtils.invokeConverter(ConversionUtils.java:41)
	at org.springframework.core.convert.support.GenericConversionService.convert(GenericConversionService.java:192)
	at org.springframework.core.convert.support.GenericConversionService.convert(GenericConversionService.java:175)
	at org.springframework.data.mongodb.core.convert.MappingMongoConverter.doConvert(MappingMongoConverter.java:1547)
	at org.springframework.data.mongodb.core.convert.MappingMongoConverter.doConvert(MappingMongoConverter.java:1540)
	at org.springframework.data.mongodb.core.convert.MappingMongoConverter.getPotentiallyConvertedSimpleRead(MappingMongoConverter.java:1060)
	at org.springframework.data.mongodb.core.convert.MappingMongoConverter.getPotentiallyConvertedSimpleRead(MappingMongoConverter.java:1038)
	at org.springframework.data.mongodb.core.convert.MappingMongoConverter$ConversionContext.convert(MappingMongoConverter.java:1919)
	at org.springframework.data.mongodb.core.convert.MappingMongoConverter$MongoDbPropertyValueProvider.getPropertyValue(MappingMongoConverter.java:1641)
	at org.springframework.data.mongodb.core.convert.MappingMongoConverter.readProperties(MappingMongoConverter.java:481)
	at org.springframework.data.mongodb.core.convert.MappingMongoConverter.populateProperties(MappingMongoConverter.java:394)
	at org.springframework.data.mongodb.core.convert.MappingMongoConverter.read(MappingMongoConverter.java:372)
	at org.springframework.data.mongodb.core.convert.MappingMongoConverter.readDocument(MappingMongoConverter.java:342)
	at org.springframework.data.mongodb.core.convert.MappingMongoConverter.read(MappingMongoConverter.java:278)
	at org.springframework.data.mongodb.core.convert.MappingMongoConverter.read(MappingMongoConverter.java:274)
	at org.springframework.data.mongodb.core.convert.MappingMongoConverter.read(MappingMongoConverter.java:102)
	at org.springframework.data.mongodb.core.ReactiveMongoTemplate$ReadDocumentCallback.doWith(ReactiveMongoTemplate.java:3155)
	at reactor.core.publisher.FluxConcatMap$ConcatMapImmediate.drain(FluxConcatMap.java:374)
	at reactor.core.publisher.FluxConcatMap$ConcatMapImmediate.onNext(FluxConcatMap.java:250)
	at reactor.core.publisher.FluxCreate$BufferAsyncSink.drain(FluxCreate.java:793)
	at reactor.core.publisher.FluxCreate$BufferAsyncSink.next(FluxCreate.java:718)
	at reactor.core.publisher.FluxCreate$SerializedFluxSink.next(FluxCreate.java:154)
	at java.util.ArrayList.forEach(ArrayList.java:1259)
	at com.mongodb.reactivestreams.client.internal.BatchCursorFlux.lambda$recurseCursor$4(BatchCursorFlux.java:94)
	at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.onNext(MonoPeekTerminal.java:171)
	at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.onNext(MonoPeekTerminal.java:180)
	at reactor.core.publisher.FluxPeekFuseable$PeekConditionalSubscriber.onNext(FluxPeekFuseable.java:854)
	at reactor.core.publisher.MonoCreate$DefaultMonoSink.success(MonoCreate.java:160)
	at com.mongodb.reactivestreams.client.internal.MongoOperationPublisher.lambda$sinkToCallback$30(MongoOperationPublisher.java:550)
	at com.mongodb.internal.operation.AsyncQueryBatchCursor.next(AsyncQueryBatchCursor.java:207)
	at com.mongodb.internal.operation.AsyncQueryBatchCursor.next(AsyncQueryBatchCursor.java:146)
	at com.mongodb.reactivestreams.client.internal.BatchCursor.lambda$next$0(BatchCursor.java:35)
	at reactor.core.publisher.MonoCreate.subscribe(MonoCreate.java:57)
	at reactor.core.publisher.Mono.subscribe(Mono.java:4150)
	at reactor.core.publisher.Mono.subscribeWith(Mono.java:4265)
	at reactor.core.publisher.Mono.subscribe(Mono.java:3982)
	at com.mongodb.reactivestreams.client.internal.BatchCursorFlux.recurseCursor(BatchCursorFlux.java:104)
	at com.mongodb.reactivestreams.client.internal.BatchCursorFlux.lambda$subscribe$0(BatchCursorFlux.java:56)
	at reactor.core.publisher.LambdaMonoSubscriber.onNext(LambdaMonoSubscriber.java:171)
	at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onNext(FluxMapFuseable.java:127)
	at reactor.core.publisher.Operators$MonoSubscriber.complete(Operators.java:1815)
	at reactor.core.publisher.MonoFlatMap$FlatMapInner.onNext(MonoFlatMap.java:249)
	at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.onNext(MonoPeekTerminal.java:180)
	at reactor.core.publisher.MonoCreate$DefaultMonoSink.success(MonoCreate.java:160)
	at com.mongodb.reactivestreams.client.internal.MongoOperationPublisher.lambda$sinkToCallback$30(MongoOperationPublisher.java:550)
	at com.mongodb.reactivestreams.client.internal.OperationExecutorImpl.lambda$execute$2(OperationExecutorImpl.java:73)
	at com.mongodb.internal.async.ErrorHandlingResultCallback.onResult(ErrorHandlingResultCallback.java:48)
	at com.mongodb.internal.operation.FindOperation$3.onResult(FindOperation.java:755)
	at com.mongodb.internal.operation.OperationHelper$ReferenceCountedReleasingWrappedCallback.onResult(OperationHelper.java:532)
	at com.mongodb.internal.operation.CommandOperationHelper$10.onResult(CommandOperationHelper.java:483)
	at com.mongodb.internal.async.ErrorHandlingResultCallback.onResult(ErrorHandlingResultCallback.java:48)
	at com.mongodb.internal.connection.DefaultServer$DefaultServerProtocolExecutor$2.onResult(DefaultServer.java:286)
	at com.mongodb.internal.async.ErrorHandlingResultCallback.onResult(ErrorHandlingResultCallback.java:48)
	at com.mongodb.internal.connection.CommandProtocolImpl$1.onResult(CommandProtocolImpl.java:84)
	at com.mongodb.internal.connection.DefaultConnectionPool$PooledConnection$2.onResult(DefaultConnectionPool.java:530)
	at com.mongodb.internal.connection.UsageTrackingInternalConnection$2.onResult(UsageTrackingInternalConnection.java:142)
	at com.mongodb.internal.async.ErrorHandlingResultCallback.onResult(ErrorHandlingResultCallback.java:48)
	at com.mongodb.internal.connection.InternalStreamConnection$2$1.onResult(InternalStreamConnection.java:462)
	at com.mongodb.internal.connection.InternalStreamConnection$2$1.onResult(InternalStreamConnection.java:439)
	at com.mongodb.internal.connection.InternalStreamConnection$MessageHeaderCallback$MessageCallback.onResult(InternalStreamConnection.java:744)
	at com.mongodb.internal.connection.InternalStreamConnection$MessageHeaderCallback$MessageCallback.onResult(InternalStreamConnection.java:711)
	at com.mongodb.internal.connection.InternalStreamConnection$5.completed(InternalStreamConnection.java:581)
	at com.mongodb.internal.connection.InternalStreamConnection$5.completed(InternalStreamConnection.java:578)
	at com.mongodb.connection.netty.NettyStream.readAsync(NettyStream.java:322)
	at com.mongodb.connection.netty.NettyStream.readAsync(NettyStream.java:269)
	at com.mongodb.internal.connection.InternalStreamConnection.readAsync(InternalStreamConnection.java:578)
	at com.mongodb.internal.connection.InternalStreamConnection.access$1100(InternalStreamConnection.java:78)
	at com.mongodb.internal.connection.InternalStreamConnection$MessageHeaderCallback.onResult(InternalStreamConnection.java:701)
	at com.mongodb.internal.connection.InternalStreamConnection$MessageHeaderCallback.onResult(InternalStreamConnection.java:686)
	at com.mongodb.internal.connection.InternalStreamConnection$5.completed(InternalStreamConnection.java:581)
	at com.mongodb.internal.connection.InternalStreamConnection$5.completed(InternalStreamConnection.java:578)
	at com.mongodb.connection.netty.NettyStream.readAsync(NettyStream.java:322)
	at com.mongodb.connection.netty.NettyStream.handleReadResponse(NettyStream.java:350)
	at com.mongodb.connection.netty.NettyStream.access$1200(NettyStream.java:104)
	at com.mongodb.connection.netty.NettyStream$InboundBufferHandler.channelRead0(NettyStream.java:409)
	at com.mongodb.connection.netty.NettyStream$InboundBufferHandler.channelRead0(NettyStream.java:406)
	at io.netty.channel.SimpleChannelInboundHandler.channelRead(SimpleChannelInboundHandler.java:99)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:379)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:365)
	at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:357)
	at io.netty.channel.DefaultChannelPipeline$HeadContext.channelRead(DefaultChannelPipeline.java:1410)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:379)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:365)
	at io.netty.channel.DefaultChannelPipeline.fireChannelRead(DefaultChannelPipeline.java:919)
	at io.netty.channel.nio.AbstractNioByteChannel$NioByteUnsafe.read(AbstractNioByteChannel.java:166)
	at io.netty.channel.nio.NioEventLoop.processSelectedKey(NioEventLoop.java:719)
	at io.netty.channel.nio.NioEventLoop.processSelectedKeysOptimized(NioEventLoop.java:655)
	at io.netty.channel.nio.NioEventLoop.processSelectedKeys(NioEventLoop.java:581)
	at io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:493)
	at io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:989)
	at io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)
	at io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)
	at java.lang.Thread.run(Thread.java:748)
2021-07-19 19:02:20,578 DEBUG [nioEventLoopGroup-3-3] org.springframework.core.log.CompositeLog : [4147b1bf-3, L:/0:0:0:0:0:0:0:1:8090 - R:/0:0:0:0:0:0:0:1:60904] Encoding [{timestamp=Mon Jul 19 19:02:20 COT 2021, path=/customer, status=500, error=Internal Server Error, re (truncated)...]
2021-07-19 19:02:20,580 DEBUG [reactor-http-nio-3] org.springframework.core.log.LogFormatUtils : [4147b1bf-3, L:/0:0:0:0:0:0:0:1:8090 - R:/0:0:0:0:0:0:0:1:60904] Completed 500 INTERNAL_SERVER_ERROR
2021-07-19 19:02:22,355 DEBUG [reactor-http-nio-3] org.springframework.core.log.LogFormatUtils : [4147b1bf-4, L:/0:0:0:0:0:0:0:1:8090 - R:/0:0:0:0:0:0:0:1:60904] HTTP GET "/customer"
2021-07-19 19:02:22,356 DEBUG [reactor-http-nio-3] org.springframework.web.reactive.handler.AbstractHandlerMapping : [4147b1bf-4, L:/0:0:0:0:0:0:0:1:8090 - R:/0:0:0:0:0:0:0:1:60904] Mapped to com.bank.manage.customer.controller.CustomerController#getAllCustomers()
2021-07-19 19:02:22,356 INFO [reactor-http-nio-3] com.bank.manage.customer.controller.CustomerController :  EndPoit get by all customers {} 
2021-07-19 19:02:22,357 DEBUG [reactor-http-nio-3] org.springframework.web.reactive.result.HandlerResultHandlerSupport : [4147b1bf-4, L:/0:0:0:0:0:0:0:1:8090 - R:/0:0:0:0:0:0:0:1:60904] Found 'Content-Type:application/json' in response
2021-07-19 19:02:22,357 DEBUG [reactor-http-nio-3] org.springframework.web.reactive.result.method.annotation.AbstractMessageWriterResultHandler : [4147b1bf-4, L:/0:0:0:0:0:0:0:1:8090 - R:/0:0:0:0:0:0:0:1:60904] 0..N [com.bank.manage.customer.persistence.entity.Customer]
2021-07-19 19:02:22,363 DEBUG [nioEventLoopGroup-3-3] org.springframework.core.log.CompositeLog : [4147b1bf-4, L:/0:0:0:0:0:0:0:1:8090 - R:/0:0:0:0:0:0:0:1:60904] Resolved [ConversionFailedException: Failed to convert from type [java.lang.Double] to type [java.lang.Integer] for value '9.89898968968E11'; nested exception is java.lang.IllegalArgumentException: Could not convert number [9.89898968968E11] of type [java.lang.Double] to target class [java.lang.Integer]: overflow] for HTTP GET /customer
2021-07-19 19:02:22,364 ERROR [nioEventLoopGroup-3-3] org.springframework.core.log.CompositeLog : [4147b1bf-4, L:/0:0:0:0:0:0:0:1:8090 - R:/0:0:0:0:0:0:0:1:60904]  500 Server Error for HTTP GET "/customer"
org.springframework.core.convert.ConversionFailedException: Failed to convert from type [java.lang.Double] to type [java.lang.Integer] for value '9.89898968968E11'; nested exception is java.lang.IllegalArgumentException: Could not convert number [9.89898968968E11] of type [java.lang.Double] to target class [java.lang.Integer]: overflow
	at org.springframework.core.convert.support.ConversionUtils.invokeConverter(ConversionUtils.java:47)
	Suppressed: reactor.core.publisher.FluxOnAssembly$OnAssemblyException: 
Error has been observed at the following site(s):
	|_ checkpoint ⇢ Handler com.bank.manage.customer.controller.CustomerController#getAllCustomers() [DispatcherHandler]
	|_ checkpoint ⇢ org.springframework.boot.actuate.metrics.web.reactive.server.MetricsWebFilter [DefaultWebFilterChain]
	|_ checkpoint ⇢ HTTP GET "/customer" [ExceptionHandlingWebHandler]
Stack trace:
		at org.springframework.core.convert.support.ConversionUtils.invokeConverter(ConversionUtils.java:47)
		at org.springframework.core.convert.support.GenericConversionService.convert(GenericConversionService.java:192)
		at org.springframework.core.convert.support.GenericConversionService.convert(GenericConversionService.java:175)
		at org.springframework.data.mongodb.core.convert.MappingMongoConverter.doConvert(MappingMongoConverter.java:1547)
		at org.springframework.data.mongodb.core.convert.MappingMongoConverter.doConvert(MappingMongoConverter.java:1540)
		at org.springframework.data.mongodb.core.convert.MappingMongoConverter.getPotentiallyConvertedSimpleRead(MappingMongoConverter.java:1060)
		at org.springframework.data.mongodb.core.convert.MappingMongoConverter.getPotentiallyConvertedSimpleRead(MappingMongoConverter.java:1038)
		at org.springframework.data.mongodb.core.convert.MappingMongoConverter$ConversionContext.convert(MappingMongoConverter.java:1919)
		at org.springframework.data.mongodb.core.convert.MappingMongoConverter$MongoDbPropertyValueProvider.getPropertyValue(MappingMongoConverter.java:1641)
		at org.springframework.data.mongodb.core.convert.MappingMongoConverter.readProperties(MappingMongoConverter.java:481)
		at org.springframework.data.mongodb.core.convert.MappingMongoConverter.populateProperties(MappingMongoConverter.java:394)
		at org.springframework.data.mongodb.core.convert.MappingMongoConverter.read(MappingMongoConverter.java:372)
		at org.springframework.data.mongodb.core.convert.MappingMongoConverter.readDocument(MappingMongoConverter.java:342)
		at org.springframework.data.mongodb.core.convert.MappingMongoConverter.read(MappingMongoConverter.java:278)
		at org.springframework.data.mongodb.core.convert.MappingMongoConverter.read(MappingMongoConverter.java:274)
		at org.springframework.data.mongodb.core.convert.MappingMongoConverter.read(MappingMongoConverter.java:102)
		at org.springframework.data.mongodb.core.ReactiveMongoTemplate$ReadDocumentCallback.doWith(ReactiveMongoTemplate.java:3155)
		at reactor.core.publisher.FluxConcatMap$ConcatMapImmediate.drain(FluxConcatMap.java:374)
		at reactor.core.publisher.FluxConcatMap$ConcatMapImmediate.onNext(FluxConcatMap.java:250)
		at reactor.core.publisher.FluxCreate$BufferAsyncSink.drain(FluxCreate.java:793)
		at reactor.core.publisher.FluxCreate$BufferAsyncSink.next(FluxCreate.java:718)
		at reactor.core.publisher.FluxCreate$SerializedFluxSink.next(FluxCreate.java:154)
		at java.util.ArrayList.forEach(ArrayList.java:1259)
		at com.mongodb.reactivestreams.client.internal.BatchCursorFlux.lambda$recurseCursor$4(BatchCursorFlux.java:94)
		at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.onNext(MonoPeekTerminal.java:171)
		at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.onNext(MonoPeekTerminal.java:180)
		at reactor.core.publisher.FluxPeekFuseable$PeekConditionalSubscriber.onNext(FluxPeekFuseable.java:854)
		at reactor.core.publisher.MonoCreate$DefaultMonoSink.success(MonoCreate.java:160)
		at com.mongodb.reactivestreams.client.internal.MongoOperationPublisher.lambda$sinkToCallback$30(MongoOperationPublisher.java:550)
		at com.mongodb.internal.operation.AsyncQueryBatchCursor.next(AsyncQueryBatchCursor.java:207)
		at com.mongodb.internal.operation.AsyncQueryBatchCursor.next(AsyncQueryBatchCursor.java:146)
		at com.mongodb.reactivestreams.client.internal.BatchCursor.lambda$next$0(BatchCursor.java:35)
		at reactor.core.publisher.MonoCreate.subscribe(MonoCreate.java:57)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4150)
		at reactor.core.publisher.Mono.subscribeWith(Mono.java:4265)
		at reactor.core.publisher.Mono.subscribe(Mono.java:3982)
		at com.mongodb.reactivestreams.client.internal.BatchCursorFlux.recurseCursor(BatchCursorFlux.java:104)
		at com.mongodb.reactivestreams.client.internal.BatchCursorFlux.lambda$subscribe$0(BatchCursorFlux.java:56)
		at reactor.core.publisher.LambdaMonoSubscriber.onNext(LambdaMonoSubscriber.java:171)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onNext(FluxMapFuseable.java:127)
		at reactor.core.publisher.Operators$MonoSubscriber.complete(Operators.java:1815)
		at reactor.core.publisher.MonoFlatMap$FlatMapInner.onNext(MonoFlatMap.java:249)
		at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.onNext(MonoPeekTerminal.java:180)
		at reactor.core.publisher.MonoCreate$DefaultMonoSink.success(MonoCreate.java:160)
		at com.mongodb.reactivestreams.client.internal.MongoOperationPublisher.lambda$sinkToCallback$30(MongoOperationPublisher.java:550)
		at com.mongodb.reactivestreams.client.internal.OperationExecutorImpl.lambda$execute$2(OperationExecutorImpl.java:73)
		at com.mongodb.internal.async.ErrorHandlingResultCallback.onResult(ErrorHandlingResultCallback.java:48)
		at com.mongodb.internal.operation.FindOperation$3.onResult(FindOperation.java:755)
		at com.mongodb.internal.operation.OperationHelper$ReferenceCountedReleasingWrappedCallback.onResult(OperationHelper.java:532)
		at com.mongodb.internal.operation.CommandOperationHelper$10.onResult(CommandOperationHelper.java:483)
		at com.mongodb.internal.async.ErrorHandlingResultCallback.onResult(ErrorHandlingResultCallback.java:48)
		at com.mongodb.internal.connection.DefaultServer$DefaultServerProtocolExecutor$2.onResult(DefaultServer.java:286)
		at com.mongodb.internal.async.ErrorHandlingResultCallback.onResult(ErrorHandlingResultCallback.java:48)
		at com.mongodb.internal.connection.CommandProtocolImpl$1.onResult(CommandProtocolImpl.java:84)
		at com.mongodb.internal.connection.DefaultConnectionPool$PooledConnection$2.onResult(DefaultConnectionPool.java:530)
		at com.mongodb.internal.connection.UsageTrackingInternalConnection$2.onResult(UsageTrackingInternalConnection.java:142)
		at com.mongodb.internal.async.ErrorHandlingResultCallback.onResult(ErrorHandlingResultCallback.java:48)
		at com.mongodb.internal.connection.InternalStreamConnection$2$1.onResult(InternalStreamConnection.java:462)
		at com.mongodb.internal.connection.InternalStreamConnection$2$1.onResult(InternalStreamConnection.java:439)
		at com.mongodb.internal.connection.InternalStreamConnection$MessageHeaderCallback$MessageCallback.onResult(InternalStreamConnection.java:744)
		at com.mongodb.internal.connection.InternalStreamConnection$MessageHeaderCallback$MessageCallback.onResult(InternalStreamConnection.java:711)
		at com.mongodb.internal.connection.InternalStreamConnection$5.completed(InternalStreamConnection.java:581)
		at com.mongodb.internal.connection.InternalStreamConnection$5.completed(InternalStreamConnection.java:578)
		at com.mongodb.connection.netty.NettyStream.readAsync(NettyStream.java:322)
		at com.mongodb.connection.netty.NettyStream.readAsync(NettyStream.java:269)
		at com.mongodb.internal.connection.InternalStreamConnection.readAsync(InternalStreamConnection.java:578)
		at com.mongodb.internal.connection.InternalStreamConnection.access$1100(InternalStreamConnection.java:78)
		at com.mongodb.internal.connection.InternalStreamConnection$MessageHeaderCallback.onResult(InternalStreamConnection.java:701)
		at com.mongodb.internal.connection.InternalStreamConnection$MessageHeaderCallback.onResult(InternalStreamConnection.java:686)
		at com.mongodb.internal.connection.InternalStreamConnection$5.completed(InternalStreamConnection.java:581)
		at com.mongodb.internal.connection.InternalStreamConnection$5.completed(InternalStreamConnection.java:578)
		at com.mongodb.connection.netty.NettyStream.readAsync(NettyStream.java:322)
		at com.mongodb.connection.netty.NettyStream.handleReadResponse(NettyStream.java:350)
		at com.mongodb.connection.netty.NettyStream.access$1200(NettyStream.java:104)
		at com.mongodb.connection.netty.NettyStream$InboundBufferHandler.channelRead0(NettyStream.java:409)
		at com.mongodb.connection.netty.NettyStream$InboundBufferHandler.channelRead0(NettyStream.java:406)
		at io.netty.channel.SimpleChannelInboundHandler.channelRead(SimpleChannelInboundHandler.java:99)
		at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:379)
		at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:365)
		at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:357)
		at io.netty.channel.DefaultChannelPipeline$HeadContext.channelRead(DefaultChannelPipeline.java:1410)
		at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:379)
		at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:365)
		at io.netty.channel.DefaultChannelPipeline.fireChannelRead(DefaultChannelPipeline.java:919)
		at io.netty.channel.nio.AbstractNioByteChannel$NioByteUnsafe.read(AbstractNioByteChannel.java:166)
		at io.netty.channel.nio.NioEventLoop.processSelectedKey(NioEventLoop.java:719)
		at io.netty.channel.nio.NioEventLoop.processSelectedKeysOptimized(NioEventLoop.java:655)
		at io.netty.channel.nio.NioEventLoop.processSelectedKeys(NioEventLoop.java:581)
		at io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:493)
		at io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:989)
		at io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)
		at io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)
		at java.lang.Thread.run(Thread.java:748)
Caused by: java.lang.IllegalArgumentException: Could not convert number [9.89898968968E11] of type [java.lang.Double] to target class [java.lang.Integer]: overflow
	at org.springframework.util.NumberUtils.raiseOverflowException(NumberUtils.java:175)
	at org.springframework.util.NumberUtils.convertNumberToTargetClass(NumberUtils.java:108)
	at org.springframework.core.convert.support.NumberToNumberConverterFactory$NumberToNumber.convert(NumberToNumberConverterFactory.java:66)
	at org.springframework.core.convert.support.NumberToNumberConverterFactory$NumberToNumber.convert(NumberToNumberConverterFactory.java:56)
	at org.springframework.core.convert.support.GenericConversionService$ConverterFactoryAdapter.convert(GenericConversionService.java:437)
	at org.springframework.core.convert.support.ConversionUtils.invokeConverter(ConversionUtils.java:41)
	at org.springframework.core.convert.support.GenericConversionService.convert(GenericConversionService.java:192)
	at org.springframework.core.convert.support.GenericConversionService.convert(GenericConversionService.java:175)
	at org.springframework.data.mongodb.core.convert.MappingMongoConverter.doConvert(MappingMongoConverter.java:1547)
	at org.springframework.data.mongodb.core.convert.MappingMongoConverter.doConvert(MappingMongoConverter.java:1540)
	at org.springframework.data.mongodb.core.convert.MappingMongoConverter.getPotentiallyConvertedSimpleRead(MappingMongoConverter.java:1060)
	at org.springframework.data.mongodb.core.convert.MappingMongoConverter.getPotentiallyConvertedSimpleRead(MappingMongoConverter.java:1038)
	at org.springframework.data.mongodb.core.convert.MappingMongoConverter$ConversionContext.convert(MappingMongoConverter.java:1919)
	at org.springframework.data.mongodb.core.convert.MappingMongoConverter$MongoDbPropertyValueProvider.getPropertyValue(MappingMongoConverter.java:1641)
	at org.springframework.data.mongodb.core.convert.MappingMongoConverter.readProperties(MappingMongoConverter.java:481)
	at org.springframework.data.mongodb.core.convert.MappingMongoConverter.populateProperties(MappingMongoConverter.java:394)
	at org.springframework.data.mongodb.core.convert.MappingMongoConverter.read(MappingMongoConverter.java:372)
	at org.springframework.data.mongodb.core.convert.MappingMongoConverter.readDocument(MappingMongoConverter.java:342)
	at org.springframework.data.mongodb.core.convert.MappingMongoConverter.read(MappingMongoConverter.java:278)
	at org.springframework.data.mongodb.core.convert.MappingMongoConverter.read(MappingMongoConverter.java:274)
	at org.springframework.data.mongodb.core.convert.MappingMongoConverter.read(MappingMongoConverter.java:102)
	at org.springframework.data.mongodb.core.ReactiveMongoTemplate$ReadDocumentCallback.doWith(ReactiveMongoTemplate.java:3155)
	at reactor.core.publisher.FluxConcatMap$ConcatMapImmediate.drain(FluxConcatMap.java:374)
	at reactor.core.publisher.FluxConcatMap$ConcatMapImmediate.onNext(FluxConcatMap.java:250)
	at reactor.core.publisher.FluxCreate$BufferAsyncSink.drain(FluxCreate.java:793)
	at reactor.core.publisher.FluxCreate$BufferAsyncSink.next(FluxCreate.java:718)
	at reactor.core.publisher.FluxCreate$SerializedFluxSink.next(FluxCreate.java:154)
	at java.util.ArrayList.forEach(ArrayList.java:1259)
	at com.mongodb.reactivestreams.client.internal.BatchCursorFlux.lambda$recurseCursor$4(BatchCursorFlux.java:94)
	at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.onNext(MonoPeekTerminal.java:171)
	at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.onNext(MonoPeekTerminal.java:180)
	at reactor.core.publisher.FluxPeekFuseable$PeekConditionalSubscriber.onNext(FluxPeekFuseable.java:854)
	at reactor.core.publisher.MonoCreate$DefaultMonoSink.success(MonoCreate.java:160)
	at com.mongodb.reactivestreams.client.internal.MongoOperationPublisher.lambda$sinkToCallback$30(MongoOperationPublisher.java:550)
	at com.mongodb.internal.operation.AsyncQueryBatchCursor.next(AsyncQueryBatchCursor.java:207)
	at com.mongodb.internal.operation.AsyncQueryBatchCursor.next(AsyncQueryBatchCursor.java:146)
	at com.mongodb.reactivestreams.client.internal.BatchCursor.lambda$next$0(BatchCursor.java:35)
	at reactor.core.publisher.MonoCreate.subscribe(MonoCreate.java:57)
	at reactor.core.publisher.Mono.subscribe(Mono.java:4150)
	at reactor.core.publisher.Mono.subscribeWith(Mono.java:4265)
	at reactor.core.publisher.Mono.subscribe(Mono.java:3982)
	at com.mongodb.reactivestreams.client.internal.BatchCursorFlux.recurseCursor(BatchCursorFlux.java:104)
	at com.mongodb.reactivestreams.client.internal.BatchCursorFlux.lambda$subscribe$0(BatchCursorFlux.java:56)
	at reactor.core.publisher.LambdaMonoSubscriber.onNext(LambdaMonoSubscriber.java:171)
	at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onNext(FluxMapFuseable.java:127)
	at reactor.core.publisher.Operators$MonoSubscriber.complete(Operators.java:1815)
	at reactor.core.publisher.MonoFlatMap$FlatMapInner.onNext(MonoFlatMap.java:249)
	at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.onNext(MonoPeekTerminal.java:180)
	at reactor.core.publisher.MonoCreate$DefaultMonoSink.success(MonoCreate.java:160)
	at com.mongodb.reactivestreams.client.internal.MongoOperationPublisher.lambda$sinkToCallback$30(MongoOperationPublisher.java:550)
	at com.mongodb.reactivestreams.client.internal.OperationExecutorImpl.lambda$execute$2(OperationExecutorImpl.java:73)
	at com.mongodb.internal.async.ErrorHandlingResultCallback.onResult(ErrorHandlingResultCallback.java:48)
	at com.mongodb.internal.operation.FindOperation$3.onResult(FindOperation.java:755)
	at com.mongodb.internal.operation.OperationHelper$ReferenceCountedReleasingWrappedCallback.onResult(OperationHelper.java:532)
	at com.mongodb.internal.operation.CommandOperationHelper$10.onResult(CommandOperationHelper.java:483)
	at com.mongodb.internal.async.ErrorHandlingResultCallback.onResult(ErrorHandlingResultCallback.java:48)
	at com.mongodb.internal.connection.DefaultServer$DefaultServerProtocolExecutor$2.onResult(DefaultServer.java:286)
	at com.mongodb.internal.async.ErrorHandlingResultCallback.onResult(ErrorHandlingResultCallback.java:48)
	at com.mongodb.internal.connection.CommandProtocolImpl$1.onResult(CommandProtocolImpl.java:84)
	at com.mongodb.internal.connection.DefaultConnectionPool$PooledConnection$2.onResult(DefaultConnectionPool.java:530)
	at com.mongodb.internal.connection.UsageTrackingInternalConnection$2.onResult(UsageTrackingInternalConnection.java:142)
	at com.mongodb.internal.async.ErrorHandlingResultCallback.onResult(ErrorHandlingResultCallback.java:48)
	at com.mongodb.internal.connection.InternalStreamConnection$2$1.onResult(InternalStreamConnection.java:462)
	at com.mongodb.internal.connection.InternalStreamConnection$2$1.onResult(InternalStreamConnection.java:439)
	at com.mongodb.internal.connection.InternalStreamConnection$MessageHeaderCallback$MessageCallback.onResult(InternalStreamConnection.java:744)
	at com.mongodb.internal.connection.InternalStreamConnection$MessageHeaderCallback$MessageCallback.onResult(InternalStreamConnection.java:711)
	at com.mongodb.internal.connection.InternalStreamConnection$5.completed(InternalStreamConnection.java:581)
	at com.mongodb.internal.connection.InternalStreamConnection$5.completed(InternalStreamConnection.java:578)
	at com.mongodb.connection.netty.NettyStream.readAsync(NettyStream.java:322)
	at com.mongodb.connection.netty.NettyStream.readAsync(NettyStream.java:269)
	at com.mongodb.internal.connection.InternalStreamConnection.readAsync(InternalStreamConnection.java:578)
	at com.mongodb.internal.connection.InternalStreamConnection.access$1100(InternalStreamConnection.java:78)
	at com.mongodb.internal.connection.InternalStreamConnection$MessageHeaderCallback.onResult(InternalStreamConnection.java:701)
	at com.mongodb.internal.connection.InternalStreamConnection$MessageHeaderCallback.onResult(InternalStreamConnection.java:686)
	at com.mongodb.internal.connection.InternalStreamConnection$5.completed(InternalStreamConnection.java:581)
	at com.mongodb.internal.connection.InternalStreamConnection$5.completed(InternalStreamConnection.java:578)
	at com.mongodb.connection.netty.NettyStream.readAsync(NettyStream.java:322)
	at com.mongodb.connection.netty.NettyStream.handleReadResponse(NettyStream.java:350)
	at com.mongodb.connection.netty.NettyStream.access$1200(NettyStream.java:104)
	at com.mongodb.connection.netty.NettyStream$InboundBufferHandler.channelRead0(NettyStream.java:409)
	at com.mongodb.connection.netty.NettyStream$InboundBufferHandler.channelRead0(NettyStream.java:406)
	at io.netty.channel.SimpleChannelInboundHandler.channelRead(SimpleChannelInboundHandler.java:99)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:379)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:365)
	at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:357)
	at io.netty.channel.DefaultChannelPipeline$HeadContext.channelRead(DefaultChannelPipeline.java:1410)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:379)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:365)
	at io.netty.channel.DefaultChannelPipeline.fireChannelRead(DefaultChannelPipeline.java:919)
	at io.netty.channel.nio.AbstractNioByteChannel$NioByteUnsafe.read(AbstractNioByteChannel.java:166)
	at io.netty.channel.nio.NioEventLoop.processSelectedKey(NioEventLoop.java:719)
	at io.netty.channel.nio.NioEventLoop.processSelectedKeysOptimized(NioEventLoop.java:655)
	at io.netty.channel.nio.NioEventLoop.processSelectedKeys(NioEventLoop.java:581)
	at io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:493)
	at io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:989)
	at io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)
	at io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)
	at java.lang.Thread.run(Thread.java:748)
2021-07-19 19:02:22,366 DEBUG [nioEventLoopGroup-3-3] org.springframework.core.log.CompositeLog : [4147b1bf-4, L:/0:0:0:0:0:0:0:1:8090 - R:/0:0:0:0:0:0:0:1:60904] Encoding [{timestamp=Mon Jul 19 19:02:22 COT 2021, path=/customer, status=500, error=Internal Server Error, re (truncated)...]
2021-07-19 19:02:22,368 DEBUG [reactor-http-nio-3] org.springframework.core.log.LogFormatUtils : [4147b1bf-4, L:/0:0:0:0:0:0:0:1:8090 - R:/0:0:0:0:0:0:0:1:60904] Completed 500 INTERNAL_SERVER_ERROR
2021-07-19 19:02:23,182 DEBUG [reactor-http-nio-3] org.springframework.core.log.LogFormatUtils : [4147b1bf-5, L:/0:0:0:0:0:0:0:1:8090 - R:/0:0:0:0:0:0:0:1:60904] HTTP GET "/customer"
2021-07-19 19:02:23,183 DEBUG [reactor-http-nio-3] org.springframework.web.reactive.handler.AbstractHandlerMapping : [4147b1bf-5, L:/0:0:0:0:0:0:0:1:8090 - R:/0:0:0:0:0:0:0:1:60904] Mapped to com.bank.manage.customer.controller.CustomerController#getAllCustomers()
2021-07-19 19:02:23,183 INFO [reactor-http-nio-3] com.bank.manage.customer.controller.CustomerController :  EndPoit get by all customers {} 
2021-07-19 19:02:23,184 DEBUG [reactor-http-nio-3] org.springframework.web.reactive.result.HandlerResultHandlerSupport : [4147b1bf-5, L:/0:0:0:0:0:0:0:1:8090 - R:/0:0:0:0:0:0:0:1:60904] Found 'Content-Type:application/json' in response
2021-07-19 19:02:23,184 DEBUG [reactor-http-nio-3] org.springframework.web.reactive.result.method.annotation.AbstractMessageWriterResultHandler : [4147b1bf-5, L:/0:0:0:0:0:0:0:1:8090 - R:/0:0:0:0:0:0:0:1:60904] 0..N [com.bank.manage.customer.persistence.entity.Customer]
2021-07-19 19:02:23,188 DEBUG [nioEventLoopGroup-3-3] org.springframework.core.log.CompositeLog : [4147b1bf-5, L:/0:0:0:0:0:0:0:1:8090 - R:/0:0:0:0:0:0:0:1:60904] Resolved [ConversionFailedException: Failed to convert from type [java.lang.Double] to type [java.lang.Integer] for value '9.89898968968E11'; nested exception is java.lang.IllegalArgumentException: Could not convert number [9.89898968968E11] of type [java.lang.Double] to target class [java.lang.Integer]: overflow] for HTTP GET /customer
2021-07-19 19:02:23,189 ERROR [nioEventLoopGroup-3-3] org.springframework.core.log.CompositeLog : [4147b1bf-5, L:/0:0:0:0:0:0:0:1:8090 - R:/0:0:0:0:0:0:0:1:60904]  500 Server Error for HTTP GET "/customer"
org.springframework.core.convert.ConversionFailedException: Failed to convert from type [java.lang.Double] to type [java.lang.Integer] for value '9.89898968968E11'; nested exception is java.lang.IllegalArgumentException: Could not convert number [9.89898968968E11] of type [java.lang.Double] to target class [java.lang.Integer]: overflow
	at org.springframework.core.convert.support.ConversionUtils.invokeConverter(ConversionUtils.java:47)
	Suppressed: reactor.core.publisher.FluxOnAssembly$OnAssemblyException: 
Error has been observed at the following site(s):
	|_ checkpoint ⇢ Handler com.bank.manage.customer.controller.CustomerController#getAllCustomers() [DispatcherHandler]
	|_ checkpoint ⇢ org.springframework.boot.actuate.metrics.web.reactive.server.MetricsWebFilter [DefaultWebFilterChain]
	|_ checkpoint ⇢ HTTP GET "/customer" [ExceptionHandlingWebHandler]
Stack trace:
		at org.springframework.core.convert.support.ConversionUtils.invokeConverter(ConversionUtils.java:47)
		at org.springframework.core.convert.support.GenericConversionService.convert(GenericConversionService.java:192)
		at org.springframework.core.convert.support.GenericConversionService.convert(GenericConversionService.java:175)
		at org.springframework.data.mongodb.core.convert.MappingMongoConverter.doConvert(MappingMongoConverter.java:1547)
		at org.springframework.data.mongodb.core.convert.MappingMongoConverter.doConvert(MappingMongoConverter.java:1540)
		at org.springframework.data.mongodb.core.convert.MappingMongoConverter.getPotentiallyConvertedSimpleRead(MappingMongoConverter.java:1060)
		at org.springframework.data.mongodb.core.convert.MappingMongoConverter.getPotentiallyConvertedSimpleRead(MappingMongoConverter.java:1038)
		at org.springframework.data.mongodb.core.convert.MappingMongoConverter$ConversionContext.convert(MappingMongoConverter.java:1919)
		at org.springframework.data.mongodb.core.convert.MappingMongoConverter$MongoDbPropertyValueProvider.getPropertyValue(MappingMongoConverter.java:1641)
		at org.springframework.data.mongodb.core.convert.MappingMongoConverter.readProperties(MappingMongoConverter.java:481)
		at org.springframework.data.mongodb.core.convert.MappingMongoConverter.populateProperties(MappingMongoConverter.java:394)
		at org.springframework.data.mongodb.core.convert.MappingMongoConverter.read(MappingMongoConverter.java:372)
		at org.springframework.data.mongodb.core.convert.MappingMongoConverter.readDocument(MappingMongoConverter.java:342)
		at org.springframework.data.mongodb.core.convert.MappingMongoConverter.read(MappingMongoConverter.java:278)
		at org.springframework.data.mongodb.core.convert.MappingMongoConverter.read(MappingMongoConverter.java:274)
		at org.springframework.data.mongodb.core.convert.MappingMongoConverter.read(MappingMongoConverter.java:102)
		at org.springframework.data.mongodb.core.ReactiveMongoTemplate$ReadDocumentCallback.doWith(ReactiveMongoTemplate.java:3155)
		at reactor.core.publisher.FluxConcatMap$ConcatMapImmediate.drain(FluxConcatMap.java:374)
		at reactor.core.publisher.FluxConcatMap$ConcatMapImmediate.onNext(FluxConcatMap.java:250)
		at reactor.core.publisher.FluxCreate$BufferAsyncSink.drain(FluxCreate.java:793)
		at reactor.core.publisher.FluxCreate$BufferAsyncSink.next(FluxCreate.java:718)
		at reactor.core.publisher.FluxCreate$SerializedFluxSink.next(FluxCreate.java:154)
		at java.util.ArrayList.forEach(ArrayList.java:1259)
		at com.mongodb.reactivestreams.client.internal.BatchCursorFlux.lambda$recurseCursor$4(BatchCursorFlux.java:94)
		at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.onNext(MonoPeekTerminal.java:171)
		at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.onNext(MonoPeekTerminal.java:180)
		at reactor.core.publisher.FluxPeekFuseable$PeekConditionalSubscriber.onNext(FluxPeekFuseable.java:854)
		at reactor.core.publisher.MonoCreate$DefaultMonoSink.success(MonoCreate.java:160)
		at com.mongodb.reactivestreams.client.internal.MongoOperationPublisher.lambda$sinkToCallback$30(MongoOperationPublisher.java:550)
		at com.mongodb.internal.operation.AsyncQueryBatchCursor.next(AsyncQueryBatchCursor.java:207)
		at com.mongodb.internal.operation.AsyncQueryBatchCursor.next(AsyncQueryBatchCursor.java:146)
		at com.mongodb.reactivestreams.client.internal.BatchCursor.lambda$next$0(BatchCursor.java:35)
		at reactor.core.publisher.MonoCreate.subscribe(MonoCreate.java:57)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4150)
		at reactor.core.publisher.Mono.subscribeWith(Mono.java:4265)
		at reactor.core.publisher.Mono.subscribe(Mono.java:3982)
		at com.mongodb.reactivestreams.client.internal.BatchCursorFlux.recurseCursor(BatchCursorFlux.java:104)
		at com.mongodb.reactivestreams.client.internal.BatchCursorFlux.lambda$subscribe$0(BatchCursorFlux.java:56)
		at reactor.core.publisher.LambdaMonoSubscriber.onNext(LambdaMonoSubscriber.java:171)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onNext(FluxMapFuseable.java:127)
		at reactor.core.publisher.Operators$MonoSubscriber.complete(Operators.java:1815)
		at reactor.core.publisher.MonoFlatMap$FlatMapInner.onNext(MonoFlatMap.java:249)
		at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.onNext(MonoPeekTerminal.java:180)
		at reactor.core.publisher.MonoCreate$DefaultMonoSink.success(MonoCreate.java:160)
		at com.mongodb.reactivestreams.client.internal.MongoOperationPublisher.lambda$sinkToCallback$30(MongoOperationPublisher.java:550)
		at com.mongodb.reactivestreams.client.internal.OperationExecutorImpl.lambda$execute$2(OperationExecutorImpl.java:73)
		at com.mongodb.internal.async.ErrorHandlingResultCallback.onResult(ErrorHandlingResultCallback.java:48)
		at com.mongodb.internal.operation.FindOperation$3.onResult(FindOperation.java:755)
		at com.mongodb.internal.operation.OperationHelper$ReferenceCountedReleasingWrappedCallback.onResult(OperationHelper.java:532)
		at com.mongodb.internal.operation.CommandOperationHelper$10.onResult(CommandOperationHelper.java:483)
		at com.mongodb.internal.async.ErrorHandlingResultCallback.onResult(ErrorHandlingResultCallback.java:48)
		at com.mongodb.internal.connection.DefaultServer$DefaultServerProtocolExecutor$2.onResult(DefaultServer.java:286)
		at com.mongodb.internal.async.ErrorHandlingResultCallback.onResult(ErrorHandlingResultCallback.java:48)
		at com.mongodb.internal.connection.CommandProtocolImpl$1.onResult(CommandProtocolImpl.java:84)
		at com.mongodb.internal.connection.DefaultConnectionPool$PooledConnection$2.onResult(DefaultConnectionPool.java:530)
		at com.mongodb.internal.connection.UsageTrackingInternalConnection$2.onResult(UsageTrackingInternalConnection.java:142)
		at com.mongodb.internal.async.ErrorHandlingResultCallback.onResult(ErrorHandlingResultCallback.java:48)
		at com.mongodb.internal.connection.InternalStreamConnection$2$1.onResult(InternalStreamConnection.java:462)
		at com.mongodb.internal.connection.InternalStreamConnection$2$1.onResult(InternalStreamConnection.java:439)
		at com.mongodb.internal.connection.InternalStreamConnection$MessageHeaderCallback$MessageCallback.onResult(InternalStreamConnection.java:744)
		at com.mongodb.internal.connection.InternalStreamConnection$MessageHeaderCallback$MessageCallback.onResult(InternalStreamConnection.java:711)
		at com.mongodb.internal.connection.InternalStreamConnection$5.completed(InternalStreamConnection.java:581)
		at com.mongodb.internal.connection.InternalStreamConnection$5.completed(InternalStreamConnection.java:578)
		at com.mongodb.connection.netty.NettyStream.readAsync(NettyStream.java:322)
		at com.mongodb.connection.netty.NettyStream.readAsync(NettyStream.java:269)
		at com.mongodb.internal.connection.InternalStreamConnection.readAsync(InternalStreamConnection.java:578)
		at com.mongodb.internal.connection.InternalStreamConnection.access$1100(InternalStreamConnection.java:78)
		at com.mongodb.internal.connection.InternalStreamConnection$MessageHeaderCallback.onResult(InternalStreamConnection.java:701)
		at com.mongodb.internal.connection.InternalStreamConnection$MessageHeaderCallback.onResult(InternalStreamConnection.java:686)
		at com.mongodb.internal.connection.InternalStreamConnection$5.completed(InternalStreamConnection.java:581)
		at com.mongodb.internal.connection.InternalStreamConnection$5.completed(InternalStreamConnection.java:578)
		at com.mongodb.connection.netty.NettyStream.readAsync(NettyStream.java:322)
		at com.mongodb.connection.netty.NettyStream.handleReadResponse(NettyStream.java:350)
		at com.mongodb.connection.netty.NettyStream.access$1200(NettyStream.java:104)
		at com.mongodb.connection.netty.NettyStream$InboundBufferHandler.channelRead0(NettyStream.java:409)
		at com.mongodb.connection.netty.NettyStream$InboundBufferHandler.channelRead0(NettyStream.java:406)
		at io.netty.channel.SimpleChannelInboundHandler.channelRead(SimpleChannelInboundHandler.java:99)
		at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:379)
		at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:365)
		at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:357)
		at io.netty.channel.DefaultChannelPipeline$HeadContext.channelRead(DefaultChannelPipeline.java:1410)
		at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:379)
		at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:365)
		at io.netty.channel.DefaultChannelPipeline.fireChannelRead(DefaultChannelPipeline.java:919)
		at io.netty.channel.nio.AbstractNioByteChannel$NioByteUnsafe.read(AbstractNioByteChannel.java:166)
		at io.netty.channel.nio.NioEventLoop.processSelectedKey(NioEventLoop.java:719)
		at io.netty.channel.nio.NioEventLoop.processSelectedKeysOptimized(NioEventLoop.java:655)
		at io.netty.channel.nio.NioEventLoop.processSelectedKeys(NioEventLoop.java:581)
		at io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:493)
		at io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:989)
		at io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)
		at io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)
		at java.lang.Thread.run(Thread.java:748)
Caused by: java.lang.IllegalArgumentException: Could not convert number [9.89898968968E11] of type [java.lang.Double] to target class [java.lang.Integer]: overflow
	at org.springframework.util.NumberUtils.raiseOverflowException(NumberUtils.java:175)
	at org.springframework.util.NumberUtils.convertNumberToTargetClass(NumberUtils.java:108)
	at org.springframework.core.convert.support.NumberToNumberConverterFactory$NumberToNumber.convert(NumberToNumberConverterFactory.java:66)
	at org.springframework.core.convert.support.NumberToNumberConverterFactory$NumberToNumber.convert(NumberToNumberConverterFactory.java:56)
	at org.springframework.core.convert.support.GenericConversionService$ConverterFactoryAdapter.convert(GenericConversionService.java:437)
	at org.springframework.core.convert.support.ConversionUtils.invokeConverter(ConversionUtils.java:41)
	at org.springframework.core.convert.support.GenericConversionService.convert(GenericConversionService.java:192)
	at org.springframework.core.convert.support.GenericConversionService.convert(GenericConversionService.java:175)
	at org.springframework.data.mongodb.core.convert.MappingMongoConverter.doConvert(MappingMongoConverter.java:1547)
	at org.springframework.data.mongodb.core.convert.MappingMongoConverter.doConvert(MappingMongoConverter.java:1540)
	at org.springframework.data.mongodb.core.convert.MappingMongoConverter.getPotentiallyConvertedSimpleRead(MappingMongoConverter.java:1060)
	at org.springframework.data.mongodb.core.convert.MappingMongoConverter.getPotentiallyConvertedSimpleRead(MappingMongoConverter.java:1038)
	at org.springframework.data.mongodb.core.convert.MappingMongoConverter$ConversionContext.convert(MappingMongoConverter.java:1919)
	at org.springframework.data.mongodb.core.convert.MappingMongoConverter$MongoDbPropertyValueProvider.getPropertyValue(MappingMongoConverter.java:1641)
	at org.springframework.data.mongodb.core.convert.MappingMongoConverter.readProperties(MappingMongoConverter.java:481)
	at org.springframework.data.mongodb.core.convert.MappingMongoConverter.populateProperties(MappingMongoConverter.java:394)
	at org.springframework.data.mongodb.core.convert.MappingMongoConverter.read(MappingMongoConverter.java:372)
	at org.springframework.data.mongodb.core.convert.MappingMongoConverter.readDocument(MappingMongoConverter.java:342)
	at org.springframework.data.mongodb.core.convert.MappingMongoConverter.read(MappingMongoConverter.java:278)
	at org.springframework.data.mongodb.core.convert.MappingMongoConverter.read(MappingMongoConverter.java:274)
	at org.springframework.data.mongodb.core.convert.MappingMongoConverter.read(MappingMongoConverter.java:102)
	at org.springframework.data.mongodb.core.ReactiveMongoTemplate$ReadDocumentCallback.doWith(ReactiveMongoTemplate.java:3155)
	at reactor.core.publisher.FluxConcatMap$ConcatMapImmediate.drain(FluxConcatMap.java:374)
	at reactor.core.publisher.FluxConcatMap$ConcatMapImmediate.onNext(FluxConcatMap.java:250)
	at reactor.core.publisher.FluxCreate$BufferAsyncSink.drain(FluxCreate.java:793)
	at reactor.core.publisher.FluxCreate$BufferAsyncSink.next(FluxCreate.java:718)
	at reactor.core.publisher.FluxCreate$SerializedFluxSink.next(FluxCreate.java:154)
	at java.util.ArrayList.forEach(ArrayList.java:1259)
	at com.mongodb.reactivestreams.client.internal.BatchCursorFlux.lambda$recurseCursor$4(BatchCursorFlux.java:94)
	at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.onNext(MonoPeekTerminal.java:171)
	at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.onNext(MonoPeekTerminal.java:180)
	at reactor.core.publisher.FluxPeekFuseable$PeekConditionalSubscriber.onNext(FluxPeekFuseable.java:854)
	at reactor.core.publisher.MonoCreate$DefaultMonoSink.success(MonoCreate.java:160)
	at com.mongodb.reactivestreams.client.internal.MongoOperationPublisher.lambda$sinkToCallback$30(MongoOperationPublisher.java:550)
	at com.mongodb.internal.operation.AsyncQueryBatchCursor.next(AsyncQueryBatchCursor.java:207)
	at com.mongodb.internal.operation.AsyncQueryBatchCursor.next(AsyncQueryBatchCursor.java:146)
	at com.mongodb.reactivestreams.client.internal.BatchCursor.lambda$next$0(BatchCursor.java:35)
	at reactor.core.publisher.MonoCreate.subscribe(MonoCreate.java:57)
	at reactor.core.publisher.Mono.subscribe(Mono.java:4150)
	at reactor.core.publisher.Mono.subscribeWith(Mono.java:4265)
	at reactor.core.publisher.Mono.subscribe(Mono.java:3982)
	at com.mongodb.reactivestreams.client.internal.BatchCursorFlux.recurseCursor(BatchCursorFlux.java:104)
	at com.mongodb.reactivestreams.client.internal.BatchCursorFlux.lambda$subscribe$0(BatchCursorFlux.java:56)
	at reactor.core.publisher.LambdaMonoSubscriber.onNext(LambdaMonoSubscriber.java:171)
	at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onNext(FluxMapFuseable.java:127)
	at reactor.core.publisher.Operators$MonoSubscriber.complete(Operators.java:1815)
	at reactor.core.publisher.MonoFlatMap$FlatMapInner.onNext(MonoFlatMap.java:249)
	at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.onNext(MonoPeekTerminal.java:180)
	at reactor.core.publisher.MonoCreate$DefaultMonoSink.success(MonoCreate.java:160)
	at com.mongodb.reactivestreams.client.internal.MongoOperationPublisher.lambda$sinkToCallback$30(MongoOperationPublisher.java:550)
	at com.mongodb.reactivestreams.client.internal.OperationExecutorImpl.lambda$execute$2(OperationExecutorImpl.java:73)
	at com.mongodb.internal.async.ErrorHandlingResultCallback.onResult(ErrorHandlingResultCallback.java:48)
	at com.mongodb.internal.operation.FindOperation$3.onResult(FindOperation.java:755)
	at com.mongodb.internal.operation.OperationHelper$ReferenceCountedReleasingWrappedCallback.onResult(OperationHelper.java:532)
	at com.mongodb.internal.operation.CommandOperationHelper$10.onResult(CommandOperationHelper.java:483)
	at com.mongodb.internal.async.ErrorHandlingResultCallback.onResult(ErrorHandlingResultCallback.java:48)
	at com.mongodb.internal.connection.DefaultServer$DefaultServerProtocolExecutor$2.onResult(DefaultServer.java:286)
	at com.mongodb.internal.async.ErrorHandlingResultCallback.onResult(ErrorHandlingResultCallback.java:48)
	at com.mongodb.internal.connection.CommandProtocolImpl$1.onResult(CommandProtocolImpl.java:84)
	at com.mongodb.internal.connection.DefaultConnectionPool$PooledConnection$2.onResult(DefaultConnectionPool.java:530)
	at com.mongodb.internal.connection.UsageTrackingInternalConnection$2.onResult(UsageTrackingInternalConnection.java:142)
	at com.mongodb.internal.async.ErrorHandlingResultCallback.onResult(ErrorHandlingResultCallback.java:48)
	at com.mongodb.internal.connection.InternalStreamConnection$2$1.onResult(InternalStreamConnection.java:462)
	at com.mongodb.internal.connection.InternalStreamConnection$2$1.onResult(InternalStreamConnection.java:439)
	at com.mongodb.internal.connection.InternalStreamConnection$MessageHeaderCallback$MessageCallback.onResult(InternalStreamConnection.java:744)
	at com.mongodb.internal.connection.InternalStreamConnection$MessageHeaderCallback$MessageCallback.onResult(InternalStreamConnection.java:711)
	at com.mongodb.internal.connection.InternalStreamConnection$5.completed(InternalStreamConnection.java:581)
	at com.mongodb.internal.connection.InternalStreamConnection$5.completed(InternalStreamConnection.java:578)
	at com.mongodb.connection.netty.NettyStream.readAsync(NettyStream.java:322)
	at com.mongodb.connection.netty.NettyStream.readAsync(NettyStream.java:269)
	at com.mongodb.internal.connection.InternalStreamConnection.readAsync(InternalStreamConnection.java:578)
	at com.mongodb.internal.connection.InternalStreamConnection.access$1100(InternalStreamConnection.java:78)
	at com.mongodb.internal.connection.InternalStreamConnection$MessageHeaderCallback.onResult(InternalStreamConnection.java:701)
	at com.mongodb.internal.connection.InternalStreamConnection$MessageHeaderCallback.onResult(InternalStreamConnection.java:686)
	at com.mongodb.internal.connection.InternalStreamConnection$5.completed(InternalStreamConnection.java:581)
	at com.mongodb.internal.connection.InternalStreamConnection$5.completed(InternalStreamConnection.java:578)
	at com.mongodb.connection.netty.NettyStream.readAsync(NettyStream.java:322)
	at com.mongodb.connection.netty.NettyStream.handleReadResponse(NettyStream.java:350)
	at com.mongodb.connection.netty.NettyStream.access$1200(NettyStream.java:104)
	at com.mongodb.connection.netty.NettyStream$InboundBufferHandler.channelRead0(NettyStream.java:409)
	at com.mongodb.connection.netty.NettyStream$InboundBufferHandler.channelRead0(NettyStream.java:406)
	at io.netty.channel.SimpleChannelInboundHandler.channelRead(SimpleChannelInboundHandler.java:99)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:379)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:365)
	at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:357)
	at io.netty.channel.DefaultChannelPipeline$HeadContext.channelRead(DefaultChannelPipeline.java:1410)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:379)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:365)
	at io.netty.channel.DefaultChannelPipeline.fireChannelRead(DefaultChannelPipeline.java:919)
	at io.netty.channel.nio.AbstractNioByteChannel$NioByteUnsafe.read(AbstractNioByteChannel.java:166)
	at io.netty.channel.nio.NioEventLoop.processSelectedKey(NioEventLoop.java:719)
	at io.netty.channel.nio.NioEventLoop.processSelectedKeysOptimized(NioEventLoop.java:655)
	at io.netty.channel.nio.NioEventLoop.processSelectedKeys(NioEventLoop.java:581)
	at io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:493)
	at io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:989)
	at io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)
	at io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)
	at java.lang.Thread.run(Thread.java:748)
2021-07-19 19:02:23,191 DEBUG [nioEventLoopGroup-3-3] org.springframework.core.log.CompositeLog : [4147b1bf-5, L:/0:0:0:0:0:0:0:1:8090 - R:/0:0:0:0:0:0:0:1:60904] Encoding [{timestamp=Mon Jul 19 19:02:23 COT 2021, path=/customer, status=500, error=Internal Server Error, re (truncated)...]
2021-07-19 19:02:23,192 DEBUG [reactor-http-nio-3] org.springframework.core.log.LogFormatUtils : [4147b1bf-5, L:/0:0:0:0:0:0:0:1:8090 - R:/0:0:0:0:0:0:0:1:60904] Completed 500 INTERNAL_SERVER_ERROR
2021-07-19 19:02:25,433 DEBUG [reactor-http-nio-3] org.springframework.core.log.LogFormatUtils : [4147b1bf-6, L:/0:0:0:0:0:0:0:1:8090 - R:/0:0:0:0:0:0:0:1:60904] HTTP GET "/customer"
2021-07-19 19:02:25,434 DEBUG [reactor-http-nio-3] org.springframework.web.reactive.handler.AbstractHandlerMapping : [4147b1bf-6, L:/0:0:0:0:0:0:0:1:8090 - R:/0:0:0:0:0:0:0:1:60904] Mapped to com.bank.manage.customer.controller.CustomerController#getAllCustomers()
2021-07-19 19:02:25,435 INFO [reactor-http-nio-3] com.bank.manage.customer.controller.CustomerController :  EndPoit get by all customers {} 
2021-07-19 19:02:25,435 DEBUG [reactor-http-nio-3] org.springframework.web.reactive.result.HandlerResultHandlerSupport : [4147b1bf-6, L:/0:0:0:0:0:0:0:1:8090 - R:/0:0:0:0:0:0:0:1:60904] Found 'Content-Type:application/json' in response
2021-07-19 19:02:25,436 DEBUG [reactor-http-nio-3] org.springframework.web.reactive.result.method.annotation.AbstractMessageWriterResultHandler : [4147b1bf-6, L:/0:0:0:0:0:0:0:1:8090 - R:/0:0:0:0:0:0:0:1:60904] 0..N [com.bank.manage.customer.persistence.entity.Customer]
2021-07-19 19:02:25,450 DEBUG [nioEventLoopGroup-3-3] org.springframework.core.log.CompositeLog : [4147b1bf-6, L:/0:0:0:0:0:0:0:1:8090 - R:/0:0:0:0:0:0:0:1:60904] Resolved [ConversionFailedException: Failed to convert from type [java.lang.Double] to type [java.lang.Integer] for value '9.89898968968E11'; nested exception is java.lang.IllegalArgumentException: Could not convert number [9.89898968968E11] of type [java.lang.Double] to target class [java.lang.Integer]: overflow] for HTTP GET /customer
2021-07-19 19:02:25,451 ERROR [nioEventLoopGroup-3-3] org.springframework.core.log.CompositeLog : [4147b1bf-6, L:/0:0:0:0:0:0:0:1:8090 - R:/0:0:0:0:0:0:0:1:60904]  500 Server Error for HTTP GET "/customer"
org.springframework.core.convert.ConversionFailedException: Failed to convert from type [java.lang.Double] to type [java.lang.Integer] for value '9.89898968968E11'; nested exception is java.lang.IllegalArgumentException: Could not convert number [9.89898968968E11] of type [java.lang.Double] to target class [java.lang.Integer]: overflow
	at org.springframework.core.convert.support.ConversionUtils.invokeConverter(ConversionUtils.java:47)
	Suppressed: reactor.core.publisher.FluxOnAssembly$OnAssemblyException: 
Error has been observed at the following site(s):
	|_ checkpoint ⇢ Handler com.bank.manage.customer.controller.CustomerController#getAllCustomers() [DispatcherHandler]
	|_ checkpoint ⇢ org.springframework.boot.actuate.metrics.web.reactive.server.MetricsWebFilter [DefaultWebFilterChain]
	|_ checkpoint ⇢ HTTP GET "/customer" [ExceptionHandlingWebHandler]
Stack trace:
		at org.springframework.core.convert.support.ConversionUtils.invokeConverter(ConversionUtils.java:47)
		at org.springframework.core.convert.support.GenericConversionService.convert(GenericConversionService.java:192)
		at org.springframework.core.convert.support.GenericConversionService.convert(GenericConversionService.java:175)
		at org.springframework.data.mongodb.core.convert.MappingMongoConverter.doConvert(MappingMongoConverter.java:1547)
		at org.springframework.data.mongodb.core.convert.MappingMongoConverter.doConvert(MappingMongoConverter.java:1540)
		at org.springframework.data.mongodb.core.convert.MappingMongoConverter.getPotentiallyConvertedSimpleRead(MappingMongoConverter.java:1060)
		at org.springframework.data.mongodb.core.convert.MappingMongoConverter.getPotentiallyConvertedSimpleRead(MappingMongoConverter.java:1038)
		at org.springframework.data.mongodb.core.convert.MappingMongoConverter$ConversionContext.convert(MappingMongoConverter.java:1919)
		at org.springframework.data.mongodb.core.convert.MappingMongoConverter$MongoDbPropertyValueProvider.getPropertyValue(MappingMongoConverter.java:1641)
		at org.springframework.data.mongodb.core.convert.MappingMongoConverter.readProperties(MappingMongoConverter.java:481)
		at org.springframework.data.mongodb.core.convert.MappingMongoConverter.populateProperties(MappingMongoConverter.java:394)
		at org.springframework.data.mongodb.core.convert.MappingMongoConverter.read(MappingMongoConverter.java:372)
		at org.springframework.data.mongodb.core.convert.MappingMongoConverter.readDocument(MappingMongoConverter.java:342)
		at org.springframework.data.mongodb.core.convert.MappingMongoConverter.read(MappingMongoConverter.java:278)
		at org.springframework.data.mongodb.core.convert.MappingMongoConverter.read(MappingMongoConverter.java:274)
		at org.springframework.data.mongodb.core.convert.MappingMongoConverter.read(MappingMongoConverter.java:102)
		at org.springframework.data.mongodb.core.ReactiveMongoTemplate$ReadDocumentCallback.doWith(ReactiveMongoTemplate.java:3155)
		at reactor.core.publisher.FluxConcatMap$ConcatMapImmediate.drain(FluxConcatMap.java:374)
		at reactor.core.publisher.FluxConcatMap$ConcatMapImmediate.onNext(FluxConcatMap.java:250)
		at reactor.core.publisher.FluxCreate$BufferAsyncSink.drain(FluxCreate.java:793)
		at reactor.core.publisher.FluxCreate$BufferAsyncSink.next(FluxCreate.java:718)
		at reactor.core.publisher.FluxCreate$SerializedFluxSink.next(FluxCreate.java:154)
		at java.util.ArrayList.forEach(ArrayList.java:1259)
		at com.mongodb.reactivestreams.client.internal.BatchCursorFlux.lambda$recurseCursor$4(BatchCursorFlux.java:94)
		at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.onNext(MonoPeekTerminal.java:171)
		at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.onNext(MonoPeekTerminal.java:180)
		at reactor.core.publisher.FluxPeekFuseable$PeekConditionalSubscriber.onNext(FluxPeekFuseable.java:854)
		at reactor.core.publisher.MonoCreate$DefaultMonoSink.success(MonoCreate.java:160)
		at com.mongodb.reactivestreams.client.internal.MongoOperationPublisher.lambda$sinkToCallback$30(MongoOperationPublisher.java:550)
		at com.mongodb.internal.operation.AsyncQueryBatchCursor.next(AsyncQueryBatchCursor.java:207)
		at com.mongodb.internal.operation.AsyncQueryBatchCursor.next(AsyncQueryBatchCursor.java:146)
		at com.mongodb.reactivestreams.client.internal.BatchCursor.lambda$next$0(BatchCursor.java:35)
		at reactor.core.publisher.MonoCreate.subscribe(MonoCreate.java:57)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4150)
		at reactor.core.publisher.Mono.subscribeWith(Mono.java:4265)
		at reactor.core.publisher.Mono.subscribe(Mono.java:3982)
		at com.mongodb.reactivestreams.client.internal.BatchCursorFlux.recurseCursor(BatchCursorFlux.java:104)
		at com.mongodb.reactivestreams.client.internal.BatchCursorFlux.lambda$subscribe$0(BatchCursorFlux.java:56)
		at reactor.core.publisher.LambdaMonoSubscriber.onNext(LambdaMonoSubscriber.java:171)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onNext(FluxMapFuseable.java:127)
		at reactor.core.publisher.Operators$MonoSubscriber.complete(Operators.java:1815)
		at reactor.core.publisher.MonoFlatMap$FlatMapInner.onNext(MonoFlatMap.java:249)
		at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.onNext(MonoPeekTerminal.java:180)
		at reactor.core.publisher.MonoCreate$DefaultMonoSink.success(MonoCreate.java:160)
		at com.mongodb.reactivestreams.client.internal.MongoOperationPublisher.lambda$sinkToCallback$30(MongoOperationPublisher.java:550)
		at com.mongodb.reactivestreams.client.internal.OperationExecutorImpl.lambda$execute$2(OperationExecutorImpl.java:73)
		at com.mongodb.internal.async.ErrorHandlingResultCallback.onResult(ErrorHandlingResultCallback.java:48)
		at com.mongodb.internal.operation.FindOperation$3.onResult(FindOperation.java:755)
		at com.mongodb.internal.operation.OperationHelper$ReferenceCountedReleasingWrappedCallback.onResult(OperationHelper.java:532)
		at com.mongodb.internal.operation.CommandOperationHelper$10.onResult(CommandOperationHelper.java:483)
		at com.mongodb.internal.async.ErrorHandlingResultCallback.onResult(ErrorHandlingResultCallback.java:48)
		at com.mongodb.internal.connection.DefaultServer$DefaultServerProtocolExecutor$2.onResult(DefaultServer.java:286)
		at com.mongodb.internal.async.ErrorHandlingResultCallback.onResult(ErrorHandlingResultCallback.java:48)
		at com.mongodb.internal.connection.CommandProtocolImpl$1.onResult(CommandProtocolImpl.java:84)
		at com.mongodb.internal.connection.DefaultConnectionPool$PooledConnection$2.onResult(DefaultConnectionPool.java:530)
		at com.mongodb.internal.connection.UsageTrackingInternalConnection$2.onResult(UsageTrackingInternalConnection.java:142)
		at com.mongodb.internal.async.ErrorHandlingResultCallback.onResult(ErrorHandlingResultCallback.java:48)
		at com.mongodb.internal.connection.InternalStreamConnection$2$1.onResult(InternalStreamConnection.java:462)
		at com.mongodb.internal.connection.InternalStreamConnection$2$1.onResult(InternalStreamConnection.java:439)
		at com.mongodb.internal.connection.InternalStreamConnection$MessageHeaderCallback$MessageCallback.onResult(InternalStreamConnection.java:744)
		at com.mongodb.internal.connection.InternalStreamConnection$MessageHeaderCallback$MessageCallback.onResult(InternalStreamConnection.java:711)
		at com.mongodb.internal.connection.InternalStreamConnection$5.completed(InternalStreamConnection.java:581)
		at com.mongodb.internal.connection.InternalStreamConnection$5.completed(InternalStreamConnection.java:578)
		at com.mongodb.connection.netty.NettyStream.readAsync(NettyStream.java:322)
		at com.mongodb.connection.netty.NettyStream.readAsync(NettyStream.java:269)
		at com.mongodb.internal.connection.InternalStreamConnection.readAsync(InternalStreamConnection.java:578)
		at com.mongodb.internal.connection.InternalStreamConnection.access$1100(InternalStreamConnection.java:78)
		at com.mongodb.internal.connection.InternalStreamConnection$MessageHeaderCallback.onResult(InternalStreamConnection.java:701)
		at com.mongodb.internal.connection.InternalStreamConnection$MessageHeaderCallback.onResult(InternalStreamConnection.java:686)
		at com.mongodb.internal.connection.InternalStreamConnection$5.completed(InternalStreamConnection.java:581)
		at com.mongodb.internal.connection.InternalStreamConnection$5.completed(InternalStreamConnection.java:578)
		at com.mongodb.connection.netty.NettyStream.readAsync(NettyStream.java:322)
		at com.mongodb.connection.netty.NettyStream.handleReadResponse(NettyStream.java:350)
		at com.mongodb.connection.netty.NettyStream.access$1200(NettyStream.java:104)
		at com.mongodb.connection.netty.NettyStream$InboundBufferHandler.channelRead0(NettyStream.java:409)
		at com.mongodb.connection.netty.NettyStream$InboundBufferHandler.channelRead0(NettyStream.java:406)
		at io.netty.channel.SimpleChannelInboundHandler.channelRead(SimpleChannelInboundHandler.java:99)
		at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:379)
		at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:365)
		at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:357)
		at io.netty.channel.DefaultChannelPipeline$HeadContext.channelRead(DefaultChannelPipeline.java:1410)
		at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:379)
		at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:365)
		at io.netty.channel.DefaultChannelPipeline.fireChannelRead(DefaultChannelPipeline.java:919)
		at io.netty.channel.nio.AbstractNioByteChannel$NioByteUnsafe.read(AbstractNioByteChannel.java:166)
		at io.netty.channel.nio.NioEventLoop.processSelectedKey(NioEventLoop.java:719)
		at io.netty.channel.nio.NioEventLoop.processSelectedKeysOptimized(NioEventLoop.java:655)
		at io.netty.channel.nio.NioEventLoop.processSelectedKeys(NioEventLoop.java:581)
		at io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:493)
		at io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:989)
		at io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)
		at io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)
		at java.lang.Thread.run(Thread.java:748)
Caused by: java.lang.IllegalArgumentException: Could not convert number [9.89898968968E11] of type [java.lang.Double] to target class [java.lang.Integer]: overflow
	at org.springframework.util.NumberUtils.raiseOverflowException(NumberUtils.java:175)
	at org.springframework.util.NumberUtils.convertNumberToTargetClass(NumberUtils.java:108)
	at org.springframework.core.convert.support.NumberToNumberConverterFactory$NumberToNumber.convert(NumberToNumberConverterFactory.java:66)
	at org.springframework.core.convert.support.NumberToNumberConverterFactory$NumberToNumber.convert(NumberToNumberConverterFactory.java:56)
	at org.springframework.core.convert.support.GenericConversionService$ConverterFactoryAdapter.convert(GenericConversionService.java:437)
	at org.springframework.core.convert.support.ConversionUtils.invokeConverter(ConversionUtils.java:41)
	at org.springframework.core.convert.support.GenericConversionService.convert(GenericConversionService.java:192)
	at org.springframework.core.convert.support.GenericConversionService.convert(GenericConversionService.java:175)
	at org.springframework.data.mongodb.core.convert.MappingMongoConverter.doConvert(MappingMongoConverter.java:1547)
	at org.springframework.data.mongodb.core.convert.MappingMongoConverter.doConvert(MappingMongoConverter.java:1540)
	at org.springframework.data.mongodb.core.convert.MappingMongoConverter.getPotentiallyConvertedSimpleRead(MappingMongoConverter.java:1060)
	at org.springframework.data.mongodb.core.convert.MappingMongoConverter.getPotentiallyConvertedSimpleRead(MappingMongoConverter.java:1038)
	at org.springframework.data.mongodb.core.convert.MappingMongoConverter$ConversionContext.convert(MappingMongoConverter.java:1919)
	at org.springframework.data.mongodb.core.convert.MappingMongoConverter$MongoDbPropertyValueProvider.getPropertyValue(MappingMongoConverter.java:1641)
	at org.springframework.data.mongodb.core.convert.MappingMongoConverter.readProperties(MappingMongoConverter.java:481)
	at org.springframework.data.mongodb.core.convert.MappingMongoConverter.populateProperties(MappingMongoConverter.java:394)
	at org.springframework.data.mongodb.core.convert.MappingMongoConverter.read(MappingMongoConverter.java:372)
	at org.springframework.data.mongodb.core.convert.MappingMongoConverter.readDocument(MappingMongoConverter.java:342)
	at org.springframework.data.mongodb.core.convert.MappingMongoConverter.read(MappingMongoConverter.java:278)
	at org.springframework.data.mongodb.core.convert.MappingMongoConverter.read(MappingMongoConverter.java:274)
	at org.springframework.data.mongodb.core.convert.MappingMongoConverter.read(MappingMongoConverter.java:102)
	at org.springframework.data.mongodb.core.ReactiveMongoTemplate$ReadDocumentCallback.doWith(ReactiveMongoTemplate.java:3155)
	at reactor.core.publisher.FluxConcatMap$ConcatMapImmediate.drain(FluxConcatMap.java:374)
	at reactor.core.publisher.FluxConcatMap$ConcatMapImmediate.onNext(FluxConcatMap.java:250)
	at reactor.core.publisher.FluxCreate$BufferAsyncSink.drain(FluxCreate.java:793)
	at reactor.core.publisher.FluxCreate$BufferAsyncSink.next(FluxCreate.java:718)
	at reactor.core.publisher.FluxCreate$SerializedFluxSink.next(FluxCreate.java:154)
	at java.util.ArrayList.forEach(ArrayList.java:1259)
	at com.mongodb.reactivestreams.client.internal.BatchCursorFlux.lambda$recurseCursor$4(BatchCursorFlux.java:94)
	at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.onNext(MonoPeekTerminal.java:171)
	at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.onNext(MonoPeekTerminal.java:180)
	at reactor.core.publisher.FluxPeekFuseable$PeekConditionalSubscriber.onNext(FluxPeekFuseable.java:854)
	at reactor.core.publisher.MonoCreate$DefaultMonoSink.success(MonoCreate.java:160)
	at com.mongodb.reactivestreams.client.internal.MongoOperationPublisher.lambda$sinkToCallback$30(MongoOperationPublisher.java:550)
	at com.mongodb.internal.operation.AsyncQueryBatchCursor.next(AsyncQueryBatchCursor.java:207)
	at com.mongodb.internal.operation.AsyncQueryBatchCursor.next(AsyncQueryBatchCursor.java:146)
	at com.mongodb.reactivestreams.client.internal.BatchCursor.lambda$next$0(BatchCursor.java:35)
	at reactor.core.publisher.MonoCreate.subscribe(MonoCreate.java:57)
	at reactor.core.publisher.Mono.subscribe(Mono.java:4150)
	at reactor.core.publisher.Mono.subscribeWith(Mono.java:4265)
	at reactor.core.publisher.Mono.subscribe(Mono.java:3982)
	at com.mongodb.reactivestreams.client.internal.BatchCursorFlux.recurseCursor(BatchCursorFlux.java:104)
	at com.mongodb.reactivestreams.client.internal.BatchCursorFlux.lambda$subscribe$0(BatchCursorFlux.java:56)
	at reactor.core.publisher.LambdaMonoSubscriber.onNext(LambdaMonoSubscriber.java:171)
	at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onNext(FluxMapFuseable.java:127)
	at reactor.core.publisher.Operators$MonoSubscriber.complete(Operators.java:1815)
	at reactor.core.publisher.MonoFlatMap$FlatMapInner.onNext(MonoFlatMap.java:249)
	at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.onNext(MonoPeekTerminal.java:180)
	at reactor.core.publisher.MonoCreate$DefaultMonoSink.success(MonoCreate.java:160)
	at com.mongodb.reactivestreams.client.internal.MongoOperationPublisher.lambda$sinkToCallback$30(MongoOperationPublisher.java:550)
	at com.mongodb.reactivestreams.client.internal.OperationExecutorImpl.lambda$execute$2(OperationExecutorImpl.java:73)
	at com.mongodb.internal.async.ErrorHandlingResultCallback.onResult(ErrorHandlingResultCallback.java:48)
	at com.mongodb.internal.operation.FindOperation$3.onResult(FindOperation.java:755)
	at com.mongodb.internal.operation.OperationHelper$ReferenceCountedReleasingWrappedCallback.onResult(OperationHelper.java:532)
	at com.mongodb.internal.operation.CommandOperationHelper$10.onResult(CommandOperationHelper.java:483)
	at com.mongodb.internal.async.ErrorHandlingResultCallback.onResult(ErrorHandlingResultCallback.java:48)
	at com.mongodb.internal.connection.DefaultServer$DefaultServerProtocolExecutor$2.onResult(DefaultServer.java:286)
	at com.mongodb.internal.async.ErrorHandlingResultCallback.onResult(ErrorHandlingResultCallback.java:48)
	at com.mongodb.internal.connection.CommandProtocolImpl$1.onResult(CommandProtocolImpl.java:84)
	at com.mongodb.internal.connection.DefaultConnectionPool$PooledConnection$2.onResult(DefaultConnectionPool.java:530)
	at com.mongodb.internal.connection.UsageTrackingInternalConnection$2.onResult(UsageTrackingInternalConnection.java:142)
	at com.mongodb.internal.async.ErrorHandlingResultCallback.onResult(ErrorHandlingResultCallback.java:48)
	at com.mongodb.internal.connection.InternalStreamConnection$2$1.onResult(InternalStreamConnection.java:462)
	at com.mongodb.internal.connection.InternalStreamConnection$2$1.onResult(InternalStreamConnection.java:439)
	at com.mongodb.internal.connection.InternalStreamConnection$MessageHeaderCallback$MessageCallback.onResult(InternalStreamConnection.java:744)
	at com.mongodb.internal.connection.InternalStreamConnection$MessageHeaderCallback$MessageCallback.onResult(InternalStreamConnection.java:711)
	at com.mongodb.internal.connection.InternalStreamConnection$5.completed(InternalStreamConnection.java:581)
	at com.mongodb.internal.connection.InternalStreamConnection$5.completed(InternalStreamConnection.java:578)
	at com.mongodb.connection.netty.NettyStream.readAsync(NettyStream.java:322)
	at com.mongodb.connection.netty.NettyStream.readAsync(NettyStream.java:269)
	at com.mongodb.internal.connection.InternalStreamConnection.readAsync(InternalStreamConnection.java:578)
	at com.mongodb.internal.connection.InternalStreamConnection.access$1100(InternalStreamConnection.java:78)
	at com.mongodb.internal.connection.InternalStreamConnection$MessageHeaderCallback.onResult(InternalStreamConnection.java:701)
	at com.mongodb.internal.connection.InternalStreamConnection$MessageHeaderCallback.onResult(InternalStreamConnection.java:686)
	at com.mongodb.internal.connection.InternalStreamConnection$5.completed(InternalStreamConnection.java:581)
	at com.mongodb.internal.connection.InternalStreamConnection$5.completed(InternalStreamConnection.java:578)
	at com.mongodb.connection.netty.NettyStream.readAsync(NettyStream.java:322)
	at com.mongodb.connection.netty.NettyStream.handleReadResponse(NettyStream.java:350)
	at com.mongodb.connection.netty.NettyStream.access$1200(NettyStream.java:104)
	at com.mongodb.connection.netty.NettyStream$InboundBufferHandler.channelRead0(NettyStream.java:409)
	at com.mongodb.connection.netty.NettyStream$InboundBufferHandler.channelRead0(NettyStream.java:406)
	at io.netty.channel.SimpleChannelInboundHandler.channelRead(SimpleChannelInboundHandler.java:99)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:379)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:365)
	at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:357)
	at io.netty.channel.DefaultChannelPipeline$HeadContext.channelRead(DefaultChannelPipeline.java:1410)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:379)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:365)
	at io.netty.channel.DefaultChannelPipeline.fireChannelRead(DefaultChannelPipeline.java:919)
	at io.netty.channel.nio.AbstractNioByteChannel$NioByteUnsafe.read(AbstractNioByteChannel.java:166)
	at io.netty.channel.nio.NioEventLoop.processSelectedKey(NioEventLoop.java:719)
	at io.netty.channel.nio.NioEventLoop.processSelectedKeysOptimized(NioEventLoop.java:655)
	at io.netty.channel.nio.NioEventLoop.processSelectedKeys(NioEventLoop.java:581)
	at io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:493)
	at io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:989)
	at io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)
	at io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)
	at java.lang.Thread.run(Thread.java:748)
2021-07-19 19:02:25,453 DEBUG [nioEventLoopGroup-3-3] org.springframework.core.log.CompositeLog : [4147b1bf-6, L:/0:0:0:0:0:0:0:1:8090 - R:/0:0:0:0:0:0:0:1:60904] Encoding [{timestamp=Mon Jul 19 19:02:25 COT 2021, path=/customer, status=500, error=Internal Server Error, re (truncated)...]
2021-07-19 19:02:25,454 DEBUG [reactor-http-nio-3] org.springframework.core.log.LogFormatUtils : [4147b1bf-6, L:/0:0:0:0:0:0:0:1:8090 - R:/0:0:0:0:0:0:0:1:60904] Completed 500 INTERNAL_SERVER_ERROR
2021-07-19 19:02:25,990 DEBUG [reactor-http-nio-3] org.springframework.core.log.LogFormatUtils : [4147b1bf-7, L:/0:0:0:0:0:0:0:1:8090 - R:/0:0:0:0:0:0:0:1:60904] HTTP GET "/customer"
2021-07-19 19:02:25,991 DEBUG [reactor-http-nio-3] org.springframework.web.reactive.handler.AbstractHandlerMapping : [4147b1bf-7, L:/0:0:0:0:0:0:0:1:8090 - R:/0:0:0:0:0:0:0:1:60904] Mapped to com.bank.manage.customer.controller.CustomerController#getAllCustomers()
2021-07-19 19:02:25,991 INFO [reactor-http-nio-3] com.bank.manage.customer.controller.CustomerController :  EndPoit get by all customers {} 
2021-07-19 19:02:25,992 DEBUG [reactor-http-nio-3] org.springframework.web.reactive.result.HandlerResultHandlerSupport : [4147b1bf-7, L:/0:0:0:0:0:0:0:1:8090 - R:/0:0:0:0:0:0:0:1:60904] Found 'Content-Type:application/json' in response
2021-07-19 19:02:25,993 DEBUG [reactor-http-nio-3] org.springframework.web.reactive.result.method.annotation.AbstractMessageWriterResultHandler : [4147b1bf-7, L:/0:0:0:0:0:0:0:1:8090 - R:/0:0:0:0:0:0:0:1:60904] 0..N [com.bank.manage.customer.persistence.entity.Customer]
2021-07-19 19:02:25,998 DEBUG [nioEventLoopGroup-3-3] org.springframework.core.log.CompositeLog : [4147b1bf-7, L:/0:0:0:0:0:0:0:1:8090 - R:/0:0:0:0:0:0:0:1:60904] Resolved [ConversionFailedException: Failed to convert from type [java.lang.Double] to type [java.lang.Integer] for value '9.89898968968E11'; nested exception is java.lang.IllegalArgumentException: Could not convert number [9.89898968968E11] of type [java.lang.Double] to target class [java.lang.Integer]: overflow] for HTTP GET /customer
2021-07-19 19:02:25,999 ERROR [nioEventLoopGroup-3-3] org.springframework.core.log.CompositeLog : [4147b1bf-7, L:/0:0:0:0:0:0:0:1:8090 - R:/0:0:0:0:0:0:0:1:60904]  500 Server Error for HTTP GET "/customer"
org.springframework.core.convert.ConversionFailedException: Failed to convert from type [java.lang.Double] to type [java.lang.Integer] for value '9.89898968968E11'; nested exception is java.lang.IllegalArgumentException: Could not convert number [9.89898968968E11] of type [java.lang.Double] to target class [java.lang.Integer]: overflow
	at org.springframework.core.convert.support.ConversionUtils.invokeConverter(ConversionUtils.java:47)
	Suppressed: reactor.core.publisher.FluxOnAssembly$OnAssemblyException: 
Error has been observed at the following site(s):
	|_ checkpoint ⇢ Handler com.bank.manage.customer.controller.CustomerController#getAllCustomers() [DispatcherHandler]
	|_ checkpoint ⇢ org.springframework.boot.actuate.metrics.web.reactive.server.MetricsWebFilter [DefaultWebFilterChain]
	|_ checkpoint ⇢ HTTP GET "/customer" [ExceptionHandlingWebHandler]
Stack trace:
		at org.springframework.core.convert.support.ConversionUtils.invokeConverter(ConversionUtils.java:47)
		at org.springframework.core.convert.support.GenericConversionService.convert(GenericConversionService.java:192)
		at org.springframework.core.convert.support.GenericConversionService.convert(GenericConversionService.java:175)
		at org.springframework.data.mongodb.core.convert.MappingMongoConverter.doConvert(MappingMongoConverter.java:1547)
		at org.springframework.data.mongodb.core.convert.MappingMongoConverter.doConvert(MappingMongoConverter.java:1540)
		at org.springframework.data.mongodb.core.convert.MappingMongoConverter.getPotentiallyConvertedSimpleRead(MappingMongoConverter.java:1060)
		at org.springframework.data.mongodb.core.convert.MappingMongoConverter.getPotentiallyConvertedSimpleRead(MappingMongoConverter.java:1038)
		at org.springframework.data.mongodb.core.convert.MappingMongoConverter$ConversionContext.convert(MappingMongoConverter.java:1919)
		at org.springframework.data.mongodb.core.convert.MappingMongoConverter$MongoDbPropertyValueProvider.getPropertyValue(MappingMongoConverter.java:1641)
		at org.springframework.data.mongodb.core.convert.MappingMongoConverter.readProperties(MappingMongoConverter.java:481)
		at org.springframework.data.mongodb.core.convert.MappingMongoConverter.populateProperties(MappingMongoConverter.java:394)
		at org.springframework.data.mongodb.core.convert.MappingMongoConverter.read(MappingMongoConverter.java:372)
		at org.springframework.data.mongodb.core.convert.MappingMongoConverter.readDocument(MappingMongoConverter.java:342)
		at org.springframework.data.mongodb.core.convert.MappingMongoConverter.read(MappingMongoConverter.java:278)
		at org.springframework.data.mongodb.core.convert.MappingMongoConverter.read(MappingMongoConverter.java:274)
		at org.springframework.data.mongodb.core.convert.MappingMongoConverter.read(MappingMongoConverter.java:102)
		at org.springframework.data.mongodb.core.ReactiveMongoTemplate$ReadDocumentCallback.doWith(ReactiveMongoTemplate.java:3155)
		at reactor.core.publisher.FluxConcatMap$ConcatMapImmediate.drain(FluxConcatMap.java:374)
		at reactor.core.publisher.FluxConcatMap$ConcatMapImmediate.onNext(FluxConcatMap.java:250)
		at reactor.core.publisher.FluxCreate$BufferAsyncSink.drain(FluxCreate.java:793)
		at reactor.core.publisher.FluxCreate$BufferAsyncSink.next(FluxCreate.java:718)
		at reactor.core.publisher.FluxCreate$SerializedFluxSink.next(FluxCreate.java:154)
		at java.util.ArrayList.forEach(ArrayList.java:1259)
		at com.mongodb.reactivestreams.client.internal.BatchCursorFlux.lambda$recurseCursor$4(BatchCursorFlux.java:94)
		at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.onNext(MonoPeekTerminal.java:171)
		at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.onNext(MonoPeekTerminal.java:180)
		at reactor.core.publisher.FluxPeekFuseable$PeekConditionalSubscriber.onNext(FluxPeekFuseable.java:854)
		at reactor.core.publisher.MonoCreate$DefaultMonoSink.success(MonoCreate.java:160)
		at com.mongodb.reactivestreams.client.internal.MongoOperationPublisher.lambda$sinkToCallback$30(MongoOperationPublisher.java:550)
		at com.mongodb.internal.operation.AsyncQueryBatchCursor.next(AsyncQueryBatchCursor.java:207)
		at com.mongodb.internal.operation.AsyncQueryBatchCursor.next(AsyncQueryBatchCursor.java:146)
		at com.mongodb.reactivestreams.client.internal.BatchCursor.lambda$next$0(BatchCursor.java:35)
		at reactor.core.publisher.MonoCreate.subscribe(MonoCreate.java:57)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4150)
		at reactor.core.publisher.Mono.subscribeWith(Mono.java:4265)
		at reactor.core.publisher.Mono.subscribe(Mono.java:3982)
		at com.mongodb.reactivestreams.client.internal.BatchCursorFlux.recurseCursor(BatchCursorFlux.java:104)
		at com.mongodb.reactivestreams.client.internal.BatchCursorFlux.lambda$subscribe$0(BatchCursorFlux.java:56)
		at reactor.core.publisher.LambdaMonoSubscriber.onNext(LambdaMonoSubscriber.java:171)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onNext(FluxMapFuseable.java:127)
		at reactor.core.publisher.Operators$MonoSubscriber.complete(Operators.java:1815)
		at reactor.core.publisher.MonoFlatMap$FlatMapInner.onNext(MonoFlatMap.java:249)
		at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.onNext(MonoPeekTerminal.java:180)
		at reactor.core.publisher.MonoCreate$DefaultMonoSink.success(MonoCreate.java:160)
		at com.mongodb.reactivestreams.client.internal.MongoOperationPublisher.lambda$sinkToCallback$30(MongoOperationPublisher.java:550)
		at com.mongodb.reactivestreams.client.internal.OperationExecutorImpl.lambda$execute$2(OperationExecutorImpl.java:73)
		at com.mongodb.internal.async.ErrorHandlingResultCallback.onResult(ErrorHandlingResultCallback.java:48)
		at com.mongodb.internal.operation.FindOperation$3.onResult(FindOperation.java:755)
		at com.mongodb.internal.operation.OperationHelper$ReferenceCountedReleasingWrappedCallback.onResult(OperationHelper.java:532)
		at com.mongodb.internal.operation.CommandOperationHelper$10.onResult(CommandOperationHelper.java:483)
		at com.mongodb.internal.async.ErrorHandlingResultCallback.onResult(ErrorHandlingResultCallback.java:48)
		at com.mongodb.internal.connection.DefaultServer$DefaultServerProtocolExecutor$2.onResult(DefaultServer.java:286)
		at com.mongodb.internal.async.ErrorHandlingResultCallback.onResult(ErrorHandlingResultCallback.java:48)
		at com.mongodb.internal.connection.CommandProtocolImpl$1.onResult(CommandProtocolImpl.java:84)
		at com.mongodb.internal.connection.DefaultConnectionPool$PooledConnection$2.onResult(DefaultConnectionPool.java:530)
		at com.mongodb.internal.connection.UsageTrackingInternalConnection$2.onResult(UsageTrackingInternalConnection.java:142)
		at com.mongodb.internal.async.ErrorHandlingResultCallback.onResult(ErrorHandlingResultCallback.java:48)
		at com.mongodb.internal.connection.InternalStreamConnection$2$1.onResult(InternalStreamConnection.java:462)
		at com.mongodb.internal.connection.InternalStreamConnection$2$1.onResult(InternalStreamConnection.java:439)
		at com.mongodb.internal.connection.InternalStreamConnection$MessageHeaderCallback$MessageCallback.onResult(InternalStreamConnection.java:744)
		at com.mongodb.internal.connection.InternalStreamConnection$MessageHeaderCallback$MessageCallback.onResult(InternalStreamConnection.java:711)
		at com.mongodb.internal.connection.InternalStreamConnection$5.completed(InternalStreamConnection.java:581)
		at com.mongodb.internal.connection.InternalStreamConnection$5.completed(InternalStreamConnection.java:578)
		at com.mongodb.connection.netty.NettyStream.readAsync(NettyStream.java:322)
		at com.mongodb.connection.netty.NettyStream.readAsync(NettyStream.java:269)
		at com.mongodb.internal.connection.InternalStreamConnection.readAsync(InternalStreamConnection.java:578)
		at com.mongodb.internal.connection.InternalStreamConnection.access$1100(InternalStreamConnection.java:78)
		at com.mongodb.internal.connection.InternalStreamConnection$MessageHeaderCallback.onResult(InternalStreamConnection.java:701)
		at com.mongodb.internal.connection.InternalStreamConnection$MessageHeaderCallback.onResult(InternalStreamConnection.java:686)
		at com.mongodb.internal.connection.InternalStreamConnection$5.completed(InternalStreamConnection.java:581)
		at com.mongodb.internal.connection.InternalStreamConnection$5.completed(InternalStreamConnection.java:578)
		at com.mongodb.connection.netty.NettyStream.readAsync(NettyStream.java:322)
		at com.mongodb.connection.netty.NettyStream.handleReadResponse(NettyStream.java:350)
		at com.mongodb.connection.netty.NettyStream.access$1200(NettyStream.java:104)
		at com.mongodb.connection.netty.NettyStream$InboundBufferHandler.channelRead0(NettyStream.java:409)
		at com.mongodb.connection.netty.NettyStream$InboundBufferHandler.channelRead0(NettyStream.java:406)
		at io.netty.channel.SimpleChannelInboundHandler.channelRead(SimpleChannelInboundHandler.java:99)
		at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:379)
		at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:365)
		at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:357)
		at io.netty.channel.DefaultChannelPipeline$HeadContext.channelRead(DefaultChannelPipeline.java:1410)
		at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:379)
		at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:365)
		at io.netty.channel.DefaultChannelPipeline.fireChannelRead(DefaultChannelPipeline.java:919)
		at io.netty.channel.nio.AbstractNioByteChannel$NioByteUnsafe.read(AbstractNioByteChannel.java:166)
		at io.netty.channel.nio.NioEventLoop.processSelectedKey(NioEventLoop.java:719)
		at io.netty.channel.nio.NioEventLoop.processSelectedKeysOptimized(NioEventLoop.java:655)
		at io.netty.channel.nio.NioEventLoop.processSelectedKeys(NioEventLoop.java:581)
		at io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:493)
		at io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:989)
		at io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)
		at io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)
		at java.lang.Thread.run(Thread.java:748)
Caused by: java.lang.IllegalArgumentException: Could not convert number [9.89898968968E11] of type [java.lang.Double] to target class [java.lang.Integer]: overflow
	at org.springframework.util.NumberUtils.raiseOverflowException(NumberUtils.java:175)
	at org.springframework.util.NumberUtils.convertNumberToTargetClass(NumberUtils.java:108)
	at org.springframework.core.convert.support.NumberToNumberConverterFactory$NumberToNumber.convert(NumberToNumberConverterFactory.java:66)
	at org.springframework.core.convert.support.NumberToNumberConverterFactory$NumberToNumber.convert(NumberToNumberConverterFactory.java:56)
	at org.springframework.core.convert.support.GenericConversionService$ConverterFactoryAdapter.convert(GenericConversionService.java:437)
	at org.springframework.core.convert.support.ConversionUtils.invokeConverter(ConversionUtils.java:41)
	at org.springframework.core.convert.support.GenericConversionService.convert(GenericConversionService.java:192)
	at org.springframework.core.convert.support.GenericConversionService.convert(GenericConversionService.java:175)
	at org.springframework.data.mongodb.core.convert.MappingMongoConverter.doConvert(MappingMongoConverter.java:1547)
	at org.springframework.data.mongodb.core.convert.MappingMongoConverter.doConvert(MappingMongoConverter.java:1540)
	at org.springframework.data.mongodb.core.convert.MappingMongoConverter.getPotentiallyConvertedSimpleRead(MappingMongoConverter.java:1060)
	at org.springframework.data.mongodb.core.convert.MappingMongoConverter.getPotentiallyConvertedSimpleRead(MappingMongoConverter.java:1038)
	at org.springframework.data.mongodb.core.convert.MappingMongoConverter$ConversionContext.convert(MappingMongoConverter.java:1919)
	at org.springframework.data.mongodb.core.convert.MappingMongoConverter$MongoDbPropertyValueProvider.getPropertyValue(MappingMongoConverter.java:1641)
	at org.springframework.data.mongodb.core.convert.MappingMongoConverter.readProperties(MappingMongoConverter.java:481)
	at org.springframework.data.mongodb.core.convert.MappingMongoConverter.populateProperties(MappingMongoConverter.java:394)
	at org.springframework.data.mongodb.core.convert.MappingMongoConverter.read(MappingMongoConverter.java:372)
	at org.springframework.data.mongodb.core.convert.MappingMongoConverter.readDocument(MappingMongoConverter.java:342)
	at org.springframework.data.mongodb.core.convert.MappingMongoConverter.read(MappingMongoConverter.java:278)
	at org.springframework.data.mongodb.core.convert.MappingMongoConverter.read(MappingMongoConverter.java:274)
	at org.springframework.data.mongodb.core.convert.MappingMongoConverter.read(MappingMongoConverter.java:102)
	at org.springframework.data.mongodb.core.ReactiveMongoTemplate$ReadDocumentCallback.doWith(ReactiveMongoTemplate.java:3155)
	at reactor.core.publisher.FluxConcatMap$ConcatMapImmediate.drain(FluxConcatMap.java:374)
	at reactor.core.publisher.FluxConcatMap$ConcatMapImmediate.onNext(FluxConcatMap.java:250)
	at reactor.core.publisher.FluxCreate$BufferAsyncSink.drain(FluxCreate.java:793)
	at reactor.core.publisher.FluxCreate$BufferAsyncSink.next(FluxCreate.java:718)
	at reactor.core.publisher.FluxCreate$SerializedFluxSink.next(FluxCreate.java:154)
	at java.util.ArrayList.forEach(ArrayList.java:1259)
	at com.mongodb.reactivestreams.client.internal.BatchCursorFlux.lambda$recurseCursor$4(BatchCursorFlux.java:94)
	at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.onNext(MonoPeekTerminal.java:171)
	at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.onNext(MonoPeekTerminal.java:180)
	at reactor.core.publisher.FluxPeekFuseable$PeekConditionalSubscriber.onNext(FluxPeekFuseable.java:854)
	at reactor.core.publisher.MonoCreate$DefaultMonoSink.success(MonoCreate.java:160)
	at com.mongodb.reactivestreams.client.internal.MongoOperationPublisher.lambda$sinkToCallback$30(MongoOperationPublisher.java:550)
	at com.mongodb.internal.operation.AsyncQueryBatchCursor.next(AsyncQueryBatchCursor.java:207)
	at com.mongodb.internal.operation.AsyncQueryBatchCursor.next(AsyncQueryBatchCursor.java:146)
	at com.mongodb.reactivestreams.client.internal.BatchCursor.lambda$next$0(BatchCursor.java:35)
	at reactor.core.publisher.MonoCreate.subscribe(MonoCreate.java:57)
	at reactor.core.publisher.Mono.subscribe(Mono.java:4150)
	at reactor.core.publisher.Mono.subscribeWith(Mono.java:4265)
	at reactor.core.publisher.Mono.subscribe(Mono.java:3982)
	at com.mongodb.reactivestreams.client.internal.BatchCursorFlux.recurseCursor(BatchCursorFlux.java:104)
	at com.mongodb.reactivestreams.client.internal.BatchCursorFlux.lambda$subscribe$0(BatchCursorFlux.java:56)
	at reactor.core.publisher.LambdaMonoSubscriber.onNext(LambdaMonoSubscriber.java:171)
	at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onNext(FluxMapFuseable.java:127)
	at reactor.core.publisher.Operators$MonoSubscriber.complete(Operators.java:1815)
	at reactor.core.publisher.MonoFlatMap$FlatMapInner.onNext(MonoFlatMap.java:249)
	at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.onNext(MonoPeekTerminal.java:180)
	at reactor.core.publisher.MonoCreate$DefaultMonoSink.success(MonoCreate.java:160)
	at com.mongodb.reactivestreams.client.internal.MongoOperationPublisher.lambda$sinkToCallback$30(MongoOperationPublisher.java:550)
	at com.mongodb.reactivestreams.client.internal.OperationExecutorImpl.lambda$execute$2(OperationExecutorImpl.java:73)
	at com.mongodb.internal.async.ErrorHandlingResultCallback.onResult(ErrorHandlingResultCallback.java:48)
	at com.mongodb.internal.operation.FindOperation$3.onResult(FindOperation.java:755)
	at com.mongodb.internal.operation.OperationHelper$ReferenceCountedReleasingWrappedCallback.onResult(OperationHelper.java:532)
	at com.mongodb.internal.operation.CommandOperationHelper$10.onResult(CommandOperationHelper.java:483)
	at com.mongodb.internal.async.ErrorHandlingResultCallback.onResult(ErrorHandlingResultCallback.java:48)
	at com.mongodb.internal.connection.DefaultServer$DefaultServerProtocolExecutor$2.onResult(DefaultServer.java:286)
	at com.mongodb.internal.async.ErrorHandlingResultCallback.onResult(ErrorHandlingResultCallback.java:48)
	at com.mongodb.internal.connection.CommandProtocolImpl$1.onResult(CommandProtocolImpl.java:84)
	at com.mongodb.internal.connection.DefaultConnectionPool$PooledConnection$2.onResult(DefaultConnectionPool.java:530)
	at com.mongodb.internal.connection.UsageTrackingInternalConnection$2.onResult(UsageTrackingInternalConnection.java:142)
	at com.mongodb.internal.async.ErrorHandlingResultCallback.onResult(ErrorHandlingResultCallback.java:48)
	at com.mongodb.internal.connection.InternalStreamConnection$2$1.onResult(InternalStreamConnection.java:462)
	at com.mongodb.internal.connection.InternalStreamConnection$2$1.onResult(InternalStreamConnection.java:439)
	at com.mongodb.internal.connection.InternalStreamConnection$MessageHeaderCallback$MessageCallback.onResult(InternalStreamConnection.java:744)
	at com.mongodb.internal.connection.InternalStreamConnection$MessageHeaderCallback$MessageCallback.onResult(InternalStreamConnection.java:711)
	at com.mongodb.internal.connection.InternalStreamConnection$5.completed(InternalStreamConnection.java:581)
	at com.mongodb.internal.connection.InternalStreamConnection$5.completed(InternalStreamConnection.java:578)
	at com.mongodb.connection.netty.NettyStream.readAsync(NettyStream.java:322)
	at com.mongodb.connection.netty.NettyStream.readAsync(NettyStream.java:269)
	at com.mongodb.internal.connection.InternalStreamConnection.readAsync(InternalStreamConnection.java:578)
	at com.mongodb.internal.connection.InternalStreamConnection.access$1100(InternalStreamConnection.java:78)
	at com.mongodb.internal.connection.InternalStreamConnection$MessageHeaderCallback.onResult(InternalStreamConnection.java:701)
	at com.mongodb.internal.connection.InternalStreamConnection$MessageHeaderCallback.onResult(InternalStreamConnection.java:686)
	at com.mongodb.internal.connection.InternalStreamConnection$5.completed(InternalStreamConnection.java:581)
	at com.mongodb.internal.connection.InternalStreamConnection$5.completed(InternalStreamConnection.java:578)
	at com.mongodb.connection.netty.NettyStream.readAsync(NettyStream.java:322)
	at com.mongodb.connection.netty.NettyStream.handleReadResponse(NettyStream.java:350)
	at com.mongodb.connection.netty.NettyStream.access$1200(NettyStream.java:104)
	at com.mongodb.connection.netty.NettyStream$InboundBufferHandler.channelRead0(NettyStream.java:409)
	at com.mongodb.connection.netty.NettyStream$InboundBufferHandler.channelRead0(NettyStream.java:406)
	at io.netty.channel.SimpleChannelInboundHandler.channelRead(SimpleChannelInboundHandler.java:99)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:379)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:365)
	at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:357)
	at io.netty.channel.DefaultChannelPipeline$HeadContext.channelRead(DefaultChannelPipeline.java:1410)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:379)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:365)
	at io.netty.channel.DefaultChannelPipeline.fireChannelRead(DefaultChannelPipeline.java:919)
	at io.netty.channel.nio.AbstractNioByteChannel$NioByteUnsafe.read(AbstractNioByteChannel.java:166)
	at io.netty.channel.nio.NioEventLoop.processSelectedKey(NioEventLoop.java:719)
	at io.netty.channel.nio.NioEventLoop.processSelectedKeysOptimized(NioEventLoop.java:655)
	at io.netty.channel.nio.NioEventLoop.processSelectedKeys(NioEventLoop.java:581)
	at io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:493)
	at io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:989)
	at io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)
	at io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)
	at java.lang.Thread.run(Thread.java:748)
2021-07-19 19:02:26,000 DEBUG [nioEventLoopGroup-3-3] org.springframework.core.log.CompositeLog : [4147b1bf-7, L:/0:0:0:0:0:0:0:1:8090 - R:/0:0:0:0:0:0:0:1:60904] Encoding [{timestamp=Mon Jul 19 19:02:25 COT 2021, path=/customer, status=500, error=Internal Server Error, re (truncated)...]
2021-07-19 19:02:26,002 DEBUG [reactor-http-nio-3] org.springframework.core.log.LogFormatUtils : [4147b1bf-7, L:/0:0:0:0:0:0:0:1:8090 - R:/0:0:0:0:0:0:0:1:60904] Completed 500 INTERNAL_SERVER_ERROR
2021-07-19 19:02:32,832 DEBUG [DiscoveryClient-CacheRefreshExecutor-0] org.springframework.core.log.CompositeLog : HTTP GET http://localhost:8761/eureka/apps/delta
2021-07-19 19:02:32,834 DEBUG [DiscoveryClient-CacheRefreshExecutor-0] org.springframework.core.log.CompositeLog : Accept=[application/json, application/*+json]
2021-07-19 19:02:32,836 DEBUG [DiscoveryClient-HeartbeatExecutor-0] org.springframework.core.log.CompositeLog : HTTP PUT http://localhost:8761/eureka/apps/CUSTOMER_SERVICE/host.docker.internal:customer_service:8090?status=UP&lastDirtyTimestamp=1626739322847
2021-07-19 19:02:32,856 DEBUG [DiscoveryClient-CacheRefreshExecutor-0] org.springframework.core.log.CompositeLog : Response 200 OK
2021-07-19 19:02:32,857 DEBUG [DiscoveryClient-CacheRefreshExecutor-0] org.springframework.core.log.CompositeLog : Reading to [org.springframework.cloud.netflix.eureka.http.EurekaApplications]
2021-07-19 19:02:32,861 DEBUG [DiscoveryClient-HeartbeatExecutor-0] org.springframework.core.log.CompositeLog : Accept=[application/json, application/*+json]
2021-07-19 19:02:32,865 DEBUG [DiscoveryClient-HeartbeatExecutor-0] org.springframework.core.log.CompositeLog : Response 200 OK
2021-07-19 19:03:02,862 DEBUG [DiscoveryClient-CacheRefreshExecutor-0] org.springframework.core.log.CompositeLog : HTTP GET http://localhost:8761/eureka/apps/delta
2021-07-19 19:03:02,863 DEBUG [DiscoveryClient-CacheRefreshExecutor-0] org.springframework.core.log.CompositeLog : Accept=[application/json, application/*+json]
2021-07-19 19:03:02,866 DEBUG [DiscoveryClient-HeartbeatExecutor-0] org.springframework.core.log.CompositeLog : HTTP PUT http://localhost:8761/eureka/apps/CUSTOMER_SERVICE/host.docker.internal:customer_service:8090?status=UP&lastDirtyTimestamp=1626739322847
2021-07-19 19:03:02,866 DEBUG [DiscoveryClient-HeartbeatExecutor-0] org.springframework.core.log.CompositeLog : Accept=[application/json, application/*+json]
2021-07-19 19:03:02,869 DEBUG [DiscoveryClient-HeartbeatExecutor-0] org.springframework.core.log.CompositeLog : Response 200 OK
2021-07-19 19:03:02,933 DEBUG [DiscoveryClient-CacheRefreshExecutor-0] org.springframework.core.log.CompositeLog : Response 200 OK
2021-07-19 19:03:02,933 DEBUG [DiscoveryClient-CacheRefreshExecutor-0] org.springframework.core.log.CompositeLog : Reading to [org.springframework.cloud.netflix.eureka.http.EurekaApplications]
2021-07-19 19:03:32,872 DEBUG [DiscoveryClient-HeartbeatExecutor-0] org.springframework.core.log.CompositeLog : HTTP PUT http://localhost:8761/eureka/apps/CUSTOMER_SERVICE/host.docker.internal:customer_service:8090?status=UP&lastDirtyTimestamp=1626739322847
2021-07-19 19:03:32,873 DEBUG [DiscoveryClient-HeartbeatExecutor-0] org.springframework.core.log.CompositeLog : Accept=[application/json, application/*+json]
2021-07-19 19:03:32,879 DEBUG [DiscoveryClient-HeartbeatExecutor-0] org.springframework.core.log.CompositeLog : Response 200 OK
2021-07-19 19:03:32,935 DEBUG [DiscoveryClient-CacheRefreshExecutor-0] org.springframework.core.log.CompositeLog : HTTP GET http://localhost:8761/eureka/apps/delta
2021-07-19 19:03:32,937 DEBUG [DiscoveryClient-CacheRefreshExecutor-0] org.springframework.core.log.CompositeLog : Accept=[application/json, application/*+json]
2021-07-19 19:03:32,940 DEBUG [DiscoveryClient-CacheRefreshExecutor-0] org.springframework.core.log.CompositeLog : Response 200 OK
2021-07-19 19:03:32,941 DEBUG [DiscoveryClient-CacheRefreshExecutor-0] org.springframework.core.log.CompositeLog : Reading to [org.springframework.cloud.netflix.eureka.http.EurekaApplications]
2021-07-19 19:04:02,881 DEBUG [DiscoveryClient-HeartbeatExecutor-0] org.springframework.core.log.CompositeLog : HTTP PUT http://localhost:8761/eureka/apps/CUSTOMER_SERVICE/host.docker.internal:customer_service:8090?status=UP&lastDirtyTimestamp=1626739322847
2021-07-19 19:04:02,882 DEBUG [DiscoveryClient-HeartbeatExecutor-0] org.springframework.core.log.CompositeLog : Accept=[application/json, application/*+json]
2021-07-19 19:04:02,887 DEBUG [DiscoveryClient-HeartbeatExecutor-0] org.springframework.core.log.CompositeLog : Response 200 OK
2021-07-19 19:04:02,946 DEBUG [DiscoveryClient-CacheRefreshExecutor-0] org.springframework.core.log.CompositeLog : HTTP GET http://localhost:8761/eureka/apps/delta
2021-07-19 19:04:02,947 DEBUG [DiscoveryClient-CacheRefreshExecutor-0] org.springframework.core.log.CompositeLog : Accept=[application/json, application/*+json]
2021-07-19 19:04:02,951 DEBUG [DiscoveryClient-CacheRefreshExecutor-0] org.springframework.core.log.CompositeLog : Response 200 OK
2021-07-19 19:04:02,952 DEBUG [DiscoveryClient-CacheRefreshExecutor-0] org.springframework.core.log.CompositeLog : Reading to [org.springframework.cloud.netflix.eureka.http.EurekaApplications]
2021-07-19 19:04:32,868 INFO [RMI TCP Connection(12)-127.0.0.1] com.netflix.discovery.DiscoveryClient$3 : Saw local status change event StatusChangeEvent [timestamp=1626739472868, current=DOWN, previous=UP]
2021-07-19 19:04:32,868 INFO [DiscoveryClient-InstanceInfoReplicator-0] com.netflix.discovery.DiscoveryClient : DiscoveryClient_CUSTOMER_SERVICE/host.docker.internal:customer_service:8090: registering service...
2021-07-19 19:04:32,869 DEBUG [DiscoveryClient-InstanceInfoReplicator-0] org.springframework.core.log.CompositeLog : HTTP POST http://localhost:8761/eureka/apps/CUSTOMER_SERVICE
2021-07-19 19:04:32,869 DEBUG [DiscoveryClient-InstanceInfoReplicator-0] org.springframework.core.log.CompositeLog : Accept=[application/json, application/*+json]
2021-07-19 19:04:32,870 DEBUG [DiscoveryClient-InstanceInfoReplicator-0] org.springframework.core.log.CompositeLog : Writing [InstanceInfo [instanceId = host.docker.internal:customer_service:8090, appName = CUSTOMER_SERVICE, hostName = host.docker.internal, status = DOWN, ipAddr = 192.168.1.12, port = 8090, securePort = 443, dataCenterInfo = com.netflix.appinfo.MyDataCenterInfo@45aabcce] as "application/json"
2021-07-19 19:04:32,876 DEBUG [DiscoveryClient-InstanceInfoReplicator-0] org.springframework.core.log.CompositeLog : Response 204 NO_CONTENT
2021-07-19 19:04:32,877 INFO [DiscoveryClient-InstanceInfoReplicator-0] com.netflix.discovery.DiscoveryClient : DiscoveryClient_CUSTOMER_SERVICE/host.docker.internal:customer_service:8090 - registration status: 204
2021-07-19 19:04:32,884 INFO [RMI TCP Connection(12)-127.0.0.1] com.mongodb.diagnostics.logging.SLF4JLogger : Closed connection [connectionId{localValue:3, serverValue:21}] to localhost:27017 because the pool has been closed.
2021-07-19 19:04:32,888 DEBUG [DiscoveryClient-HeartbeatExecutor-0] org.springframework.core.log.CompositeLog : HTTP PUT http://localhost:8761/eureka/apps/CUSTOMER_SERVICE/host.docker.internal:customer_service:8090?status=DOWN&lastDirtyTimestamp=1626739472868
2021-07-19 19:04:32,888 DEBUG [DiscoveryClient-HeartbeatExecutor-0] org.springframework.core.log.CompositeLog : Accept=[application/json, application/*+json]
2021-07-19 19:04:32,906 DEBUG [DiscoveryClient-HeartbeatExecutor-0] org.springframework.core.log.CompositeLog : Response 200 OK
2021-07-19 19:04:32,955 DEBUG [DiscoveryClient-CacheRefreshExecutor-0] org.springframework.core.log.CompositeLog : HTTP GET http://localhost:8761/eureka/apps/delta
2021-07-19 19:04:32,955 DEBUG [DiscoveryClient-CacheRefreshExecutor-0] org.springframework.core.log.CompositeLog : Accept=[application/json, application/*+json]
2021-07-19 19:04:32,960 DEBUG [DiscoveryClient-CacheRefreshExecutor-0] org.springframework.core.log.CompositeLog : Response 200 OK
2021-07-19 19:04:32,960 DEBUG [DiscoveryClient-CacheRefreshExecutor-0] org.springframework.core.log.CompositeLog : Reading to [org.springframework.cloud.netflix.eureka.http.EurekaApplications]
2021-07-19 19:04:36,946 INFO [RMI TCP Connection(12)-127.0.0.1] com.netflix.discovery.DiscoveryClient : Shutting down DiscoveryClient ...
2021-07-19 19:04:39,954 INFO [RMI TCP Connection(12)-127.0.0.1] com.netflix.discovery.DiscoveryClient : Unregistering ...
2021-07-19 19:04:39,959 DEBUG [RMI TCP Connection(12)-127.0.0.1] org.springframework.core.log.CompositeLog : HTTP DELETE http://localhost:8761/eureka/apps/CUSTOMER_SERVICE/host.docker.internal:customer_service:8090
2021-07-19 19:04:39,961 DEBUG [RMI TCP Connection(12)-127.0.0.1] org.springframework.core.log.CompositeLog : Accept=[application/json, application/*+json]
2021-07-19 19:04:39,968 DEBUG [RMI TCP Connection(12)-127.0.0.1] org.springframework.core.log.CompositeLog : Response 200 OK
2021-07-19 19:04:39,971 INFO [RMI TCP Connection(12)-127.0.0.1] com.netflix.discovery.DiscoveryClient : DiscoveryClient_CUSTOMER_SERVICE/host.docker.internal:customer_service:8090 - deregister  status: 200
2021-07-19 19:04:39,981 INFO [RMI TCP Connection(12)-127.0.0.1] com.netflix.discovery.DiscoveryClient : Completed shut down of DiscoveryClient
2021-07-19 19:04:50,571 INFO [background-preinit] org.hibernate.validator.internal.util.Version : HV000001: Hibernate Validator 6.2.0.Final
2021-07-19 19:04:52,254 DEBUG [main] org.springframework.core.log.CompositeLog : HTTP GET http://localhost:8888/customer_service/default/main
2021-07-19 19:04:52,328 DEBUG [main] org.springframework.core.log.CompositeLog : Accept=[application/json, application/*+json]
2021-07-19 19:05:00,969 DEBUG [main] org.springframework.core.log.CompositeLog : Response 200 OK
2021-07-19 19:05:00,971 DEBUG [main] org.springframework.core.log.CompositeLog : Reading to [org.springframework.cloud.config.environment.Environment]
2021-07-19 19:05:01,097 INFO [main] org.springframework.boot.SpringApplication : No active profile set, falling back to default profiles: default
2021-07-19 19:05:03,398 INFO [main] com.mongodb.diagnostics.logging.SLF4JLogger : Cluster created with settings {hosts=[localhost:27017], mode=SINGLE, requiredClusterType=UNKNOWN, serverSelectionTimeout='30000 ms'}
2021-07-19 19:05:05,410 DEBUG [main] org.springframework.web.reactive.result.method.AbstractHandlerMethodMapping : 6 mappings in 'requestMappingHandlerMapping'
2021-07-19 19:05:05,450 DEBUG [main] org.springframework.web.reactive.handler.SimpleUrlHandlerMapping : Patterns [/webjars/**, /**] in 'resourceHandlerMapping'
2021-07-19 19:05:05,903 INFO [cluster-rtt-ClusterId{value='60f6132f17ea566ef5e4599e', description='null'}-localhost:27017] com.mongodb.diagnostics.logging.SLF4JLogger : Opened connection [connectionId{localValue:1, serverValue:23}] to localhost:27017
2021-07-19 19:05:05,904 INFO [cluster-ClusterId{value='60f6132f17ea566ef5e4599e', description='null'}-localhost:27017] com.mongodb.diagnostics.logging.SLF4JLogger : Opened connection [connectionId{localValue:2, serverValue:22}] to localhost:27017
2021-07-19 19:05:05,905 INFO [cluster-ClusterId{value='60f6132f17ea566ef5e4599e', description='null'}-localhost:27017] com.mongodb.diagnostics.logging.SLF4JLogger : Monitor thread successfully connected to server with description ServerDescription{address=localhost:27017, type=STANDALONE, state=CONNECTED, ok=true, minWireVersion=0, maxWireVersion=9, maxDocumentSize=16777216, logicalSessionTimeoutMinutes=30, roundTripTimeNanos=52492100}
2021-07-19 19:05:08,324 DEBUG [main] org.springframework.web.reactive.result.method.annotation.ControllerMethodResolver : ControllerAdvice beans: none
2021-07-19 19:05:08,381 DEBUG [main] org.springframework.web.server.adapter.HttpWebHandlerAdapter : enableLoggingRequestDetails='false': form data and headers will be masked to prevent unsafe logging of potentially sensitive data
2021-07-19 19:05:10,268 INFO [main] com.netflix.discovery.DiscoveryClient : Initializing Eureka in region us-east-1
2021-07-19 19:05:10,274 INFO [main] com.netflix.discovery.shared.resolver.aws.ConfigClusterResolver : Resolving eureka endpoints via configuration
2021-07-19 19:05:10,302 INFO [main] com.netflix.discovery.DiscoveryClient : Disable delta property : false
2021-07-19 19:05:10,303 INFO [main] com.netflix.discovery.DiscoveryClient : Single vip registry refresh property : null
2021-07-19 19:05:10,303 INFO [main] com.netflix.discovery.DiscoveryClient : Force full registry fetch : false
2021-07-19 19:05:10,303 INFO [main] com.netflix.discovery.DiscoveryClient : Application is null : false
2021-07-19 19:05:10,304 INFO [main] com.netflix.discovery.DiscoveryClient : Registered Applications size is zero : true
2021-07-19 19:05:10,304 INFO [main] com.netflix.discovery.DiscoveryClient : Application version is -1: true
2021-07-19 19:05:10,304 INFO [main] com.netflix.discovery.DiscoveryClient : Getting all instance registry info from the eureka server
2021-07-19 19:05:11,260 DEBUG [main] org.springframework.core.log.CompositeLog : HTTP GET http://localhost:8761/eureka/apps/
2021-07-19 19:05:11,303 DEBUG [main] org.springframework.core.log.CompositeLog : Accept=[application/json, application/*+json]
2021-07-19 19:05:11,385 DEBUG [main] org.springframework.core.log.CompositeLog : Response 200 OK
2021-07-19 19:05:11,386 DEBUG [main] org.springframework.core.log.CompositeLog : Reading to [org.springframework.cloud.netflix.eureka.http.EurekaApplications]
2021-07-19 19:05:11,395 INFO [main] com.netflix.discovery.DiscoveryClient : The response status is 200
2021-07-19 19:05:11,399 INFO [main] com.netflix.discovery.DiscoveryClient : Starting heartbeat executor: renew interval is: 30
2021-07-19 19:05:11,402 INFO [main] com.netflix.discovery.InstanceInfoReplicator : InstanceInfoReplicator onDemand update allowed rate per min is 4
2021-07-19 19:05:11,409 INFO [main] com.netflix.discovery.DiscoveryClient : Discovery Client initialized at timestamp 1626739511408 with initial instances count: 2
2021-07-19 19:05:11,420 INFO [main] com.netflix.discovery.DiscoveryClient$3 : Saw local status change event StatusChangeEvent [timestamp=1626739511420, current=UP, previous=STARTING]
2021-07-19 19:05:11,423 INFO [DiscoveryClient-InstanceInfoReplicator-0] com.netflix.discovery.DiscoveryClient : DiscoveryClient_CUSTOMER_SERVICE/host.docker.internal:customer_service:8090: registering service...
2021-07-19 19:05:11,433 DEBUG [DiscoveryClient-InstanceInfoReplicator-0] org.springframework.core.log.CompositeLog : HTTP POST http://localhost:8761/eureka/apps/CUSTOMER_SERVICE
2021-07-19 19:05:11,435 DEBUG [DiscoveryClient-InstanceInfoReplicator-0] org.springframework.core.log.CompositeLog : Accept=[application/json, application/*+json]
2021-07-19 19:05:11,442 DEBUG [DiscoveryClient-InstanceInfoReplicator-0] org.springframework.core.log.CompositeLog : Writing [InstanceInfo [instanceId = host.docker.internal:customer_service:8090, appName = CUSTOMER_SERVICE, hostName = host.docker.internal, status = UP, ipAddr = 192.168.1.12, port = 8090, securePort = 443, dataCenterInfo = com.netflix.appinfo.MyDataCenterInfo@2ebf379c] as "application/json"
2021-07-19 19:05:11,459 DEBUG [DiscoveryClient-InstanceInfoReplicator-0] org.springframework.core.log.CompositeLog : Response 204 NO_CONTENT
2021-07-19 19:05:11,460 INFO [DiscoveryClient-InstanceInfoReplicator-0] com.netflix.discovery.DiscoveryClient : DiscoveryClient_CUSTOMER_SERVICE/host.docker.internal:customer_service:8090 - registration status: 204
2021-07-19 19:05:13,564 INFO [main] org.springframework.boot.StartupInfoLogger : Started Application in 24.695 seconds (JVM running for 26.298)
2021-07-19 19:05:41,597 DEBUG [DiscoveryClient-CacheRefreshExecutor-0] org.springframework.core.log.CompositeLog : HTTP GET http://localhost:8761/eureka/apps/delta
2021-07-19 19:05:41,598 DEBUG [DiscoveryClient-CacheRefreshExecutor-0] org.springframework.core.log.CompositeLog : Accept=[application/json, application/*+json]
2021-07-19 19:05:41,598 DEBUG [DiscoveryClient-HeartbeatExecutor-0] org.springframework.core.log.CompositeLog : HTTP PUT http://localhost:8761/eureka/apps/CUSTOMER_SERVICE/host.docker.internal:customer_service:8090?status=UP&lastDirtyTimestamp=1626739511420
2021-07-19 19:05:41,603 DEBUG [DiscoveryClient-CacheRefreshExecutor-0] org.springframework.core.log.CompositeLog : Response 200 OK
2021-07-19 19:05:41,604 DEBUG [DiscoveryClient-CacheRefreshExecutor-0] org.springframework.core.log.CompositeLog : Reading to [org.springframework.cloud.netflix.eureka.http.EurekaApplications]
2021-07-19 19:05:41,616 DEBUG [DiscoveryClient-HeartbeatExecutor-0] org.springframework.core.log.CompositeLog : Accept=[application/json, application/*+json]
2021-07-19 19:05:41,619 DEBUG [DiscoveryClient-HeartbeatExecutor-0] org.springframework.core.log.CompositeLog : Response 200 OK
2021-07-19 19:06:11,610 DEBUG [DiscoveryClient-CacheRefreshExecutor-0] org.springframework.core.log.CompositeLog : HTTP GET http://localhost:8761/eureka/apps/delta
2021-07-19 19:06:11,612 DEBUG [DiscoveryClient-CacheRefreshExecutor-0] org.springframework.core.log.CompositeLog : Accept=[application/json, application/*+json]
2021-07-19 19:06:11,621 DEBUG [DiscoveryClient-HeartbeatExecutor-0] org.springframework.core.log.CompositeLog : HTTP PUT http://localhost:8761/eureka/apps/CUSTOMER_SERVICE/host.docker.internal:customer_service:8090?status=UP&lastDirtyTimestamp=1626739511420
2021-07-19 19:06:11,623 DEBUG [DiscoveryClient-HeartbeatExecutor-0] org.springframework.core.log.CompositeLog : Accept=[application/json, application/*+json]
2021-07-19 19:06:11,643 DEBUG [DiscoveryClient-CacheRefreshExecutor-0] org.springframework.core.log.CompositeLog : Response 200 OK
2021-07-19 19:06:11,644 DEBUG [DiscoveryClient-CacheRefreshExecutor-0] org.springframework.core.log.CompositeLog : Reading to [org.springframework.cloud.netflix.eureka.http.EurekaApplications]
2021-07-19 19:06:11,669 DEBUG [DiscoveryClient-HeartbeatExecutor-0] org.springframework.core.log.CompositeLog : Response 200 OK
2021-07-19 19:06:41,648 DEBUG [DiscoveryClient-CacheRefreshExecutor-0] org.springframework.core.log.CompositeLog : HTTP GET http://localhost:8761/eureka/apps/delta
2021-07-19 19:06:41,649 DEBUG [DiscoveryClient-CacheRefreshExecutor-0] org.springframework.core.log.CompositeLog : Accept=[application/json, application/*+json]
2021-07-19 19:06:41,672 DEBUG [DiscoveryClient-HeartbeatExecutor-0] org.springframework.core.log.CompositeLog : HTTP PUT http://localhost:8761/eureka/apps/CUSTOMER_SERVICE/host.docker.internal:customer_service:8090?status=UP&lastDirtyTimestamp=1626739511420
2021-07-19 19:06:41,673 DEBUG [DiscoveryClient-HeartbeatExecutor-0] org.springframework.core.log.CompositeLog : Accept=[application/json, application/*+json]
2021-07-19 19:06:41,675 DEBUG [DiscoveryClient-HeartbeatExecutor-0] org.springframework.core.log.CompositeLog : Response 200 OK
2021-07-19 19:06:41,687 DEBUG [DiscoveryClient-CacheRefreshExecutor-0] org.springframework.core.log.CompositeLog : Response 200 OK
2021-07-19 19:06:41,688 DEBUG [DiscoveryClient-CacheRefreshExecutor-0] org.springframework.core.log.CompositeLog : Reading to [org.springframework.cloud.netflix.eureka.http.EurekaApplications]
2021-07-19 19:06:51,663 DEBUG [reactor-http-nio-3] org.springframework.core.log.LogFormatUtils : [94e45130-1, L:/0:0:0:0:0:0:0:1:8090 - R:/0:0:0:0:0:0:0:1:61372] HTTP GET "/customer"
2021-07-19 19:06:51,688 DEBUG [reactor-http-nio-3] org.springframework.web.reactive.handler.AbstractHandlerMapping : [94e45130-1, L:/0:0:0:0:0:0:0:1:8090 - R:/0:0:0:0:0:0:0:1:61372] Mapped to com.bank.manage.customer.controller.CustomerController#getAllCustomers()
2021-07-19 19:06:51,701 INFO [reactor-http-nio-3] com.bank.manage.customer.controller.CustomerController :  EndPoit get by all customers {} 
2021-07-19 19:06:51,722 DEBUG [reactor-http-nio-3] org.springframework.web.reactive.result.HandlerResultHandlerSupport : [94e45130-1, L:/0:0:0:0:0:0:0:1:8090 - R:/0:0:0:0:0:0:0:1:61372] Found 'Content-Type:application/json' in response
2021-07-19 19:06:51,722 DEBUG [reactor-http-nio-3] org.springframework.web.reactive.result.method.annotation.AbstractMessageWriterResultHandler : [94e45130-1, L:/0:0:0:0:0:0:0:1:8090 - R:/0:0:0:0:0:0:0:1:61372] 0..N [com.bank.manage.customer.persistence.entity.Customer]
2021-07-19 19:06:51,798 INFO [nioEventLoopGroup-3-3] com.mongodb.diagnostics.logging.SLF4JLogger : Opened connection [connectionId{localValue:3, serverValue:24}] to localhost:27017
2021-07-19 19:06:51,885 DEBUG [nioEventLoopGroup-3-3] org.springframework.core.log.CompositeLog : [94e45130-1, L:/0:0:0:0:0:0:0:1:8090 - R:/0:0:0:0:0:0:0:1:61372] Resolved [ConversionFailedException: Failed to convert from type [java.lang.Double] to type [java.lang.Integer] for value '9.89898968968E11'; nested exception is java.lang.IllegalArgumentException: Could not convert number [9.89898968968E11] of type [java.lang.Double] to target class [java.lang.Integer]: overflow] for HTTP GET /customer
2021-07-19 19:06:51,888 ERROR [nioEventLoopGroup-3-3] org.springframework.core.log.CompositeLog : [94e45130-1, L:/0:0:0:0:0:0:0:1:8090 - R:/0:0:0:0:0:0:0:1:61372]  500 Server Error for HTTP GET "/customer"
org.springframework.core.convert.ConversionFailedException: Failed to convert from type [java.lang.Double] to type [java.lang.Integer] for value '9.89898968968E11'; nested exception is java.lang.IllegalArgumentException: Could not convert number [9.89898968968E11] of type [java.lang.Double] to target class [java.lang.Integer]: overflow
	at org.springframework.core.convert.support.ConversionUtils.invokeConverter(ConversionUtils.java:47)
	Suppressed: reactor.core.publisher.FluxOnAssembly$OnAssemblyException: 
Error has been observed at the following site(s):
	|_ checkpoint ⇢ Handler com.bank.manage.customer.controller.CustomerController#getAllCustomers() [DispatcherHandler]
	|_ checkpoint ⇢ org.springframework.boot.actuate.metrics.web.reactive.server.MetricsWebFilter [DefaultWebFilterChain]
	|_ checkpoint ⇢ HTTP GET "/customer" [ExceptionHandlingWebHandler]
Stack trace:
		at org.springframework.core.convert.support.ConversionUtils.invokeConverter(ConversionUtils.java:47)
		at org.springframework.core.convert.support.GenericConversionService.convert(GenericConversionService.java:192)
		at org.springframework.core.convert.support.GenericConversionService.convert(GenericConversionService.java:175)
		at org.springframework.data.mongodb.core.convert.MappingMongoConverter.doConvert(MappingMongoConverter.java:1547)
		at org.springframework.data.mongodb.core.convert.MappingMongoConverter.doConvert(MappingMongoConverter.java:1540)
		at org.springframework.data.mongodb.core.convert.MappingMongoConverter.getPotentiallyConvertedSimpleRead(MappingMongoConverter.java:1060)
		at org.springframework.data.mongodb.core.convert.MappingMongoConverter.getPotentiallyConvertedSimpleRead(MappingMongoConverter.java:1038)
		at org.springframework.data.mongodb.core.convert.MappingMongoConverter$ConversionContext.convert(MappingMongoConverter.java:1919)
		at org.springframework.data.mongodb.core.convert.MappingMongoConverter$MongoDbPropertyValueProvider.getPropertyValue(MappingMongoConverter.java:1641)
		at org.springframework.data.mongodb.core.convert.MappingMongoConverter.readProperties(MappingMongoConverter.java:481)
		at org.springframework.data.mongodb.core.convert.MappingMongoConverter.populateProperties(MappingMongoConverter.java:394)
		at org.springframework.data.mongodb.core.convert.MappingMongoConverter.read(MappingMongoConverter.java:372)
		at org.springframework.data.mongodb.core.convert.MappingMongoConverter.readDocument(MappingMongoConverter.java:342)
		at org.springframework.data.mongodb.core.convert.MappingMongoConverter.read(MappingMongoConverter.java:278)
		at org.springframework.data.mongodb.core.convert.MappingMongoConverter.read(MappingMongoConverter.java:274)
		at org.springframework.data.mongodb.core.convert.MappingMongoConverter.read(MappingMongoConverter.java:102)
		at org.springframework.data.mongodb.core.ReactiveMongoTemplate$ReadDocumentCallback.doWith(ReactiveMongoTemplate.java:3155)
		at reactor.core.publisher.FluxConcatMap$ConcatMapImmediate.drain(FluxConcatMap.java:374)
		at reactor.core.publisher.FluxConcatMap$ConcatMapImmediate.onNext(FluxConcatMap.java:250)
		at reactor.core.publisher.FluxCreate$BufferAsyncSink.drain(FluxCreate.java:793)
		at reactor.core.publisher.FluxCreate$BufferAsyncSink.next(FluxCreate.java:718)
		at reactor.core.publisher.FluxCreate$SerializedFluxSink.next(FluxCreate.java:154)
		at java.util.ArrayList.forEach(ArrayList.java:1259)
		at com.mongodb.reactivestreams.client.internal.BatchCursorFlux.lambda$recurseCursor$4(BatchCursorFlux.java:94)
		at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.onNext(MonoPeekTerminal.java:171)
		at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.onNext(MonoPeekTerminal.java:180)
		at reactor.core.publisher.FluxPeekFuseable$PeekConditionalSubscriber.onNext(FluxPeekFuseable.java:854)
		at reactor.core.publisher.MonoCreate$DefaultMonoSink.success(MonoCreate.java:160)
		at com.mongodb.reactivestreams.client.internal.MongoOperationPublisher.lambda$sinkToCallback$30(MongoOperationPublisher.java:550)
		at com.mongodb.internal.operation.AsyncQueryBatchCursor.next(AsyncQueryBatchCursor.java:207)
		at com.mongodb.internal.operation.AsyncQueryBatchCursor.next(AsyncQueryBatchCursor.java:146)
		at com.mongodb.reactivestreams.client.internal.BatchCursor.lambda$next$0(BatchCursor.java:35)
		at reactor.core.publisher.MonoCreate.subscribe(MonoCreate.java:57)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4150)
		at reactor.core.publisher.Mono.subscribeWith(Mono.java:4265)
		at reactor.core.publisher.Mono.subscribe(Mono.java:3982)
		at com.mongodb.reactivestreams.client.internal.BatchCursorFlux.recurseCursor(BatchCursorFlux.java:104)
		at com.mongodb.reactivestreams.client.internal.BatchCursorFlux.lambda$subscribe$0(BatchCursorFlux.java:56)
		at reactor.core.publisher.LambdaMonoSubscriber.onNext(LambdaMonoSubscriber.java:171)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onNext(FluxMapFuseable.java:127)
		at reactor.core.publisher.Operators$MonoSubscriber.complete(Operators.java:1815)
		at reactor.core.publisher.MonoFlatMap$FlatMapInner.onNext(MonoFlatMap.java:249)
		at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.onNext(MonoPeekTerminal.java:180)
		at reactor.core.publisher.MonoCreate$DefaultMonoSink.success(MonoCreate.java:160)
		at com.mongodb.reactivestreams.client.internal.MongoOperationPublisher.lambda$sinkToCallback$30(MongoOperationPublisher.java:550)
		at com.mongodb.reactivestreams.client.internal.OperationExecutorImpl.lambda$execute$2(OperationExecutorImpl.java:73)
		at com.mongodb.internal.async.ErrorHandlingResultCallback.onResult(ErrorHandlingResultCallback.java:48)
		at com.mongodb.internal.operation.FindOperation$3.onResult(FindOperation.java:755)
		at com.mongodb.internal.operation.OperationHelper$ReferenceCountedReleasingWrappedCallback.onResult(OperationHelper.java:532)
		at com.mongodb.internal.operation.CommandOperationHelper$10.onResult(CommandOperationHelper.java:483)
		at com.mongodb.internal.async.ErrorHandlingResultCallback.onResult(ErrorHandlingResultCallback.java:48)
		at com.mongodb.internal.connection.DefaultServer$DefaultServerProtocolExecutor$2.onResult(DefaultServer.java:286)
		at com.mongodb.internal.async.ErrorHandlingResultCallback.onResult(ErrorHandlingResultCallback.java:48)
		at com.mongodb.internal.connection.CommandProtocolImpl$1.onResult(CommandProtocolImpl.java:84)
		at com.mongodb.internal.connection.DefaultConnectionPool$PooledConnection$2.onResult(DefaultConnectionPool.java:530)
		at com.mongodb.internal.connection.UsageTrackingInternalConnection$2.onResult(UsageTrackingInternalConnection.java:142)
		at com.mongodb.internal.async.ErrorHandlingResultCallback.onResult(ErrorHandlingResultCallback.java:48)
		at com.mongodb.internal.connection.InternalStreamConnection$2$1.onResult(InternalStreamConnection.java:462)
		at com.mongodb.internal.connection.InternalStreamConnection$2$1.onResult(InternalStreamConnection.java:439)
		at com.mongodb.internal.connection.InternalStreamConnection$MessageHeaderCallback$MessageCallback.onResult(InternalStreamConnection.java:744)
		at com.mongodb.internal.connection.InternalStreamConnection$MessageHeaderCallback$MessageCallback.onResult(InternalStreamConnection.java:711)
		at com.mongodb.internal.connection.InternalStreamConnection$5.completed(InternalStreamConnection.java:581)
		at com.mongodb.internal.connection.InternalStreamConnection$5.completed(InternalStreamConnection.java:578)
		at com.mongodb.connection.netty.NettyStream.readAsync(NettyStream.java:322)
		at com.mongodb.connection.netty.NettyStream.handleReadResponse(NettyStream.java:350)
		at com.mongodb.connection.netty.NettyStream.access$1200(NettyStream.java:104)
		at com.mongodb.connection.netty.NettyStream$InboundBufferHandler.channelRead0(NettyStream.java:409)
		at com.mongodb.connection.netty.NettyStream$InboundBufferHandler.channelRead0(NettyStream.java:406)
		at io.netty.channel.SimpleChannelInboundHandler.channelRead(SimpleChannelInboundHandler.java:99)
		at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:379)
		at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:365)
		at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:357)
		at io.netty.channel.DefaultChannelPipeline$HeadContext.channelRead(DefaultChannelPipeline.java:1410)
		at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:379)
		at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:365)
		at io.netty.channel.DefaultChannelPipeline.fireChannelRead(DefaultChannelPipeline.java:919)
		at io.netty.channel.nio.AbstractNioByteChannel$NioByteUnsafe.read(AbstractNioByteChannel.java:166)
		at io.netty.channel.nio.NioEventLoop.processSelectedKey(NioEventLoop.java:719)
		at io.netty.channel.nio.NioEventLoop.processSelectedKeysOptimized(NioEventLoop.java:655)
		at io.netty.channel.nio.NioEventLoop.processSelectedKeys(NioEventLoop.java:581)
		at io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:493)
		at io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:989)
		at io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)
		at io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)
		at java.lang.Thread.run(Thread.java:748)
Caused by: java.lang.IllegalArgumentException: Could not convert number [9.89898968968E11] of type [java.lang.Double] to target class [java.lang.Integer]: overflow
	at org.springframework.util.NumberUtils.raiseOverflowException(NumberUtils.java:175)
	at org.springframework.util.NumberUtils.convertNumberToTargetClass(NumberUtils.java:108)
	at org.springframework.core.convert.support.NumberToNumberConverterFactory$NumberToNumber.convert(NumberToNumberConverterFactory.java:66)
	at org.springframework.core.convert.support.NumberToNumberConverterFactory$NumberToNumber.convert(NumberToNumberConverterFactory.java:56)
	at org.springframework.core.convert.support.GenericConversionService$ConverterFactoryAdapter.convert(GenericConversionService.java:437)
	at org.springframework.core.convert.support.ConversionUtils.invokeConverter(ConversionUtils.java:41)
	at org.springframework.core.convert.support.GenericConversionService.convert(GenericConversionService.java:192)
	at org.springframework.core.convert.support.GenericConversionService.convert(GenericConversionService.java:175)
	at org.springframework.data.mongodb.core.convert.MappingMongoConverter.doConvert(MappingMongoConverter.java:1547)
	at org.springframework.data.mongodb.core.convert.MappingMongoConverter.doConvert(MappingMongoConverter.java:1540)
	at org.springframework.data.mongodb.core.convert.MappingMongoConverter.getPotentiallyConvertedSimpleRead(MappingMongoConverter.java:1060)
	at org.springframework.data.mongodb.core.convert.MappingMongoConverter.getPotentiallyConvertedSimpleRead(MappingMongoConverter.java:1038)
	at org.springframework.data.mongodb.core.convert.MappingMongoConverter$ConversionContext.convert(MappingMongoConverter.java:1919)
	at org.springframework.data.mongodb.core.convert.MappingMongoConverter$MongoDbPropertyValueProvider.getPropertyValue(MappingMongoConverter.java:1641)
	at org.springframework.data.mongodb.core.convert.MappingMongoConverter.readProperties(MappingMongoConverter.java:481)
	at org.springframework.data.mongodb.core.convert.MappingMongoConverter.populateProperties(MappingMongoConverter.java:394)
	at org.springframework.data.mongodb.core.convert.MappingMongoConverter.read(MappingMongoConverter.java:372)
	at org.springframework.data.mongodb.core.convert.MappingMongoConverter.readDocument(MappingMongoConverter.java:342)
	at org.springframework.data.mongodb.core.convert.MappingMongoConverter.read(MappingMongoConverter.java:278)
	at org.springframework.data.mongodb.core.convert.MappingMongoConverter.read(MappingMongoConverter.java:274)
	at org.springframework.data.mongodb.core.convert.MappingMongoConverter.read(MappingMongoConverter.java:102)
	at org.springframework.data.mongodb.core.ReactiveMongoTemplate$ReadDocumentCallback.doWith(ReactiveMongoTemplate.java:3155)
	at reactor.core.publisher.FluxConcatMap$ConcatMapImmediate.drain(FluxConcatMap.java:374)
	at reactor.core.publisher.FluxConcatMap$ConcatMapImmediate.onNext(FluxConcatMap.java:250)
	at reactor.core.publisher.FluxCreate$BufferAsyncSink.drain(FluxCreate.java:793)
	at reactor.core.publisher.FluxCreate$BufferAsyncSink.next(FluxCreate.java:718)
	at reactor.core.publisher.FluxCreate$SerializedFluxSink.next(FluxCreate.java:154)
	at java.util.ArrayList.forEach(ArrayList.java:1259)
	at com.mongodb.reactivestreams.client.internal.BatchCursorFlux.lambda$recurseCursor$4(BatchCursorFlux.java:94)
	at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.onNext(MonoPeekTerminal.java:171)
	at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.onNext(MonoPeekTerminal.java:180)
	at reactor.core.publisher.FluxPeekFuseable$PeekConditionalSubscriber.onNext(FluxPeekFuseable.java:854)
	at reactor.core.publisher.MonoCreate$DefaultMonoSink.success(MonoCreate.java:160)
	at com.mongodb.reactivestreams.client.internal.MongoOperationPublisher.lambda$sinkToCallback$30(MongoOperationPublisher.java:550)
	at com.mongodb.internal.operation.AsyncQueryBatchCursor.next(AsyncQueryBatchCursor.java:207)
	at com.mongodb.internal.operation.AsyncQueryBatchCursor.next(AsyncQueryBatchCursor.java:146)
	at com.mongodb.reactivestreams.client.internal.BatchCursor.lambda$next$0(BatchCursor.java:35)
	at reactor.core.publisher.MonoCreate.subscribe(MonoCreate.java:57)
	at reactor.core.publisher.Mono.subscribe(Mono.java:4150)
	at reactor.core.publisher.Mono.subscribeWith(Mono.java:4265)
	at reactor.core.publisher.Mono.subscribe(Mono.java:3982)
	at com.mongodb.reactivestreams.client.internal.BatchCursorFlux.recurseCursor(BatchCursorFlux.java:104)
	at com.mongodb.reactivestreams.client.internal.BatchCursorFlux.lambda$subscribe$0(BatchCursorFlux.java:56)
	at reactor.core.publisher.LambdaMonoSubscriber.onNext(LambdaMonoSubscriber.java:171)
	at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onNext(FluxMapFuseable.java:127)
	at reactor.core.publisher.Operators$MonoSubscriber.complete(Operators.java:1815)
	at reactor.core.publisher.MonoFlatMap$FlatMapInner.onNext(MonoFlatMap.java:249)
	at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.onNext(MonoPeekTerminal.java:180)
	at reactor.core.publisher.MonoCreate$DefaultMonoSink.success(MonoCreate.java:160)
	at com.mongodb.reactivestreams.client.internal.MongoOperationPublisher.lambda$sinkToCallback$30(MongoOperationPublisher.java:550)
	at com.mongodb.reactivestreams.client.internal.OperationExecutorImpl.lambda$execute$2(OperationExecutorImpl.java:73)
	at com.mongodb.internal.async.ErrorHandlingResultCallback.onResult(ErrorHandlingResultCallback.java:48)
	at com.mongodb.internal.operation.FindOperation$3.onResult(FindOperation.java:755)
	at com.mongodb.internal.operation.OperationHelper$ReferenceCountedReleasingWrappedCallback.onResult(OperationHelper.java:532)
	at com.mongodb.internal.operation.CommandOperationHelper$10.onResult(CommandOperationHelper.java:483)
	at com.mongodb.internal.async.ErrorHandlingResultCallback.onResult(ErrorHandlingResultCallback.java:48)
	at com.mongodb.internal.connection.DefaultServer$DefaultServerProtocolExecutor$2.onResult(DefaultServer.java:286)
	at com.mongodb.internal.async.ErrorHandlingResultCallback.onResult(ErrorHandlingResultCallback.java:48)
	at com.mongodb.internal.connection.CommandProtocolImpl$1.onResult(CommandProtocolImpl.java:84)
	at com.mongodb.internal.connection.DefaultConnectionPool$PooledConnection$2.onResult(DefaultConnectionPool.java:530)
	at com.mongodb.internal.connection.UsageTrackingInternalConnection$2.onResult(UsageTrackingInternalConnection.java:142)
	at com.mongodb.internal.async.ErrorHandlingResultCallback.onResult(ErrorHandlingResultCallback.java:48)
	at com.mongodb.internal.connection.InternalStreamConnection$2$1.onResult(InternalStreamConnection.java:462)
	at com.mongodb.internal.connection.InternalStreamConnection$2$1.onResult(InternalStreamConnection.java:439)
	at com.mongodb.internal.connection.InternalStreamConnection$MessageHeaderCallback$MessageCallback.onResult(InternalStreamConnection.java:744)
	at com.mongodb.internal.connection.InternalStreamConnection$MessageHeaderCallback$MessageCallback.onResult(InternalStreamConnection.java:711)
	at com.mongodb.internal.connection.InternalStreamConnection$5.completed(InternalStreamConnection.java:581)
	at com.mongodb.internal.connection.InternalStreamConnection$5.completed(InternalStreamConnection.java:578)
	at com.mongodb.connection.netty.NettyStream.readAsync(NettyStream.java:322)
	at com.mongodb.connection.netty.NettyStream.handleReadResponse(NettyStream.java:350)
	at com.mongodb.connection.netty.NettyStream.access$1200(NettyStream.java:104)
	at com.mongodb.connection.netty.NettyStream$InboundBufferHandler.channelRead0(NettyStream.java:409)
	at com.mongodb.connection.netty.NettyStream$InboundBufferHandler.channelRead0(NettyStream.java:406)
	at io.netty.channel.SimpleChannelInboundHandler.channelRead(SimpleChannelInboundHandler.java:99)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:379)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:365)
	at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:357)
	at io.netty.channel.DefaultChannelPipeline$HeadContext.channelRead(DefaultChannelPipeline.java:1410)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:379)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:365)
	at io.netty.channel.DefaultChannelPipeline.fireChannelRead(DefaultChannelPipeline.java:919)
	at io.netty.channel.nio.AbstractNioByteChannel$NioByteUnsafe.read(AbstractNioByteChannel.java:166)
	at io.netty.channel.nio.NioEventLoop.processSelectedKey(NioEventLoop.java:719)
	at io.netty.channel.nio.NioEventLoop.processSelectedKeysOptimized(NioEventLoop.java:655)
	at io.netty.channel.nio.NioEventLoop.processSelectedKeys(NioEventLoop.java:581)
	at io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:493)
	at io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:989)
	at io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)
	at io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)
	at java.lang.Thread.run(Thread.java:748)
2021-07-19 19:06:51,900 DEBUG [nioEventLoopGroup-3-3] org.springframework.core.log.CompositeLog : [94e45130-1, L:/0:0:0:0:0:0:0:1:8090 - R:/0:0:0:0:0:0:0:1:61372] Encoding [{timestamp=Mon Jul 19 19:06:51 COT 2021, path=/customer, status=500, error=Internal Server Error, re (truncated)...]
2021-07-19 19:06:51,919 DEBUG [reactor-http-nio-3] org.springframework.core.log.LogFormatUtils : [94e45130-1, L:/0:0:0:0:0:0:0:1:8090 - R:/0:0:0:0:0:0:0:1:61372] Completed 500 INTERNAL_SERVER_ERROR
2021-07-19 19:07:11,678 DEBUG [DiscoveryClient-HeartbeatExecutor-0] org.springframework.core.log.CompositeLog : HTTP PUT http://localhost:8761/eureka/apps/CUSTOMER_SERVICE/host.docker.internal:customer_service:8090?status=UP&lastDirtyTimestamp=1626739511420
2021-07-19 19:07:11,679 DEBUG [DiscoveryClient-HeartbeatExecutor-0] org.springframework.core.log.CompositeLog : Accept=[application/json, application/*+json]
2021-07-19 19:07:11,686 DEBUG [DiscoveryClient-HeartbeatExecutor-0] org.springframework.core.log.CompositeLog : Response 200 OK
2021-07-19 19:07:11,689 DEBUG [DiscoveryClient-CacheRefreshExecutor-0] org.springframework.core.log.CompositeLog : HTTP GET http://localhost:8761/eureka/apps/delta
2021-07-19 19:07:11,689 DEBUG [DiscoveryClient-CacheRefreshExecutor-0] org.springframework.core.log.CompositeLog : Accept=[application/json, application/*+json]
2021-07-19 19:07:11,693 DEBUG [DiscoveryClient-CacheRefreshExecutor-0] org.springframework.core.log.CompositeLog : Response 200 OK
2021-07-19 19:07:11,694 DEBUG [DiscoveryClient-CacheRefreshExecutor-0] org.springframework.core.log.CompositeLog : Reading to [org.springframework.cloud.netflix.eureka.http.EurekaApplications]
2021-07-19 19:07:20,491 DEBUG [reactor-http-nio-3] org.springframework.core.log.LogFormatUtils : [94e45130-2, L:/0:0:0:0:0:0:0:1:8090 - R:/0:0:0:0:0:0:0:1:61372] HTTP GET "/customer/60e231e30d2f326bba123479"
2021-07-19 19:07:20,493 DEBUG [reactor-http-nio-3] org.springframework.web.reactive.handler.AbstractHandlerMapping : [94e45130-2, L:/0:0:0:0:0:0:0:1:8090 - R:/0:0:0:0:0:0:0:1:61372] Mapped to com.bank.manage.customer.controller.CustomerController#getCustomerById(String)
2021-07-19 19:07:20,601 DEBUG [reactor-http-nio-3] org.springframework.core.log.CompositeLog : [94e45130-2, L:/0:0:0:0:0:0:0:1:8090 - R:/0:0:0:0:0:0:0:1:61372] Resolved [UndeclaredThrowableException: null] for HTTP GET /customer/60e231e30d2f326bba123479
2021-07-19 19:07:20,602 ERROR [reactor-http-nio-3] org.springframework.core.log.CompositeLog : [94e45130-2, L:/0:0:0:0:0:0:0:1:8090 - R:/0:0:0:0:0:0:0:1:61372]  500 Server Error for HTTP GET "/customer/60e231e30d2f326bba123479"
java.lang.reflect.UndeclaredThrowableException: null
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:767)
	Suppressed: reactor.core.publisher.FluxOnAssembly$OnAssemblyException: 
Error has been observed at the following site(s):
	|_ checkpoint ⇢ org.springframework.boot.actuate.metrics.web.reactive.server.MetricsWebFilter [DefaultWebFilterChain]
	|_ checkpoint ⇢ HTTP GET "/customer/60e231e30d2f326bba123479" [ExceptionHandlingWebHandler]
Stack trace:
		at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:767)
		at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:97)
		at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
		at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:750)
		at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:692)
		at com.bank.manage.customer.controller.CustomerController$$EnhancerBySpringCGLIB$$4daa306c.getCustomerById(<generated>)
		at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
		at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
		at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
		at java.lang.reflect.Method.invoke(Method.java:498)
		at org.springframework.web.reactive.result.method.InvocableHandlerMethod.lambda$invoke$0(InvocableHandlerMethod.java:146)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:125)
		at reactor.core.publisher.Operators$MonoSubscriber.complete(Operators.java:1815)
		at reactor.core.publisher.MonoZip$ZipCoordinator.signal(MonoZip.java:251)
		at reactor.core.publisher.MonoZip$ZipInner.onNext(MonoZip.java:336)
		at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.onNext(MonoPeekTerminal.java:180)
		at reactor.core.publisher.FluxDefaultIfEmpty$DefaultIfEmptySubscriber.onNext(FluxDefaultIfEmpty.java:100)
		at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onNext(FluxSwitchIfEmpty.java:73)
		at reactor.core.publisher.Operators$ScalarSubscription.request(Operators.java:2397)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.set(Operators.java:2193)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onSubscribe(Operators.java:2067)
		at reactor.core.publisher.FluxFlatMap.trySubscribeScalarMap(FluxFlatMap.java:192)
		at reactor.core.publisher.MonoFlatMap.subscribeOrReturn(MonoFlatMap.java:53)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4135)
		at reactor.core.publisher.MonoZip.subscribe(MonoZip.java:128)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:64)
		at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:52)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.subscribeNext(MonoIgnoreThen.java:236)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.onComplete(MonoIgnoreThen.java:203)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onComplete(MonoFlatMap.java:181)
		at reactor.core.publisher.Operators.complete(Operators.java:136)
		at reactor.core.publisher.MonoZip.subscribe(MonoZip.java:120)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4150)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.subscribeNext(MonoIgnoreThen.java:255)
		at reactor.core.publisher.MonoIgnoreThen.subscribe(MonoIgnoreThen.java:51)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:64)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:157)
		at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onNext(FluxSwitchIfEmpty.java:73)
		at reactor.core.publisher.MonoNext$NextSubscriber.onNext(MonoNext.java:82)
		at reactor.core.publisher.FluxConcatMap$ConcatMapImmediate.innerNext(FluxConcatMap.java:281)
		at reactor.core.publisher.FluxConcatMap$ConcatMapInner.onNext(FluxConcatMap.java:860)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onNext(FluxMapFuseable.java:127)
		at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.onNext(MonoPeekTerminal.java:180)
		at reactor.core.publisher.Operators$ScalarSubscription.request(Operators.java:2397)
		at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.request(MonoPeekTerminal.java:139)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.request(FluxMapFuseable.java:169)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.set(Operators.java:2193)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onSubscribe(Operators.java:2067)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onSubscribe(FluxMapFuseable.java:96)
		at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.onSubscribe(MonoPeekTerminal.java:152)
		at reactor.core.publisher.MonoJust.subscribe(MonoJust.java:54)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4150)
		at reactor.core.publisher.FluxConcatMap$ConcatMapImmediate.drain(FluxConcatMap.java:448)
		at reactor.core.publisher.FluxConcatMap$ConcatMapImmediate.onSubscribe(FluxConcatMap.java:218)
		at reactor.core.publisher.FluxIterable.subscribe(FluxIterable.java:164)
		at reactor.core.publisher.FluxIterable.subscribe(FluxIterable.java:86)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:64)
		at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:52)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:64)
		at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:52)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:64)
		at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:52)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4150)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.subscribeNext(MonoIgnoreThen.java:255)
		at reactor.core.publisher.MonoIgnoreThen.subscribe(MonoIgnoreThen.java:51)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:64)
		at reactor.netty.http.server.HttpServer$HttpServerHandle.onStateChange(HttpServer.java:915)
		at reactor.netty.ReactorNetty$CompositeConnectionObserver.onStateChange(ReactorNetty.java:654)
		at reactor.netty.transport.ServerTransport$ChildObserver.onStateChange(ServerTransport.java:478)
		at reactor.netty.http.server.HttpServerOperations.onInboundNext(HttpServerOperations.java:526)
		at reactor.netty.channel.ChannelOperationsHandler.channelRead(ChannelOperationsHandler.java:94)
		at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:379)
		at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:365)
		at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:357)
		at reactor.netty.http.server.HttpTrafficHandler.channelRead(HttpTrafficHandler.java:209)
		at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:379)
		at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:365)
		at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:357)
		at io.netty.channel.CombinedChannelDuplexHandler$DelegatingChannelHandlerContext.fireChannelRead(CombinedChannelDuplexHandler.java:436)
		at io.netty.handler.codec.ByteToMessageDecoder.fireChannelRead(ByteToMessageDecoder.java:324)
		at io.netty.handler.codec.ByteToMessageDecoder.fireChannelRead(ByteToMessageDecoder.java:311)
		at io.netty.handler.codec.ByteToMessageDecoder.callDecode(ByteToMessageDecoder.java:432)
		at io.netty.handler.codec.ByteToMessageDecoder.channelRead(ByteToMessageDecoder.java:276)
		at io.netty.channel.CombinedChannelDuplexHandler.channelRead(CombinedChannelDuplexHandler.java:251)
		at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:379)
		at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:365)
		at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:357)
		at io.netty.channel.DefaultChannelPipeline$HeadContext.channelRead(DefaultChannelPipeline.java:1410)
		at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:379)
		at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:365)
		at io.netty.channel.DefaultChannelPipeline.fireChannelRead(DefaultChannelPipeline.java:919)
		at io.netty.channel.nio.AbstractNioByteChannel$NioByteUnsafe.read(AbstractNioByteChannel.java:166)
		at io.netty.channel.nio.NioEventLoop.processSelectedKey(NioEventLoop.java:719)
		at io.netty.channel.nio.NioEventLoop.processSelectedKeysOptimized(NioEventLoop.java:655)
		at io.netty.channel.nio.NioEventLoop.processSelectedKeys(NioEventLoop.java:581)
		at io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:493)
		at io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:989)
		at io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)
		at io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)
		at java.lang.Thread.run(Thread.java:748)
Caused by: java.lang.NoSuchMethodException: class reactor.core.publisher.Mono class com.bank.manage.customer.controller.CustomerController.getCustomerByIdFallBackMethod(class java.lang.String,class java.lang.Throwable)
	at io.github.resilience4j.fallback.FallbackMethod.create(FallbackMethod.java:92)
	at io.github.resilience4j.circuitbreaker.configure.CircuitBreakerAspect.circuitBreakerAroundAdvice(CircuitBreakerAspect.java:115)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethodWithGivenArgs(AbstractAspectJAdvice.java:634)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethod(AbstractAspectJAdvice.java:624)
	at org.springframework.aop.aspectj.AspectJAroundAdvice.invoke(AspectJAroundAdvice.java:72)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:175)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:750)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:97)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:750)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:692)
	at com.bank.manage.customer.controller.CustomerController$$EnhancerBySpringCGLIB$$4daa306c.getCustomerById(<generated>)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.web.reactive.result.method.InvocableHandlerMethod.lambda$invoke$0(InvocableHandlerMethod.java:146)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:125)
	at reactor.core.publisher.Operators$MonoSubscriber.complete(Operators.java:1815)
	at reactor.core.publisher.MonoZip$ZipCoordinator.signal(MonoZip.java:251)
	at reactor.core.publisher.MonoZip$ZipInner.onNext(MonoZip.java:336)
	at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.onNext(MonoPeekTerminal.java:180)
	at reactor.core.publisher.FluxDefaultIfEmpty$DefaultIfEmptySubscriber.onNext(FluxDefaultIfEmpty.java:100)
	at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onNext(FluxSwitchIfEmpty.java:73)
	at reactor.core.publisher.Operators$ScalarSubscription.request(Operators.java:2397)
	at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.set(Operators.java:2193)
	at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onSubscribe(Operators.java:2067)
	at reactor.core.publisher.FluxFlatMap.trySubscribeScalarMap(FluxFlatMap.java:192)
	at reactor.core.publisher.MonoFlatMap.subscribeOrReturn(MonoFlatMap.java:53)
	at reactor.core.publisher.Mono.subscribe(Mono.java:4135)
	at reactor.core.publisher.MonoZip.subscribe(MonoZip.java:128)
	at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:64)
	at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:52)
	at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.subscribeNext(MonoIgnoreThen.java:236)
	at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.onComplete(MonoIgnoreThen.java:203)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.onComplete(MonoFlatMap.java:181)
	at reactor.core.publisher.Operators.complete(Operators.java:136)
	at reactor.core.publisher.MonoZip.subscribe(MonoZip.java:120)
	at reactor.core.publisher.Mono.subscribe(Mono.java:4150)
	at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.subscribeNext(MonoIgnoreThen.java:255)
	at reactor.core.publisher.MonoIgnoreThen.subscribe(MonoIgnoreThen.java:51)
	at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:64)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:157)
	at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onNext(FluxSwitchIfEmpty.java:73)
	at reactor.core.publisher.MonoNext$NextSubscriber.onNext(MonoNext.java:82)
	at reactor.core.publisher.FluxConcatMap$ConcatMapImmediate.innerNext(FluxConcatMap.java:281)
	at reactor.core.publisher.FluxConcatMap$ConcatMapInner.onNext(FluxConcatMap.java:860)
	at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onNext(FluxMapFuseable.java:127)
	at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.onNext(MonoPeekTerminal.java:180)
	at reactor.core.publisher.Operators$ScalarSubscription.request(Operators.java:2397)
	at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.request(MonoPeekTerminal.java:139)
	at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.request(FluxMapFuseable.java:169)
	at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.set(Operators.java:2193)
	at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onSubscribe(Operators.java:2067)
	at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onSubscribe(FluxMapFuseable.java:96)
	at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.onSubscribe(MonoPeekTerminal.java:152)
	at reactor.core.publisher.MonoJust.subscribe(MonoJust.java:54)
	at reactor.core.publisher.Mono.subscribe(Mono.java:4150)
	at reactor.core.publisher.FluxConcatMap$ConcatMapImmediate.drain(FluxConcatMap.java:448)
	at reactor.core.publisher.FluxConcatMap$ConcatMapImmediate.onSubscribe(FluxConcatMap.java:218)
	at reactor.core.publisher.FluxIterable.subscribe(FluxIterable.java:164)
	at reactor.core.publisher.FluxIterable.subscribe(FluxIterable.java:86)
	at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:64)
	at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:52)
	at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:64)
	at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:52)
	at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:64)
	at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:52)
	at reactor.core.publisher.Mono.subscribe(Mono.java:4150)
	at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.subscribeNext(MonoIgnoreThen.java:255)
	at reactor.core.publisher.MonoIgnoreThen.subscribe(MonoIgnoreThen.java:51)
	at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:64)
	at reactor.netty.http.server.HttpServer$HttpServerHandle.onStateChange(HttpServer.java:915)
	at reactor.netty.ReactorNetty$CompositeConnectionObserver.onStateChange(ReactorNetty.java:654)
	at reactor.netty.transport.ServerTransport$ChildObserver.onStateChange(ServerTransport.java:478)
	at reactor.netty.http.server.HttpServerOperations.onInboundNext(HttpServerOperations.java:526)
	at reactor.netty.channel.ChannelOperationsHandler.channelRead(ChannelOperationsHandler.java:94)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:379)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:365)
	at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:357)
	at reactor.netty.http.server.HttpTrafficHandler.channelRead(HttpTrafficHandler.java:209)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:379)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:365)
	at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:357)
	at io.netty.channel.CombinedChannelDuplexHandler$DelegatingChannelHandlerContext.fireChannelRead(CombinedChannelDuplexHandler.java:436)
	at io.netty.handler.codec.ByteToMessageDecoder.fireChannelRead(ByteToMessageDecoder.java:324)
	at io.netty.handler.codec.ByteToMessageDecoder.fireChannelRead(ByteToMessageDecoder.java:311)
	at io.netty.handler.codec.ByteToMessageDecoder.callDecode(ByteToMessageDecoder.java:432)
	at io.netty.handler.codec.ByteToMessageDecoder.channelRead(ByteToMessageDecoder.java:276)
	at io.netty.channel.CombinedChannelDuplexHandler.channelRead(CombinedChannelDuplexHandler.java:251)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:379)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:365)
	at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:357)
	at io.netty.channel.DefaultChannelPipeline$HeadContext.channelRead(DefaultChannelPipeline.java:1410)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:379)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:365)
	at io.netty.channel.DefaultChannelPipeline.fireChannelRead(DefaultChannelPipeline.java:919)
	at io.netty.channel.nio.AbstractNioByteChannel$NioByteUnsafe.read(AbstractNioByteChannel.java:166)
	at io.netty.channel.nio.NioEventLoop.processSelectedKey(NioEventLoop.java:719)
	at io.netty.channel.nio.NioEventLoop.processSelectedKeysOptimized(NioEventLoop.java:655)
	at io.netty.channel.nio.NioEventLoop.processSelectedKeys(NioEventLoop.java:581)
	at io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:493)
	at io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:989)
	at io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)
	at io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)
	at java.lang.Thread.run(Thread.java:748)
2021-07-19 19:07:20,605 DEBUG [reactor-http-nio-3] org.springframework.core.log.CompositeLog : [94e45130-2, L:/0:0:0:0:0:0:0:1:8090 - R:/0:0:0:0:0:0:0:1:61372] Encoding [{timestamp=Mon Jul 19 19:07:20 COT 2021, path=/customer/60e231e30d2f326bba123479, status=500, error= (truncated)...]
2021-07-19 19:07:20,607 DEBUG [reactor-http-nio-3] org.springframework.core.log.LogFormatUtils : [94e45130-2, L:/0:0:0:0:0:0:0:1:8090 - R:/0:0:0:0:0:0:0:1:61372] Completed 500 INTERNAL_SERVER_ERROR
2021-07-19 19:07:41,691 DEBUG [DiscoveryClient-HeartbeatExecutor-0] org.springframework.core.log.CompositeLog : HTTP PUT http://localhost:8761/eureka/apps/CUSTOMER_SERVICE/host.docker.internal:customer_service:8090?status=UP&lastDirtyTimestamp=1626739511420
2021-07-19 19:07:41,694 DEBUG [DiscoveryClient-HeartbeatExecutor-0] org.springframework.core.log.CompositeLog : Accept=[application/json, application/*+json]
2021-07-19 19:07:41,697 DEBUG [DiscoveryClient-CacheRefreshExecutor-0] org.springframework.core.log.CompositeLog : HTTP GET http://localhost:8761/eureka/apps/delta
2021-07-19 19:07:41,699 DEBUG [DiscoveryClient-CacheRefreshExecutor-0] org.springframework.core.log.CompositeLog : Accept=[application/json, application/*+json]
2021-07-19 19:07:41,723 DEBUG [DiscoveryClient-HeartbeatExecutor-0] org.springframework.core.log.CompositeLog : Response 200 OK
2021-07-19 19:07:41,751 DEBUG [DiscoveryClient-CacheRefreshExecutor-0] org.springframework.core.log.CompositeLog : Response 200 OK
2021-07-19 19:07:41,751 DEBUG [DiscoveryClient-CacheRefreshExecutor-0] org.springframework.core.log.CompositeLog : Reading to [org.springframework.cloud.netflix.eureka.http.EurekaApplications]
2021-07-19 19:07:56,149 INFO [RMI TCP Connection(12)-127.0.0.1] com.netflix.discovery.DiscoveryClient$3 : Saw local status change event StatusChangeEvent [timestamp=1626739676149, current=DOWN, previous=UP]
2021-07-19 19:07:56,150 INFO [DiscoveryClient-InstanceInfoReplicator-0] com.netflix.discovery.DiscoveryClient : DiscoveryClient_CUSTOMER_SERVICE/host.docker.internal:customer_service:8090: registering service...
2021-07-19 19:07:56,151 DEBUG [DiscoveryClient-InstanceInfoReplicator-0] org.springframework.core.log.CompositeLog : HTTP POST http://localhost:8761/eureka/apps/CUSTOMER_SERVICE
2021-07-19 19:07:56,151 DEBUG [DiscoveryClient-InstanceInfoReplicator-0] org.springframework.core.log.CompositeLog : Accept=[application/json, application/*+json]
2021-07-19 19:07:56,152 DEBUG [DiscoveryClient-InstanceInfoReplicator-0] org.springframework.core.log.CompositeLog : Writing [InstanceInfo [instanceId = host.docker.internal:customer_service:8090, appName = CUSTOMER_SERVICE, hostName = host.docker.internal, status = DOWN, ipAddr = 192.168.1.12, port = 8090, securePort = 443, dataCenterInfo = com.netflix.appinfo.MyDataCenterInfo@2ebf379c] as "application/json"
2021-07-19 19:07:56,246 INFO [RMI TCP Connection(12)-127.0.0.1] com.mongodb.diagnostics.logging.SLF4JLogger : Closed connection [connectionId{localValue:3, serverValue:24}] to localhost:27017 because the pool has been closed.
2021-07-19 19:07:56,386 DEBUG [DiscoveryClient-InstanceInfoReplicator-0] org.springframework.core.log.CompositeLog : Response 204 NO_CONTENT
2021-07-19 19:07:56,387 INFO [DiscoveryClient-InstanceInfoReplicator-0] com.netflix.discovery.DiscoveryClient : DiscoveryClient_CUSTOMER_SERVICE/host.docker.internal:customer_service:8090 - registration status: 204
2021-07-19 19:08:00,299 INFO [RMI TCP Connection(12)-127.0.0.1] com.netflix.discovery.DiscoveryClient : Shutting down DiscoveryClient ...
2021-07-19 19:08:03,305 INFO [RMI TCP Connection(12)-127.0.0.1] com.netflix.discovery.DiscoveryClient : Unregistering ...
2021-07-19 19:08:03,308 DEBUG [RMI TCP Connection(12)-127.0.0.1] org.springframework.core.log.CompositeLog : HTTP DELETE http://localhost:8761/eureka/apps/CUSTOMER_SERVICE/host.docker.internal:customer_service:8090
2021-07-19 19:08:03,310 DEBUG [RMI TCP Connection(12)-127.0.0.1] org.springframework.core.log.CompositeLog : Accept=[application/json, application/*+json]
2021-07-19 19:08:03,318 DEBUG [RMI TCP Connection(12)-127.0.0.1] org.springframework.core.log.CompositeLog : Response 200 OK
2021-07-19 19:08:03,319 INFO [RMI TCP Connection(12)-127.0.0.1] com.netflix.discovery.DiscoveryClient : DiscoveryClient_CUSTOMER_SERVICE/host.docker.internal:customer_service:8090 - deregister  status: 200
2021-07-19 19:08:03,327 INFO [RMI TCP Connection(12)-127.0.0.1] com.netflix.discovery.DiscoveryClient : Completed shut down of DiscoveryClient
2021-07-19 19:08:15,212 INFO [background-preinit] org.hibernate.validator.internal.util.Version : HV000001: Hibernate Validator 6.2.0.Final
2021-07-19 19:08:16,918 DEBUG [main] org.springframework.core.log.CompositeLog : HTTP GET http://localhost:8888/customer_service/default/main
2021-07-19 19:08:16,994 DEBUG [main] org.springframework.core.log.CompositeLog : Accept=[application/json, application/*+json]
2021-07-19 19:08:19,513 DEBUG [main] org.springframework.core.log.CompositeLog : Response 200 OK
2021-07-19 19:08:19,515 DEBUG [main] org.springframework.core.log.CompositeLog : Reading to [org.springframework.cloud.config.environment.Environment]
2021-07-19 19:08:19,569 INFO [main] org.springframework.boot.SpringApplication : No active profile set, falling back to default profiles: default
2021-07-19 19:08:22,829 INFO [main] com.mongodb.diagnostics.logging.SLF4JLogger : Cluster created with settings {hosts=[localhost:27017], mode=SINGLE, requiredClusterType=UNKNOWN, serverSelectionTimeout='30000 ms'}
2021-07-19 19:08:24,461 DEBUG [main] org.springframework.web.reactive.result.method.AbstractHandlerMethodMapping : 6 mappings in 'requestMappingHandlerMapping'
2021-07-19 19:08:24,515 DEBUG [main] org.springframework.web.reactive.handler.SimpleUrlHandlerMapping : Patterns [/webjars/**, /**] in 'resourceHandlerMapping'
2021-07-19 19:08:24,570 INFO [cluster-ClusterId{value='60f613f60ee5f6210841bbb9', description='null'}-localhost:27017] com.mongodb.diagnostics.logging.SLF4JLogger : Opened connection [connectionId{localValue:2, serverValue:26}] to localhost:27017
2021-07-19 19:08:24,570 INFO [cluster-rtt-ClusterId{value='60f613f60ee5f6210841bbb9', description='null'}-localhost:27017] com.mongodb.diagnostics.logging.SLF4JLogger : Opened connection [connectionId{localValue:1, serverValue:25}] to localhost:27017
2021-07-19 19:08:24,572 INFO [cluster-ClusterId{value='60f613f60ee5f6210841bbb9', description='null'}-localhost:27017] com.mongodb.diagnostics.logging.SLF4JLogger : Monitor thread successfully connected to server with description ServerDescription{address=localhost:27017, type=STANDALONE, state=CONNECTED, ok=true, minWireVersion=0, maxWireVersion=9, maxDocumentSize=16777216, logicalSessionTimeoutMinutes=30, roundTripTimeNanos=70787300}
2021-07-19 19:08:27,644 DEBUG [main] org.springframework.web.reactive.result.method.annotation.ControllerMethodResolver : ControllerAdvice beans: none
2021-07-19 19:08:27,707 DEBUG [main] org.springframework.web.server.adapter.HttpWebHandlerAdapter : enableLoggingRequestDetails='false': form data and headers will be masked to prevent unsafe logging of potentially sensitive data
2021-07-19 19:08:30,094 INFO [main] com.netflix.discovery.DiscoveryClient : Initializing Eureka in region us-east-1
2021-07-19 19:08:30,138 INFO [main] com.netflix.discovery.shared.resolver.aws.ConfigClusterResolver : Resolving eureka endpoints via configuration
2021-07-19 19:08:30,194 INFO [main] com.netflix.discovery.DiscoveryClient : Disable delta property : false
2021-07-19 19:08:30,194 INFO [main] com.netflix.discovery.DiscoveryClient : Single vip registry refresh property : null
2021-07-19 19:08:30,194 INFO [main] com.netflix.discovery.DiscoveryClient : Force full registry fetch : false
2021-07-19 19:08:30,195 INFO [main] com.netflix.discovery.DiscoveryClient : Application is null : false
2021-07-19 19:08:30,195 INFO [main] com.netflix.discovery.DiscoveryClient : Registered Applications size is zero : true
2021-07-19 19:08:30,195 INFO [main] com.netflix.discovery.DiscoveryClient : Application version is -1: true
2021-07-19 19:08:30,195 INFO [main] com.netflix.discovery.DiscoveryClient : Getting all instance registry info from the eureka server
2021-07-19 19:08:31,959 DEBUG [main] org.springframework.core.log.CompositeLog : HTTP GET http://localhost:8761/eureka/apps/
2021-07-19 19:08:32,003 DEBUG [main] org.springframework.core.log.CompositeLog : Accept=[application/json, application/*+json]
2021-07-19 19:08:32,086 DEBUG [main] org.springframework.core.log.CompositeLog : Response 200 OK
2021-07-19 19:08:32,087 DEBUG [main] org.springframework.core.log.CompositeLog : Reading to [org.springframework.cloud.netflix.eureka.http.EurekaApplications]
2021-07-19 19:08:32,181 INFO [main] com.netflix.discovery.DiscoveryClient : The response status is 200
2021-07-19 19:08:32,184 INFO [main] com.netflix.discovery.DiscoveryClient : Starting heartbeat executor: renew interval is: 30
2021-07-19 19:08:32,187 INFO [main] com.netflix.discovery.InstanceInfoReplicator : InstanceInfoReplicator onDemand update allowed rate per min is 4
2021-07-19 19:08:32,192 INFO [main] com.netflix.discovery.DiscoveryClient : Discovery Client initialized at timestamp 1626739712191 with initial instances count: 2
2021-07-19 19:08:32,202 INFO [main] com.netflix.discovery.DiscoveryClient$3 : Saw local status change event StatusChangeEvent [timestamp=1626739712202, current=UP, previous=STARTING]
2021-07-19 19:08:32,205 INFO [DiscoveryClient-InstanceInfoReplicator-0] com.netflix.discovery.DiscoveryClient : DiscoveryClient_CUSTOMER_SERVICE/host.docker.internal:customer_service:8090: registering service...
2021-07-19 19:08:32,216 DEBUG [DiscoveryClient-InstanceInfoReplicator-0] org.springframework.core.log.CompositeLog : HTTP POST http://localhost:8761/eureka/apps/CUSTOMER_SERVICE
2021-07-19 19:08:32,218 DEBUG [DiscoveryClient-InstanceInfoReplicator-0] org.springframework.core.log.CompositeLog : Accept=[application/json, application/*+json]
2021-07-19 19:08:32,226 DEBUG [DiscoveryClient-InstanceInfoReplicator-0] org.springframework.core.log.CompositeLog : Writing [InstanceInfo [instanceId = host.docker.internal:customer_service:8090, appName = CUSTOMER_SERVICE, hostName = host.docker.internal, status = UP, ipAddr = 192.168.1.12, port = 8090, securePort = 443, dataCenterInfo = com.netflix.appinfo.MyDataCenterInfo@2db6edfc] as "application/json"
2021-07-19 19:08:32,253 DEBUG [DiscoveryClient-InstanceInfoReplicator-0] org.springframework.core.log.CompositeLog : Response 204 NO_CONTENT
2021-07-19 19:08:32,254 INFO [DiscoveryClient-InstanceInfoReplicator-0] com.netflix.discovery.DiscoveryClient : DiscoveryClient_CUSTOMER_SERVICE/host.docker.internal:customer_service:8090 - registration status: 204
2021-07-19 19:08:34,463 INFO [main] org.springframework.boot.StartupInfoLogger : Started Application in 20.912 seconds (JVM running for 22.838)
2021-07-19 19:08:37,866 DEBUG [reactor-http-nio-3] org.springframework.core.log.LogFormatUtils : [9133031f-1, L:/0:0:0:0:0:0:0:1:8090 - R:/0:0:0:0:0:0:0:1:54137] HTTP GET "/customer/60e231e30d2f326bba123479"
2021-07-19 19:08:37,890 DEBUG [reactor-http-nio-3] org.springframework.web.reactive.handler.AbstractHandlerMapping : [9133031f-1, L:/0:0:0:0:0:0:0:1:8090 - R:/0:0:0:0:0:0:0:1:54137] Mapped to com.bank.manage.customer.controller.CustomerController#getCustomerById(String)
2021-07-19 19:08:38,096 INFO [nioEventLoopGroup-3-3] com.mongodb.diagnostics.logging.SLF4JLogger : Opened connection [connectionId{localValue:3, serverValue:27}] to localhost:27017
2021-07-19 19:08:38,266 DEBUG [nioEventLoopGroup-3-3] org.springframework.web.reactive.result.HandlerResultHandlerSupport : [9133031f-1, L:/0:0:0:0:0:0:0:1:8090 - R:/0:0:0:0:0:0:0:1:54137] Found 'Content-Type:application/json' in response
2021-07-19 19:08:38,267 DEBUG [nioEventLoopGroup-3-3] org.springframework.web.reactive.result.method.annotation.AbstractMessageWriterResultHandler : [9133031f-1, L:/0:0:0:0:0:0:0:1:8090 - R:/0:0:0:0:0:0:0:1:54137] 0..1 [com.bank.manage.customer.persistence.entity.Customer]
2021-07-19 19:08:38,280 DEBUG [nioEventLoopGroup-3-3] org.springframework.core.log.CompositeLog : [9133031f-1, L:/0:0:0:0:0:0:0:1:8090 - R:/0:0:0:0:0:0:0:1:54137] Encoding [Customer(id=60e231e30d2f326bba123479, firstName=Katy, lastName=Puente, document=34563563, documentTy (truncated)...]
2021-07-19 19:08:38,298 DEBUG [reactor-http-nio-3] org.springframework.core.log.LogFormatUtils : [9133031f-1, L:/0:0:0:0:0:0:0:1:8090 - R:/0:0:0:0:0:0:0:1:54137] Completed 200 OK
2021-07-19 19:08:40,481 DEBUG [reactor-http-nio-3] org.springframework.core.log.LogFormatUtils : [9133031f-2, L:/0:0:0:0:0:0:0:1:8090 - R:/0:0:0:0:0:0:0:1:54137] HTTP GET "/customer/60e231e30d2f326bba123479"
2021-07-19 19:08:40,493 DEBUG [reactor-http-nio-3] org.springframework.web.reactive.handler.AbstractHandlerMapping : [9133031f-2, L:/0:0:0:0:0:0:0:1:8090 - R:/0:0:0:0:0:0:0:1:54137] Mapped to com.bank.manage.customer.controller.CustomerController#getCustomerById(String)
2021-07-19 19:08:40,497 DEBUG [nioEventLoopGroup-3-3] org.springframework.web.reactive.result.HandlerResultHandlerSupport : [9133031f-2, L:/0:0:0:0:0:0:0:1:8090 - R:/0:0:0:0:0:0:0:1:54137] Found 'Content-Type:application/json' in response
2021-07-19 19:08:40,498 DEBUG [nioEventLoopGroup-3-3] org.springframework.web.reactive.result.method.annotation.AbstractMessageWriterResultHandler : [9133031f-2, L:/0:0:0:0:0:0:0:1:8090 - R:/0:0:0:0:0:0:0:1:54137] 0..1 [com.bank.manage.customer.persistence.entity.Customer]
2021-07-19 19:08:40,498 DEBUG [nioEventLoopGroup-3-3] org.springframework.core.log.CompositeLog : [9133031f-2, L:/0:0:0:0:0:0:0:1:8090 - R:/0:0:0:0:0:0:0:1:54137] Encoding [Customer(id=60e231e30d2f326bba123479, firstName=Katy, lastName=Puente, document=34563563, documentTy (truncated)...]
2021-07-19 19:08:40,501 DEBUG [reactor-http-nio-3] org.springframework.core.log.LogFormatUtils : [9133031f-2, L:/0:0:0:0:0:0:0:1:8090 - R:/0:0:0:0:0:0:0:1:54137] Completed 200 OK
2021-07-19 19:08:45,820 DEBUG [reactor-http-nio-3] org.springframework.core.log.LogFormatUtils : [9133031f-3, L:/0:0:0:0:0:0:0:1:8090 - R:/0:0:0:0:0:0:0:1:54137] HTTP GET "/customer/"
2021-07-19 19:08:45,822 DEBUG [reactor-http-nio-3] org.springframework.web.reactive.handler.AbstractHandlerMapping : [9133031f-3, L:/0:0:0:0:0:0:0:1:8090 - R:/0:0:0:0:0:0:0:1:54137] Mapped to com.bank.manage.customer.controller.CustomerController#getAllCustomers()
2021-07-19 19:08:45,823 INFO [reactor-http-nio-3] com.bank.manage.customer.controller.CustomerController :  EndPoit get by all customers {} 
2021-07-19 19:08:45,828 DEBUG [reactor-http-nio-3] org.springframework.web.reactive.result.HandlerResultHandlerSupport : [9133031f-3, L:/0:0:0:0:0:0:0:1:8090 - R:/0:0:0:0:0:0:0:1:54137] Found 'Content-Type:application/json' in response
2021-07-19 19:08:45,828 DEBUG [reactor-http-nio-3] org.springframework.web.reactive.result.method.annotation.AbstractMessageWriterResultHandler : [9133031f-3, L:/0:0:0:0:0:0:0:1:8090 - R:/0:0:0:0:0:0:0:1:54137] 0..N [com.bank.manage.customer.persistence.entity.Customer]
2021-07-19 19:08:45,920 DEBUG [nioEventLoopGroup-3-3] org.springframework.core.log.CompositeLog : [9133031f-3, L:/0:0:0:0:0:0:0:1:8090 - R:/0:0:0:0:0:0:0:1:54137] Resolved [ConversionFailedException: Failed to convert from type [java.lang.Double] to type [java.lang.Integer] for value '9.89898968968E11'; nested exception is java.lang.IllegalArgumentException: Could not convert number [9.89898968968E11] of type [java.lang.Double] to target class [java.lang.Integer]: overflow] for HTTP GET /customer/
2021-07-19 19:08:45,925 ERROR [nioEventLoopGroup-3-3] org.springframework.core.log.CompositeLog : [9133031f-3, L:/0:0:0:0:0:0:0:1:8090 - R:/0:0:0:0:0:0:0:1:54137]  500 Server Error for HTTP GET "/customer/"
org.springframework.core.convert.ConversionFailedException: Failed to convert from type [java.lang.Double] to type [java.lang.Integer] for value '9.89898968968E11'; nested exception is java.lang.IllegalArgumentException: Could not convert number [9.89898968968E11] of type [java.lang.Double] to target class [java.lang.Integer]: overflow
	at org.springframework.core.convert.support.ConversionUtils.invokeConverter(ConversionUtils.java:47)
	Suppressed: reactor.core.publisher.FluxOnAssembly$OnAssemblyException: 
Error has been observed at the following site(s):
	|_ checkpoint ⇢ Handler com.bank.manage.customer.controller.CustomerController#getAllCustomers() [DispatcherHandler]
	|_ checkpoint ⇢ org.springframework.boot.actuate.metrics.web.reactive.server.MetricsWebFilter [DefaultWebFilterChain]
	|_ checkpoint ⇢ HTTP GET "/customer/" [ExceptionHandlingWebHandler]
Stack trace:
		at org.springframework.core.convert.support.ConversionUtils.invokeConverter(ConversionUtils.java:47)
		at org.springframework.core.convert.support.GenericConversionService.convert(GenericConversionService.java:192)
		at org.springframework.core.convert.support.GenericConversionService.convert(GenericConversionService.java:175)
		at org.springframework.data.mongodb.core.convert.MappingMongoConverter.doConvert(MappingMongoConverter.java:1547)
		at org.springframework.data.mongodb.core.convert.MappingMongoConverter.doConvert(MappingMongoConverter.java:1540)
		at org.springframework.data.mongodb.core.convert.MappingMongoConverter.getPotentiallyConvertedSimpleRead(MappingMongoConverter.java:1060)
		at org.springframework.data.mongodb.core.convert.MappingMongoConverter.getPotentiallyConvertedSimpleRead(MappingMongoConverter.java:1038)
		at org.springframework.data.mongodb.core.convert.MappingMongoConverter$ConversionContext.convert(MappingMongoConverter.java:1919)
		at org.springframework.data.mongodb.core.convert.MappingMongoConverter$MongoDbPropertyValueProvider.getPropertyValue(MappingMongoConverter.java:1641)
		at org.springframework.data.mongodb.core.convert.MappingMongoConverter.readProperties(MappingMongoConverter.java:481)
		at org.springframework.data.mongodb.core.convert.MappingMongoConverter.populateProperties(MappingMongoConverter.java:394)
		at org.springframework.data.mongodb.core.convert.MappingMongoConverter.read(MappingMongoConverter.java:372)
		at org.springframework.data.mongodb.core.convert.MappingMongoConverter.readDocument(MappingMongoConverter.java:342)
		at org.springframework.data.mongodb.core.convert.MappingMongoConverter.read(MappingMongoConverter.java:278)
		at org.springframework.data.mongodb.core.convert.MappingMongoConverter.read(MappingMongoConverter.java:274)
		at org.springframework.data.mongodb.core.convert.MappingMongoConverter.read(MappingMongoConverter.java:102)
		at org.springframework.data.mongodb.core.ReactiveMongoTemplate$ReadDocumentCallback.doWith(ReactiveMongoTemplate.java:3155)
		at reactor.core.publisher.FluxConcatMap$ConcatMapImmediate.drain(FluxConcatMap.java:374)
		at reactor.core.publisher.FluxConcatMap$ConcatMapImmediate.onNext(FluxConcatMap.java:250)
		at reactor.core.publisher.FluxCreate$BufferAsyncSink.drain(FluxCreate.java:793)
		at reactor.core.publisher.FluxCreate$BufferAsyncSink.next(FluxCreate.java:718)
		at reactor.core.publisher.FluxCreate$SerializedFluxSink.next(FluxCreate.java:154)
		at java.util.ArrayList.forEach(ArrayList.java:1259)
		at com.mongodb.reactivestreams.client.internal.BatchCursorFlux.lambda$recurseCursor$4(BatchCursorFlux.java:94)
		at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.onNext(MonoPeekTerminal.java:171)
		at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.onNext(MonoPeekTerminal.java:180)
		at reactor.core.publisher.FluxPeekFuseable$PeekConditionalSubscriber.onNext(FluxPeekFuseable.java:854)
		at reactor.core.publisher.MonoCreate$DefaultMonoSink.success(MonoCreate.java:160)
		at com.mongodb.reactivestreams.client.internal.MongoOperationPublisher.lambda$sinkToCallback$30(MongoOperationPublisher.java:550)
		at com.mongodb.internal.operation.AsyncQueryBatchCursor.next(AsyncQueryBatchCursor.java:207)
		at com.mongodb.internal.operation.AsyncQueryBatchCursor.next(AsyncQueryBatchCursor.java:146)
		at com.mongodb.reactivestreams.client.internal.BatchCursor.lambda$next$0(BatchCursor.java:35)
		at reactor.core.publisher.MonoCreate.subscribe(MonoCreate.java:57)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4150)
		at reactor.core.publisher.Mono.subscribeWith(Mono.java:4265)
		at reactor.core.publisher.Mono.subscribe(Mono.java:3982)
		at com.mongodb.reactivestreams.client.internal.BatchCursorFlux.recurseCursor(BatchCursorFlux.java:104)
		at com.mongodb.reactivestreams.client.internal.BatchCursorFlux.lambda$subscribe$0(BatchCursorFlux.java:56)
		at reactor.core.publisher.LambdaMonoSubscriber.onNext(LambdaMonoSubscriber.java:171)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onNext(FluxMapFuseable.java:127)
		at reactor.core.publisher.Operators$MonoSubscriber.complete(Operators.java:1815)
		at reactor.core.publisher.MonoFlatMap$FlatMapInner.onNext(MonoFlatMap.java:249)
		at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.onNext(MonoPeekTerminal.java:180)
		at reactor.core.publisher.MonoCreate$DefaultMonoSink.success(MonoCreate.java:160)
		at com.mongodb.reactivestreams.client.internal.MongoOperationPublisher.lambda$sinkToCallback$30(MongoOperationPublisher.java:550)
		at com.mongodb.reactivestreams.client.internal.OperationExecutorImpl.lambda$execute$2(OperationExecutorImpl.java:73)
		at com.mongodb.internal.async.ErrorHandlingResultCallback.onResult(ErrorHandlingResultCallback.java:48)
		at com.mongodb.internal.operation.FindOperation$3.onResult(FindOperation.java:755)
		at com.mongodb.internal.operation.OperationHelper$ReferenceCountedReleasingWrappedCallback.onResult(OperationHelper.java:532)
		at com.mongodb.internal.operation.CommandOperationHelper$10.onResult(CommandOperationHelper.java:483)
		at com.mongodb.internal.async.ErrorHandlingResultCallback.onResult(ErrorHandlingResultCallback.java:48)
		at com.mongodb.internal.connection.DefaultServer$DefaultServerProtocolExecutor$2.onResult(DefaultServer.java:286)
		at com.mongodb.internal.async.ErrorHandlingResultCallback.onResult(ErrorHandlingResultCallback.java:48)
		at com.mongodb.internal.connection.CommandProtocolImpl$1.onResult(CommandProtocolImpl.java:84)
		at com.mongodb.internal.connection.DefaultConnectionPool$PooledConnection$2.onResult(DefaultConnectionPool.java:530)
		at com.mongodb.internal.connection.UsageTrackingInternalConnection$2.onResult(UsageTrackingInternalConnection.java:142)
		at com.mongodb.internal.async.ErrorHandlingResultCallback.onResult(ErrorHandlingResultCallback.java:48)
		at com.mongodb.internal.connection.InternalStreamConnection$2$1.onResult(InternalStreamConnection.java:462)
		at com.mongodb.internal.connection.InternalStreamConnection$2$1.onResult(InternalStreamConnection.java:439)
		at com.mongodb.internal.connection.InternalStreamConnection$MessageHeaderCallback$MessageCallback.onResult(InternalStreamConnection.java:744)
		at com.mongodb.internal.connection.InternalStreamConnection$MessageHeaderCallback$MessageCallback.onResult(InternalStreamConnection.java:711)
		at com.mongodb.internal.connection.InternalStreamConnection$5.completed(InternalStreamConnection.java:581)
		at com.mongodb.internal.connection.InternalStreamConnection$5.completed(InternalStreamConnection.java:578)
		at com.mongodb.connection.netty.NettyStream.readAsync(NettyStream.java:322)
		at com.mongodb.connection.netty.NettyStream.handleReadResponse(NettyStream.java:350)
		at com.mongodb.connection.netty.NettyStream.access$1200(NettyStream.java:104)
		at com.mongodb.connection.netty.NettyStream$InboundBufferHandler.channelRead0(NettyStream.java:409)
		at com.mongodb.connection.netty.NettyStream$InboundBufferHandler.channelRead0(NettyStream.java:406)
		at io.netty.channel.SimpleChannelInboundHandler.channelRead(SimpleChannelInboundHandler.java:99)
		at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:379)
		at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:365)
		at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:357)
		at io.netty.channel.DefaultChannelPipeline$HeadContext.channelRead(DefaultChannelPipeline.java:1410)
		at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:379)
		at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:365)
		at io.netty.channel.DefaultChannelPipeline.fireChannelRead(DefaultChannelPipeline.java:919)
		at io.netty.channel.nio.AbstractNioByteChannel$NioByteUnsafe.read(AbstractNioByteChannel.java:166)
		at io.netty.channel.nio.NioEventLoop.processSelectedKey(NioEventLoop.java:719)
		at io.netty.channel.nio.NioEventLoop.processSelectedKeysOptimized(NioEventLoop.java:655)
		at io.netty.channel.nio.NioEventLoop.processSelectedKeys(NioEventLoop.java:581)
		at io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:493)
		at io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:989)
		at io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)
		at io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)
		at java.lang.Thread.run(Thread.java:748)
Caused by: java.lang.IllegalArgumentException: Could not convert number [9.89898968968E11] of type [java.lang.Double] to target class [java.lang.Integer]: overflow
	at org.springframework.util.NumberUtils.raiseOverflowException(NumberUtils.java:175)
	at org.springframework.util.NumberUtils.convertNumberToTargetClass(NumberUtils.java:108)
	at org.springframework.core.convert.support.NumberToNumberConverterFactory$NumberToNumber.convert(NumberToNumberConverterFactory.java:66)
	at org.springframework.core.convert.support.NumberToNumberConverterFactory$NumberToNumber.convert(NumberToNumberConverterFactory.java:56)
	at org.springframework.core.convert.support.GenericConversionService$ConverterFactoryAdapter.convert(GenericConversionService.java:437)
	at org.springframework.core.convert.support.ConversionUtils.invokeConverter(ConversionUtils.java:41)
	at org.springframework.core.convert.support.GenericConversionService.convert(GenericConversionService.java:192)
	at org.springframework.core.convert.support.GenericConversionService.convert(GenericConversionService.java:175)
	at org.springframework.data.mongodb.core.convert.MappingMongoConverter.doConvert(MappingMongoConverter.java:1547)
	at org.springframework.data.mongodb.core.convert.MappingMongoConverter.doConvert(MappingMongoConverter.java:1540)
	at org.springframework.data.mongodb.core.convert.MappingMongoConverter.getPotentiallyConvertedSimpleRead(MappingMongoConverter.java:1060)
	at org.springframework.data.mongodb.core.convert.MappingMongoConverter.getPotentiallyConvertedSimpleRead(MappingMongoConverter.java:1038)
	at org.springframework.data.mongodb.core.convert.MappingMongoConverter$ConversionContext.convert(MappingMongoConverter.java:1919)
	at org.springframework.data.mongodb.core.convert.MappingMongoConverter$MongoDbPropertyValueProvider.getPropertyValue(MappingMongoConverter.java:1641)
	at org.springframework.data.mongodb.core.convert.MappingMongoConverter.readProperties(MappingMongoConverter.java:481)
	at org.springframework.data.mongodb.core.convert.MappingMongoConverter.populateProperties(MappingMongoConverter.java:394)
	at org.springframework.data.mongodb.core.convert.MappingMongoConverter.read(MappingMongoConverter.java:372)
	at org.springframework.data.mongodb.core.convert.MappingMongoConverter.readDocument(MappingMongoConverter.java:342)
	at org.springframework.data.mongodb.core.convert.MappingMongoConverter.read(MappingMongoConverter.java:278)
	at org.springframework.data.mongodb.core.convert.MappingMongoConverter.read(MappingMongoConverter.java:274)
	at org.springframework.data.mongodb.core.convert.MappingMongoConverter.read(MappingMongoConverter.java:102)
	at org.springframework.data.mongodb.core.ReactiveMongoTemplate$ReadDocumentCallback.doWith(ReactiveMongoTemplate.java:3155)
	at reactor.core.publisher.FluxConcatMap$ConcatMapImmediate.drain(FluxConcatMap.java:374)
	at reactor.core.publisher.FluxConcatMap$ConcatMapImmediate.onNext(FluxConcatMap.java:250)
	at reactor.core.publisher.FluxCreate$BufferAsyncSink.drain(FluxCreate.java:793)
	at reactor.core.publisher.FluxCreate$BufferAsyncSink.next(FluxCreate.java:718)
	at reactor.core.publisher.FluxCreate$SerializedFluxSink.next(FluxCreate.java:154)
	at java.util.ArrayList.forEach(ArrayList.java:1259)
	at com.mongodb.reactivestreams.client.internal.BatchCursorFlux.lambda$recurseCursor$4(BatchCursorFlux.java:94)
	at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.onNext(MonoPeekTerminal.java:171)
	at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.onNext(MonoPeekTerminal.java:180)
	at reactor.core.publisher.FluxPeekFuseable$PeekConditionalSubscriber.onNext(FluxPeekFuseable.java:854)
	at reactor.core.publisher.MonoCreate$DefaultMonoSink.success(MonoCreate.java:160)
	at com.mongodb.reactivestreams.client.internal.MongoOperationPublisher.lambda$sinkToCallback$30(MongoOperationPublisher.java:550)
	at com.mongodb.internal.operation.AsyncQueryBatchCursor.next(AsyncQueryBatchCursor.java:207)
	at com.mongodb.internal.operation.AsyncQueryBatchCursor.next(AsyncQueryBatchCursor.java:146)
	at com.mongodb.reactivestreams.client.internal.BatchCursor.lambda$next$0(BatchCursor.java:35)
	at reactor.core.publisher.MonoCreate.subscribe(MonoCreate.java:57)
	at reactor.core.publisher.Mono.subscribe(Mono.java:4150)
	at reactor.core.publisher.Mono.subscribeWith(Mono.java:4265)
	at reactor.core.publisher.Mono.subscribe(Mono.java:3982)
	at com.mongodb.reactivestreams.client.internal.BatchCursorFlux.recurseCursor(BatchCursorFlux.java:104)
	at com.mongodb.reactivestreams.client.internal.BatchCursorFlux.lambda$subscribe$0(BatchCursorFlux.java:56)
	at reactor.core.publisher.LambdaMonoSubscriber.onNext(LambdaMonoSubscriber.java:171)
	at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onNext(FluxMapFuseable.java:127)
	at reactor.core.publisher.Operators$MonoSubscriber.complete(Operators.java:1815)
	at reactor.core.publisher.MonoFlatMap$FlatMapInner.onNext(MonoFlatMap.java:249)
	at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.onNext(MonoPeekTerminal.java:180)
	at reactor.core.publisher.MonoCreate$DefaultMonoSink.success(MonoCreate.java:160)
	at com.mongodb.reactivestreams.client.internal.MongoOperationPublisher.lambda$sinkToCallback$30(MongoOperationPublisher.java:550)
	at com.mongodb.reactivestreams.client.internal.OperationExecutorImpl.lambda$execute$2(OperationExecutorImpl.java:73)
	at com.mongodb.internal.async.ErrorHandlingResultCallback.onResult(ErrorHandlingResultCallback.java:48)
	at com.mongodb.internal.operation.FindOperation$3.onResult(FindOperation.java:755)
	at com.mongodb.internal.operation.OperationHelper$ReferenceCountedReleasingWrappedCallback.onResult(OperationHelper.java:532)
	at com.mongodb.internal.operation.CommandOperationHelper$10.onResult(CommandOperationHelper.java:483)
	at com.mongodb.internal.async.ErrorHandlingResultCallback.onResult(ErrorHandlingResultCallback.java:48)
	at com.mongodb.internal.connection.DefaultServer$DefaultServerProtocolExecutor$2.onResult(DefaultServer.java:286)
	at com.mongodb.internal.async.ErrorHandlingResultCallback.onResult(ErrorHandlingResultCallback.java:48)
	at com.mongodb.internal.connection.CommandProtocolImpl$1.onResult(CommandProtocolImpl.java:84)
	at com.mongodb.internal.connection.DefaultConnectionPool$PooledConnection$2.onResult(DefaultConnectionPool.java:530)
	at com.mongodb.internal.connection.UsageTrackingInternalConnection$2.onResult(UsageTrackingInternalConnection.java:142)
	at com.mongodb.internal.async.ErrorHandlingResultCallback.onResult(ErrorHandlingResultCallback.java:48)
	at com.mongodb.internal.connection.InternalStreamConnection$2$1.onResult(InternalStreamConnection.java:462)
	at com.mongodb.internal.connection.InternalStreamConnection$2$1.onResult(InternalStreamConnection.java:439)
	at com.mongodb.internal.connection.InternalStreamConnection$MessageHeaderCallback$MessageCallback.onResult(InternalStreamConnection.java:744)
	at com.mongodb.internal.connection.InternalStreamConnection$MessageHeaderCallback$MessageCallback.onResult(InternalStreamConnection.java:711)
	at com.mongodb.internal.connection.InternalStreamConnection$5.completed(InternalStreamConnection.java:581)
	at com.mongodb.internal.connection.InternalStreamConnection$5.completed(InternalStreamConnection.java:578)
	at com.mongodb.connection.netty.NettyStream.readAsync(NettyStream.java:322)
	at com.mongodb.connection.netty.NettyStream.handleReadResponse(NettyStream.java:350)
	at com.mongodb.connection.netty.NettyStream.access$1200(NettyStream.java:104)
	at com.mongodb.connection.netty.NettyStream$InboundBufferHandler.channelRead0(NettyStream.java:409)
	at com.mongodb.connection.netty.NettyStream$InboundBufferHandler.channelRead0(NettyStream.java:406)
	at io.netty.channel.SimpleChannelInboundHandler.channelRead(SimpleChannelInboundHandler.java:99)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:379)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:365)
	at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:357)
	at io.netty.channel.DefaultChannelPipeline$HeadContext.channelRead(DefaultChannelPipeline.java:1410)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:379)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:365)
	at io.netty.channel.DefaultChannelPipeline.fireChannelRead(DefaultChannelPipeline.java:919)
	at io.netty.channel.nio.AbstractNioByteChannel$NioByteUnsafe.read(AbstractNioByteChannel.java:166)
	at io.netty.channel.nio.NioEventLoop.processSelectedKey(NioEventLoop.java:719)
	at io.netty.channel.nio.NioEventLoop.processSelectedKeysOptimized(NioEventLoop.java:655)
	at io.netty.channel.nio.NioEventLoop.processSelectedKeys(NioEventLoop.java:581)
	at io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:493)
	at io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:989)
	at io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)
	at io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)
	at java.lang.Thread.run(Thread.java:748)
2021-07-19 19:08:45,929 DEBUG [nioEventLoopGroup-3-3] org.springframework.core.log.CompositeLog : [9133031f-3, L:/0:0:0:0:0:0:0:1:8090 - R:/0:0:0:0:0:0:0:1:54137] Encoding [{timestamp=Mon Jul 19 19:08:45 COT 2021, path=/customer/, status=500, error=Internal Server Error, r (truncated)...]
2021-07-19 19:08:45,933 DEBUG [reactor-http-nio-3] org.springframework.core.log.LogFormatUtils : [9133031f-3, L:/0:0:0:0:0:0:0:1:8090 - R:/0:0:0:0:0:0:0:1:54137] Completed 500 INTERNAL_SERVER_ERROR
2021-07-19 19:08:47,267 DEBUG [reactor-http-nio-3] org.springframework.core.log.LogFormatUtils : [9133031f-4, L:/0:0:0:0:0:0:0:1:8090 - R:/0:0:0:0:0:0:0:1:54137] HTTP GET "/customer/"
2021-07-19 19:08:47,268 DEBUG [reactor-http-nio-3] org.springframework.web.reactive.handler.AbstractHandlerMapping : [9133031f-4, L:/0:0:0:0:0:0:0:1:8090 - R:/0:0:0:0:0:0:0:1:54137] Mapped to com.bank.manage.customer.controller.CustomerController#getAllCustomers()
2021-07-19 19:08:47,269 INFO [reactor-http-nio-3] com.bank.manage.customer.controller.CustomerController :  EndPoit get by all customers {} 
2021-07-19 19:08:47,270 DEBUG [reactor-http-nio-3] org.springframework.web.reactive.result.HandlerResultHandlerSupport : [9133031f-4, L:/0:0:0:0:0:0:0:1:8090 - R:/0:0:0:0:0:0:0:1:54137] Found 'Content-Type:application/json' in response
2021-07-19 19:08:47,271 DEBUG [reactor-http-nio-3] org.springframework.web.reactive.result.method.annotation.AbstractMessageWriterResultHandler : [9133031f-4, L:/0:0:0:0:0:0:0:1:8090 - R:/0:0:0:0:0:0:0:1:54137] 0..N [com.bank.manage.customer.persistence.entity.Customer]
2021-07-19 19:08:47,279 DEBUG [nioEventLoopGroup-3-3] org.springframework.core.log.CompositeLog : [9133031f-4, L:/0:0:0:0:0:0:0:1:8090 - R:/0:0:0:0:0:0:0:1:54137] Resolved [ConversionFailedException: Failed to convert from type [java.lang.Double] to type [java.lang.Integer] for value '9.89898968968E11'; nested exception is java.lang.IllegalArgumentException: Could not convert number [9.89898968968E11] of type [java.lang.Double] to target class [java.lang.Integer]: overflow] for HTTP GET /customer/
2021-07-19 19:08:47,279 ERROR [nioEventLoopGroup-3-3] org.springframework.core.log.CompositeLog : [9133031f-4, L:/0:0:0:0:0:0:0:1:8090 - R:/0:0:0:0:0:0:0:1:54137]  500 Server Error for HTTP GET "/customer/"
org.springframework.core.convert.ConversionFailedException: Failed to convert from type [java.lang.Double] to type [java.lang.Integer] for value '9.89898968968E11'; nested exception is java.lang.IllegalArgumentException: Could not convert number [9.89898968968E11] of type [java.lang.Double] to target class [java.lang.Integer]: overflow
	at org.springframework.core.convert.support.ConversionUtils.invokeConverter(ConversionUtils.java:47)
	Suppressed: reactor.core.publisher.FluxOnAssembly$OnAssemblyException: 
Error has been observed at the following site(s):
	|_ checkpoint ⇢ Handler com.bank.manage.customer.controller.CustomerController#getAllCustomers() [DispatcherHandler]
	|_ checkpoint ⇢ org.springframework.boot.actuate.metrics.web.reactive.server.MetricsWebFilter [DefaultWebFilterChain]
	|_ checkpoint ⇢ HTTP GET "/customer/" [ExceptionHandlingWebHandler]
Stack trace:
		at org.springframework.core.convert.support.ConversionUtils.invokeConverter(ConversionUtils.java:47)
		at org.springframework.core.convert.support.GenericConversionService.convert(GenericConversionService.java:192)
		at org.springframework.core.convert.support.GenericConversionService.convert(GenericConversionService.java:175)
		at org.springframework.data.mongodb.core.convert.MappingMongoConverter.doConvert(MappingMongoConverter.java:1547)
		at org.springframework.data.mongodb.core.convert.MappingMongoConverter.doConvert(MappingMongoConverter.java:1540)
		at org.springframework.data.mongodb.core.convert.MappingMongoConverter.getPotentiallyConvertedSimpleRead(MappingMongoConverter.java:1060)
		at org.springframework.data.mongodb.core.convert.MappingMongoConverter.getPotentiallyConvertedSimpleRead(MappingMongoConverter.java:1038)
		at org.springframework.data.mongodb.core.convert.MappingMongoConverter$ConversionContext.convert(MappingMongoConverter.java:1919)
		at org.springframework.data.mongodb.core.convert.MappingMongoConverter$MongoDbPropertyValueProvider.getPropertyValue(MappingMongoConverter.java:1641)
		at org.springframework.data.mongodb.core.convert.MappingMongoConverter.readProperties(MappingMongoConverter.java:481)
		at org.springframework.data.mongodb.core.convert.MappingMongoConverter.populateProperties(MappingMongoConverter.java:394)
		at org.springframework.data.mongodb.core.convert.MappingMongoConverter.read(MappingMongoConverter.java:372)
		at org.springframework.data.mongodb.core.convert.MappingMongoConverter.readDocument(MappingMongoConverter.java:342)
		at org.springframework.data.mongodb.core.convert.MappingMongoConverter.read(MappingMongoConverter.java:278)
		at org.springframework.data.mongodb.core.convert.MappingMongoConverter.read(MappingMongoConverter.java:274)
		at org.springframework.data.mongodb.core.convert.MappingMongoConverter.read(MappingMongoConverter.java:102)
		at org.springframework.data.mongodb.core.ReactiveMongoTemplate$ReadDocumentCallback.doWith(ReactiveMongoTemplate.java:3155)
		at reactor.core.publisher.FluxConcatMap$ConcatMapImmediate.drain(FluxConcatMap.java:374)
		at reactor.core.publisher.FluxConcatMap$ConcatMapImmediate.onNext(FluxConcatMap.java:250)
		at reactor.core.publisher.FluxCreate$BufferAsyncSink.drain(FluxCreate.java:793)
		at reactor.core.publisher.FluxCreate$BufferAsyncSink.next(FluxCreate.java:718)
		at reactor.core.publisher.FluxCreate$SerializedFluxSink.next(FluxCreate.java:154)
		at java.util.ArrayList.forEach(ArrayList.java:1259)
		at com.mongodb.reactivestreams.client.internal.BatchCursorFlux.lambda$recurseCursor$4(BatchCursorFlux.java:94)
		at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.onNext(MonoPeekTerminal.java:171)
		at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.onNext(MonoPeekTerminal.java:180)
		at reactor.core.publisher.FluxPeekFuseable$PeekConditionalSubscriber.onNext(FluxPeekFuseable.java:854)
		at reactor.core.publisher.MonoCreate$DefaultMonoSink.success(MonoCreate.java:160)
		at com.mongodb.reactivestreams.client.internal.MongoOperationPublisher.lambda$sinkToCallback$30(MongoOperationPublisher.java:550)
		at com.mongodb.internal.operation.AsyncQueryBatchCursor.next(AsyncQueryBatchCursor.java:207)
		at com.mongodb.internal.operation.AsyncQueryBatchCursor.next(AsyncQueryBatchCursor.java:146)
		at com.mongodb.reactivestreams.client.internal.BatchCursor.lambda$next$0(BatchCursor.java:35)
		at reactor.core.publisher.MonoCreate.subscribe(MonoCreate.java:57)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4150)
		at reactor.core.publisher.Mono.subscribeWith(Mono.java:4265)
		at reactor.core.publisher.Mono.subscribe(Mono.java:3982)
		at com.mongodb.reactivestreams.client.internal.BatchCursorFlux.recurseCursor(BatchCursorFlux.java:104)
		at com.mongodb.reactivestreams.client.internal.BatchCursorFlux.lambda$subscribe$0(BatchCursorFlux.java:56)
		at reactor.core.publisher.LambdaMonoSubscriber.onNext(LambdaMonoSubscriber.java:171)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onNext(FluxMapFuseable.java:127)
		at reactor.core.publisher.Operators$MonoSubscriber.complete(Operators.java:1815)
		at reactor.core.publisher.MonoFlatMap$FlatMapInner.onNext(MonoFlatMap.java:249)
		at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.onNext(MonoPeekTerminal.java:180)
		at reactor.core.publisher.MonoCreate$DefaultMonoSink.success(MonoCreate.java:160)
		at com.mongodb.reactivestreams.client.internal.MongoOperationPublisher.lambda$sinkToCallback$30(MongoOperationPublisher.java:550)
		at com.mongodb.reactivestreams.client.internal.OperationExecutorImpl.lambda$execute$2(OperationExecutorImpl.java:73)
		at com.mongodb.internal.async.ErrorHandlingResultCallback.onResult(ErrorHandlingResultCallback.java:48)
		at com.mongodb.internal.operation.FindOperation$3.onResult(FindOperation.java:755)
		at com.mongodb.internal.operation.OperationHelper$ReferenceCountedReleasingWrappedCallback.onResult(OperationHelper.java:532)
		at com.mongodb.internal.operation.CommandOperationHelper$10.onResult(CommandOperationHelper.java:483)
		at com.mongodb.internal.async.ErrorHandlingResultCallback.onResult(ErrorHandlingResultCallback.java:48)
		at com.mongodb.internal.connection.DefaultServer$DefaultServerProtocolExecutor$2.onResult(DefaultServer.java:286)
		at com.mongodb.internal.async.ErrorHandlingResultCallback.onResult(ErrorHandlingResultCallback.java:48)
		at com.mongodb.internal.connection.CommandProtocolImpl$1.onResult(CommandProtocolImpl.java:84)
		at com.mongodb.internal.connection.DefaultConnectionPool$PooledConnection$2.onResult(DefaultConnectionPool.java:530)
		at com.mongodb.internal.connection.UsageTrackingInternalConnection$2.onResult(UsageTrackingInternalConnection.java:142)
		at com.mongodb.internal.async.ErrorHandlingResultCallback.onResult(ErrorHandlingResultCallback.java:48)
		at com.mongodb.internal.connection.InternalStreamConnection$2$1.onResult(InternalStreamConnection.java:462)
		at com.mongodb.internal.connection.InternalStreamConnection$2$1.onResult(InternalStreamConnection.java:439)
		at com.mongodb.internal.connection.InternalStreamConnection$MessageHeaderCallback$MessageCallback.onResult(InternalStreamConnection.java:744)
		at com.mongodb.internal.connection.InternalStreamConnection$MessageHeaderCallback$MessageCallback.onResult(InternalStreamConnection.java:711)
		at com.mongodb.internal.connection.InternalStreamConnection$5.completed(InternalStreamConnection.java:581)
		at com.mongodb.internal.connection.InternalStreamConnection$5.completed(InternalStreamConnection.java:578)
		at com.mongodb.connection.netty.NettyStream.readAsync(NettyStream.java:322)
		at com.mongodb.connection.netty.NettyStream.readAsync(NettyStream.java:269)
		at com.mongodb.internal.connection.InternalStreamConnection.readAsync(InternalStreamConnection.java:578)
		at com.mongodb.internal.connection.InternalStreamConnection.access$1100(InternalStreamConnection.java:78)
		at com.mongodb.internal.connection.InternalStreamConnection$MessageHeaderCallback.onResult(InternalStreamConnection.java:701)
		at com.mongodb.internal.connection.InternalStreamConnection$MessageHeaderCallback.onResult(InternalStreamConnection.java:686)
		at com.mongodb.internal.connection.InternalStreamConnection$5.completed(InternalStreamConnection.java:581)
		at com.mongodb.internal.connection.InternalStreamConnection$5.completed(InternalStreamConnection.java:578)
		at com.mongodb.connection.netty.NettyStream.readAsync(NettyStream.java:322)
		at com.mongodb.connection.netty.NettyStream.handleReadResponse(NettyStream.java:350)
		at com.mongodb.connection.netty.NettyStream.access$1200(NettyStream.java:104)
		at com.mongodb.connection.netty.NettyStream$InboundBufferHandler.channelRead0(NettyStream.java:409)
		at com.mongodb.connection.netty.NettyStream$InboundBufferHandler.channelRead0(NettyStream.java:406)
		at io.netty.channel.SimpleChannelInboundHandler.channelRead(SimpleChannelInboundHandler.java:99)
		at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:379)
		at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:365)
		at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:357)
		at io.netty.channel.DefaultChannelPipeline$HeadContext.channelRead(DefaultChannelPipeline.java:1410)
		at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:379)
		at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:365)
		at io.netty.channel.DefaultChannelPipeline.fireChannelRead(DefaultChannelPipeline.java:919)
		at io.netty.channel.nio.AbstractNioByteChannel$NioByteUnsafe.read(AbstractNioByteChannel.java:166)
		at io.netty.channel.nio.NioEventLoop.processSelectedKey(NioEventLoop.java:719)
		at io.netty.channel.nio.NioEventLoop.processSelectedKeysOptimized(NioEventLoop.java:655)
		at io.netty.channel.nio.NioEventLoop.processSelectedKeys(NioEventLoop.java:581)
		at io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:493)
		at io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:989)
		at io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)
		at io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)
		at java.lang.Thread.run(Thread.java:748)
Caused by: java.lang.IllegalArgumentException: Could not convert number [9.89898968968E11] of type [java.lang.Double] to target class [java.lang.Integer]: overflow
	at org.springframework.util.NumberUtils.raiseOverflowException(NumberUtils.java:175)
	at org.springframework.util.NumberUtils.convertNumberToTargetClass(NumberUtils.java:108)
	at org.springframework.core.convert.support.NumberToNumberConverterFactory$NumberToNumber.convert(NumberToNumberConverterFactory.java:66)
	at org.springframework.core.convert.support.NumberToNumberConverterFactory$NumberToNumber.convert(NumberToNumberConverterFactory.java:56)
	at org.springframework.core.convert.support.GenericConversionService$ConverterFactoryAdapter.convert(GenericConversionService.java:437)
	at org.springframework.core.convert.support.ConversionUtils.invokeConverter(ConversionUtils.java:41)
	at org.springframework.core.convert.support.GenericConversionService.convert(GenericConversionService.java:192)
	at org.springframework.core.convert.support.GenericConversionService.convert(GenericConversionService.java:175)
	at org.springframework.data.mongodb.core.convert.MappingMongoConverter.doConvert(MappingMongoConverter.java:1547)
	at org.springframework.data.mongodb.core.convert.MappingMongoConverter.doConvert(MappingMongoConverter.java:1540)
	at org.springframework.data.mongodb.core.convert.MappingMongoConverter.getPotentiallyConvertedSimpleRead(MappingMongoConverter.java:1060)
	at org.springframework.data.mongodb.core.convert.MappingMongoConverter.getPotentiallyConvertedSimpleRead(MappingMongoConverter.java:1038)
	at org.springframework.data.mongodb.core.convert.MappingMongoConverter$ConversionContext.convert(MappingMongoConverter.java:1919)
	at org.springframework.data.mongodb.core.convert.MappingMongoConverter$MongoDbPropertyValueProvider.getPropertyValue(MappingMongoConverter.java:1641)
	at org.springframework.data.mongodb.core.convert.MappingMongoConverter.readProperties(MappingMongoConverter.java:481)
	at org.springframework.data.mongodb.core.convert.MappingMongoConverter.populateProperties(MappingMongoConverter.java:394)
	at org.springframework.data.mongodb.core.convert.MappingMongoConverter.read(MappingMongoConverter.java:372)
	at org.springframework.data.mongodb.core.convert.MappingMongoConverter.readDocument(MappingMongoConverter.java:342)
	at org.springframework.data.mongodb.core.convert.MappingMongoConverter.read(MappingMongoConverter.java:278)
	at org.springframework.data.mongodb.core.convert.MappingMongoConverter.read(MappingMongoConverter.java:274)
	at org.springframework.data.mongodb.core.convert.MappingMongoConverter.read(MappingMongoConverter.java:102)
	at org.springframework.data.mongodb.core.ReactiveMongoTemplate$ReadDocumentCallback.doWith(ReactiveMongoTemplate.java:3155)
	at reactor.core.publisher.FluxConcatMap$ConcatMapImmediate.drain(FluxConcatMap.java:374)
	at reactor.core.publisher.FluxConcatMap$ConcatMapImmediate.onNext(FluxConcatMap.java:250)
	at reactor.core.publisher.FluxCreate$BufferAsyncSink.drain(FluxCreate.java:793)
	at reactor.core.publisher.FluxCreate$BufferAsyncSink.next(FluxCreate.java:718)
	at reactor.core.publisher.FluxCreate$SerializedFluxSink.next(FluxCreate.java:154)
	at java.util.ArrayList.forEach(ArrayList.java:1259)
	at com.mongodb.reactivestreams.client.internal.BatchCursorFlux.lambda$recurseCursor$4(BatchCursorFlux.java:94)
	at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.onNext(MonoPeekTerminal.java:171)
	at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.onNext(MonoPeekTerminal.java:180)
	at reactor.core.publisher.FluxPeekFuseable$PeekConditionalSubscriber.onNext(FluxPeekFuseable.java:854)
	at reactor.core.publisher.MonoCreate$DefaultMonoSink.success(MonoCreate.java:160)
	at com.mongodb.reactivestreams.client.internal.MongoOperationPublisher.lambda$sinkToCallback$30(MongoOperationPublisher.java:550)
	at com.mongodb.internal.operation.AsyncQueryBatchCursor.next(AsyncQueryBatchCursor.java:207)
	at com.mongodb.internal.operation.AsyncQueryBatchCursor.next(AsyncQueryBatchCursor.java:146)
	at com.mongodb.reactivestreams.client.internal.BatchCursor.lambda$next$0(BatchCursor.java:35)
	at reactor.core.publisher.MonoCreate.subscribe(MonoCreate.java:57)
	at reactor.core.publisher.Mono.subscribe(Mono.java:4150)
	at reactor.core.publisher.Mono.subscribeWith(Mono.java:4265)
	at reactor.core.publisher.Mono.subscribe(Mono.java:3982)
	at com.mongodb.reactivestreams.client.internal.BatchCursorFlux.recurseCursor(BatchCursorFlux.java:104)
	at com.mongodb.reactivestreams.client.internal.BatchCursorFlux.lambda$subscribe$0(BatchCursorFlux.java:56)
	at reactor.core.publisher.LambdaMonoSubscriber.onNext(LambdaMonoSubscriber.java:171)
	at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onNext(FluxMapFuseable.java:127)
	at reactor.core.publisher.Operators$MonoSubscriber.complete(Operators.java:1815)
	at reactor.core.publisher.MonoFlatMap$FlatMapInner.onNext(MonoFlatMap.java:249)
	at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.onNext(MonoPeekTerminal.java:180)
	at reactor.core.publisher.MonoCreate$DefaultMonoSink.success(MonoCreate.java:160)
	at com.mongodb.reactivestreams.client.internal.MongoOperationPublisher.lambda$sinkToCallback$30(MongoOperationPublisher.java:550)
	at com.mongodb.reactivestreams.client.internal.OperationExecutorImpl.lambda$execute$2(OperationExecutorImpl.java:73)
	at com.mongodb.internal.async.ErrorHandlingResultCallback.onResult(ErrorHandlingResultCallback.java:48)
	at com.mongodb.internal.operation.FindOperation$3.onResult(FindOperation.java:755)
	at com.mongodb.internal.operation.OperationHelper$ReferenceCountedReleasingWrappedCallback.onResult(OperationHelper.java:532)
	at com.mongodb.internal.operation.CommandOperationHelper$10.onResult(CommandOperationHelper.java:483)
	at com.mongodb.internal.async.ErrorHandlingResultCallback.onResult(ErrorHandlingResultCallback.java:48)
	at com.mongodb.internal.connection.DefaultServer$DefaultServerProtocolExecutor$2.onResult(DefaultServer.java:286)
	at com.mongodb.internal.async.ErrorHandlingResultCallback.onResult(ErrorHandlingResultCallback.java:48)
	at com.mongodb.internal.connection.CommandProtocolImpl$1.onResult(CommandProtocolImpl.java:84)
	at com.mongodb.internal.connection.DefaultConnectionPool$PooledConnection$2.onResult(DefaultConnectionPool.java:530)
	at com.mongodb.internal.connection.UsageTrackingInternalConnection$2.onResult(UsageTrackingInternalConnection.java:142)
	at com.mongodb.internal.async.ErrorHandlingResultCallback.onResult(ErrorHandlingResultCallback.java:48)
	at com.mongodb.internal.connection.InternalStreamConnection$2$1.onResult(InternalStreamConnection.java:462)
	at com.mongodb.internal.connection.InternalStreamConnection$2$1.onResult(InternalStreamConnection.java:439)
	at com.mongodb.internal.connection.InternalStreamConnection$MessageHeaderCallback$MessageCallback.onResult(InternalStreamConnection.java:744)
	at com.mongodb.internal.connection.InternalStreamConnection$MessageHeaderCallback$MessageCallback.onResult(InternalStreamConnection.java:711)
	at com.mongodb.internal.connection.InternalStreamConnection$5.completed(InternalStreamConnection.java:581)
	at com.mongodb.internal.connection.InternalStreamConnection$5.completed(InternalStreamConnection.java:578)
	at com.mongodb.connection.netty.NettyStream.readAsync(NettyStream.java:322)
	at com.mongodb.connection.netty.NettyStream.readAsync(NettyStream.java:269)
	at com.mongodb.internal.connection.InternalStreamConnection.readAsync(InternalStreamConnection.java:578)
	at com.mongodb.internal.connection.InternalStreamConnection.access$1100(InternalStreamConnection.java:78)
	at com.mongodb.internal.connection.InternalStreamConnection$MessageHeaderCallback.onResult(InternalStreamConnection.java:701)
	at com.mongodb.internal.connection.InternalStreamConnection$MessageHeaderCallback.onResult(InternalStreamConnection.java:686)
	at com.mongodb.internal.connection.InternalStreamConnection$5.completed(InternalStreamConnection.java:581)
	at com.mongodb.internal.connection.InternalStreamConnection$5.completed(InternalStreamConnection.java:578)
	at com.mongodb.connection.netty.NettyStream.readAsync(NettyStream.java:322)
	at com.mongodb.connection.netty.NettyStream.handleReadResponse(NettyStream.java:350)
	at com.mongodb.connection.netty.NettyStream.access$1200(NettyStream.java:104)
	at com.mongodb.connection.netty.NettyStream$InboundBufferHandler.channelRead0(NettyStream.java:409)
	at com.mongodb.connection.netty.NettyStream$InboundBufferHandler.channelRead0(NettyStream.java:406)
	at io.netty.channel.SimpleChannelInboundHandler.channelRead(SimpleChannelInboundHandler.java:99)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:379)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:365)
	at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:357)
	at io.netty.channel.DefaultChannelPipeline$HeadContext.channelRead(DefaultChannelPipeline.java:1410)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:379)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:365)
	at io.netty.channel.DefaultChannelPipeline.fireChannelRead(DefaultChannelPipeline.java:919)
	at io.netty.channel.nio.AbstractNioByteChannel$NioByteUnsafe.read(AbstractNioByteChannel.java:166)
	at io.netty.channel.nio.NioEventLoop.processSelectedKey(NioEventLoop.java:719)
	at io.netty.channel.nio.NioEventLoop.processSelectedKeysOptimized(NioEventLoop.java:655)
	at io.netty.channel.nio.NioEventLoop.processSelectedKeys(NioEventLoop.java:581)
	at io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:493)
	at io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:989)
	at io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)
	at io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)
	at java.lang.Thread.run(Thread.java:748)
2021-07-19 19:08:47,281 DEBUG [nioEventLoopGroup-3-3] org.springframework.core.log.CompositeLog : [9133031f-4, L:/0:0:0:0:0:0:0:1:8090 - R:/0:0:0:0:0:0:0:1:54137] Encoding [{timestamp=Mon Jul 19 19:08:47 COT 2021, path=/customer/, status=500, error=Internal Server Error, r (truncated)...]
2021-07-19 19:08:47,284 DEBUG [reactor-http-nio-3] org.springframework.core.log.LogFormatUtils : [9133031f-4, L:/0:0:0:0:0:0:0:1:8090 - R:/0:0:0:0:0:0:0:1:54137] Completed 500 INTERNAL_SERVER_ERROR
2021-07-19 19:08:48,044 DEBUG [reactor-http-nio-3] org.springframework.core.log.LogFormatUtils : [9133031f-5, L:/0:0:0:0:0:0:0:1:8090 - R:/0:0:0:0:0:0:0:1:54137] HTTP GET "/customer/"
2021-07-19 19:08:48,045 DEBUG [reactor-http-nio-3] org.springframework.web.reactive.handler.AbstractHandlerMapping : [9133031f-5, L:/0:0:0:0:0:0:0:1:8090 - R:/0:0:0:0:0:0:0:1:54137] Mapped to com.bank.manage.customer.controller.CustomerController#getAllCustomers()
2021-07-19 19:08:48,045 INFO [reactor-http-nio-3] com.bank.manage.customer.controller.CustomerController :  EndPoit get by all customers {} 
2021-07-19 19:08:48,046 DEBUG [reactor-http-nio-3] org.springframework.web.reactive.result.HandlerResultHandlerSupport : [9133031f-5, L:/0:0:0:0:0:0:0:1:8090 - R:/0:0:0:0:0:0:0:1:54137] Found 'Content-Type:application/json' in response
2021-07-19 19:08:48,046 DEBUG [reactor-http-nio-3] org.springframework.web.reactive.result.method.annotation.AbstractMessageWriterResultHandler : [9133031f-5, L:/0:0:0:0:0:0:0:1:8090 - R:/0:0:0:0:0:0:0:1:54137] 0..N [com.bank.manage.customer.persistence.entity.Customer]
2021-07-19 19:08:48,051 DEBUG [nioEventLoopGroup-3-3] org.springframework.core.log.CompositeLog : [9133031f-5, L:/0:0:0:0:0:0:0:1:8090 - R:/0:0:0:0:0:0:0:1:54137] Resolved [ConversionFailedException: Failed to convert from type [java.lang.Double] to type [java.lang.Integer] for value '9.89898968968E11'; nested exception is java.lang.IllegalArgumentException: Could not convert number [9.89898968968E11] of type [java.lang.Double] to target class [java.lang.Integer]: overflow] for HTTP GET /customer/
2021-07-19 19:08:48,052 ERROR [nioEventLoopGroup-3-3] org.springframework.core.log.CompositeLog : [9133031f-5, L:/0:0:0:0:0:0:0:1:8090 - R:/0:0:0:0:0:0:0:1:54137]  500 Server Error for HTTP GET "/customer/"
org.springframework.core.convert.ConversionFailedException: Failed to convert from type [java.lang.Double] to type [java.lang.Integer] for value '9.89898968968E11'; nested exception is java.lang.IllegalArgumentException: Could not convert number [9.89898968968E11] of type [java.lang.Double] to target class [java.lang.Integer]: overflow
	at org.springframework.core.convert.support.ConversionUtils.invokeConverter(ConversionUtils.java:47)
	Suppressed: reactor.core.publisher.FluxOnAssembly$OnAssemblyException: 
Error has been observed at the following site(s):
	|_ checkpoint ⇢ Handler com.bank.manage.customer.controller.CustomerController#getAllCustomers() [DispatcherHandler]
	|_ checkpoint ⇢ org.springframework.boot.actuate.metrics.web.reactive.server.MetricsWebFilter [DefaultWebFilterChain]
	|_ checkpoint ⇢ HTTP GET "/customer/" [ExceptionHandlingWebHandler]
Stack trace:
		at org.springframework.core.convert.support.ConversionUtils.invokeConverter(ConversionUtils.java:47)
		at org.springframework.core.convert.support.GenericConversionService.convert(GenericConversionService.java:192)
		at org.springframework.core.convert.support.GenericConversionService.convert(GenericConversionService.java:175)
		at org.springframework.data.mongodb.core.convert.MappingMongoConverter.doConvert(MappingMongoConverter.java:1547)
		at org.springframework.data.mongodb.core.convert.MappingMongoConverter.doConvert(MappingMongoConverter.java:1540)
		at org.springframework.data.mongodb.core.convert.MappingMongoConverter.getPotentiallyConvertedSimpleRead(MappingMongoConverter.java:1060)
		at org.springframework.data.mongodb.core.convert.MappingMongoConverter.getPotentiallyConvertedSimpleRead(MappingMongoConverter.java:1038)
		at org.springframework.data.mongodb.core.convert.MappingMongoConverter$ConversionContext.convert(MappingMongoConverter.java:1919)
		at org.springframework.data.mongodb.core.convert.MappingMongoConverter$MongoDbPropertyValueProvider.getPropertyValue(MappingMongoConverter.java:1641)
		at org.springframework.data.mongodb.core.convert.MappingMongoConverter.readProperties(MappingMongoConverter.java:481)
		at org.springframework.data.mongodb.core.convert.MappingMongoConverter.populateProperties(MappingMongoConverter.java:394)
		at org.springframework.data.mongodb.core.convert.MappingMongoConverter.read(MappingMongoConverter.java:372)
		at org.springframework.data.mongodb.core.convert.MappingMongoConverter.readDocument(MappingMongoConverter.java:342)
		at org.springframework.data.mongodb.core.convert.MappingMongoConverter.read(MappingMongoConverter.java:278)
		at org.springframework.data.mongodb.core.convert.MappingMongoConverter.read(MappingMongoConverter.java:274)
		at org.springframework.data.mongodb.core.convert.MappingMongoConverter.read(MappingMongoConverter.java:102)
		at org.springframework.data.mongodb.core.ReactiveMongoTemplate$ReadDocumentCallback.doWith(ReactiveMongoTemplate.java:3155)
		at reactor.core.publisher.FluxConcatMap$ConcatMapImmediate.drain(FluxConcatMap.java:374)
		at reactor.core.publisher.FluxConcatMap$ConcatMapImmediate.onNext(FluxConcatMap.java:250)
		at reactor.core.publisher.FluxCreate$BufferAsyncSink.drain(FluxCreate.java:793)
		at reactor.core.publisher.FluxCreate$BufferAsyncSink.next(FluxCreate.java:718)
		at reactor.core.publisher.FluxCreate$SerializedFluxSink.next(FluxCreate.java:154)
		at java.util.ArrayList.forEach(ArrayList.java:1259)
		at com.mongodb.reactivestreams.client.internal.BatchCursorFlux.lambda$recurseCursor$4(BatchCursorFlux.java:94)
		at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.onNext(MonoPeekTerminal.java:171)
		at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.onNext(MonoPeekTerminal.java:180)
		at reactor.core.publisher.FluxPeekFuseable$PeekConditionalSubscriber.onNext(FluxPeekFuseable.java:854)
		at reactor.core.publisher.MonoCreate$DefaultMonoSink.success(MonoCreate.java:160)
		at com.mongodb.reactivestreams.client.internal.MongoOperationPublisher.lambda$sinkToCallback$30(MongoOperationPublisher.java:550)
		at com.mongodb.internal.operation.AsyncQueryBatchCursor.next(AsyncQueryBatchCursor.java:207)
		at com.mongodb.internal.operation.AsyncQueryBatchCursor.next(AsyncQueryBatchCursor.java:146)
		at com.mongodb.reactivestreams.client.internal.BatchCursor.lambda$next$0(BatchCursor.java:35)
		at reactor.core.publisher.MonoCreate.subscribe(MonoCreate.java:57)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4150)
		at reactor.core.publisher.Mono.subscribeWith(Mono.java:4265)
		at reactor.core.publisher.Mono.subscribe(Mono.java:3982)
		at com.mongodb.reactivestreams.client.internal.BatchCursorFlux.recurseCursor(BatchCursorFlux.java:104)
		at com.mongodb.reactivestreams.client.internal.BatchCursorFlux.lambda$subscribe$0(BatchCursorFlux.java:56)
		at reactor.core.publisher.LambdaMonoSubscriber.onNext(LambdaMonoSubscriber.java:171)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onNext(FluxMapFuseable.java:127)
		at reactor.core.publisher.Operators$MonoSubscriber.complete(Operators.java:1815)
		at reactor.core.publisher.MonoFlatMap$FlatMapInner.onNext(MonoFlatMap.java:249)
		at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.onNext(MonoPeekTerminal.java:180)
		at reactor.core.publisher.MonoCreate$DefaultMonoSink.success(MonoCreate.java:160)
		at com.mongodb.reactivestreams.client.internal.MongoOperationPublisher.lambda$sinkToCallback$30(MongoOperationPublisher.java:550)
		at com.mongodb.reactivestreams.client.internal.OperationExecutorImpl.lambda$execute$2(OperationExecutorImpl.java:73)
		at com.mongodb.internal.async.ErrorHandlingResultCallback.onResult(ErrorHandlingResultCallback.java:48)
		at com.mongodb.internal.operation.FindOperation$3.onResult(FindOperation.java:755)
		at com.mongodb.internal.operation.OperationHelper$ReferenceCountedReleasingWrappedCallback.onResult(OperationHelper.java:532)
		at com.mongodb.internal.operation.CommandOperationHelper$10.onResult(CommandOperationHelper.java:483)
		at com.mongodb.internal.async.ErrorHandlingResultCallback.onResult(ErrorHandlingResultCallback.java:48)
		at com.mongodb.internal.connection.DefaultServer$DefaultServerProtocolExecutor$2.onResult(DefaultServer.java:286)
		at com.mongodb.internal.async.ErrorHandlingResultCallback.onResult(ErrorHandlingResultCallback.java:48)
		at com.mongodb.internal.connection.CommandProtocolImpl$1.onResult(CommandProtocolImpl.java:84)
		at com.mongodb.internal.connection.DefaultConnectionPool$PooledConnection$2.onResult(DefaultConnectionPool.java:530)
		at com.mongodb.internal.connection.UsageTrackingInternalConnection$2.onResult(UsageTrackingInternalConnection.java:142)
		at com.mongodb.internal.async.ErrorHandlingResultCallback.onResult(ErrorHandlingResultCallback.java:48)
		at com.mongodb.internal.connection.InternalStreamConnection$2$1.onResult(InternalStreamConnection.java:462)
		at com.mongodb.internal.connection.InternalStreamConnection$2$1.onResult(InternalStreamConnection.java:439)
		at com.mongodb.internal.connection.InternalStreamConnection$MessageHeaderCallback$MessageCallback.onResult(InternalStreamConnection.java:744)
		at com.mongodb.internal.connection.InternalStreamConnection$MessageHeaderCallback$MessageCallback.onResult(InternalStreamConnection.java:711)
		at com.mongodb.internal.connection.InternalStreamConnection$5.completed(InternalStreamConnection.java:581)
		at com.mongodb.internal.connection.InternalStreamConnection$5.completed(InternalStreamConnection.java:578)
		at com.mongodb.connection.netty.NettyStream.readAsync(NettyStream.java:322)
		at com.mongodb.connection.netty.NettyStream.readAsync(NettyStream.java:269)
		at com.mongodb.internal.connection.InternalStreamConnection.readAsync(InternalStreamConnection.java:578)
		at com.mongodb.internal.connection.InternalStreamConnection.access$1100(InternalStreamConnection.java:78)
		at com.mongodb.internal.connection.InternalStreamConnection$MessageHeaderCallback.onResult(InternalStreamConnection.java:701)
		at com.mongodb.internal.connection.InternalStreamConnection$MessageHeaderCallback.onResult(InternalStreamConnection.java:686)
		at com.mongodb.internal.connection.InternalStreamConnection$5.completed(InternalStreamConnection.java:581)
		at com.mongodb.internal.connection.InternalStreamConnection$5.completed(InternalStreamConnection.java:578)
		at com.mongodb.connection.netty.NettyStream.readAsync(NettyStream.java:322)
		at com.mongodb.connection.netty.NettyStream.handleReadResponse(NettyStream.java:350)
		at com.mongodb.connection.netty.NettyStream.access$1200(NettyStream.java:104)
		at com.mongodb.connection.netty.NettyStream$InboundBufferHandler.channelRead0(NettyStream.java:409)
		at com.mongodb.connection.netty.NettyStream$InboundBufferHandler.channelRead0(NettyStream.java:406)
		at io.netty.channel.SimpleChannelInboundHandler.channelRead(SimpleChannelInboundHandler.java:99)
		at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:379)
		at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:365)
		at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:357)
		at io.netty.channel.DefaultChannelPipeline$HeadContext.channelRead(DefaultChannelPipeline.java:1410)
		at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:379)
		at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:365)
		at io.netty.channel.DefaultChannelPipeline.fireChannelRead(DefaultChannelPipeline.java:919)
		at io.netty.channel.nio.AbstractNioByteChannel$NioByteUnsafe.read(AbstractNioByteChannel.java:166)
		at io.netty.channel.nio.NioEventLoop.processSelectedKey(NioEventLoop.java:719)
		at io.netty.channel.nio.NioEventLoop.processSelectedKeysOptimized(NioEventLoop.java:655)
		at io.netty.channel.nio.NioEventLoop.processSelectedKeys(NioEventLoop.java:581)
		at io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:493)
		at io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:989)
		at io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)
		at io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)
		at java.lang.Thread.run(Thread.java:748)
Caused by: java.lang.IllegalArgumentException: Could not convert number [9.89898968968E11] of type [java.lang.Double] to target class [java.lang.Integer]: overflow
	at org.springframework.util.NumberUtils.raiseOverflowException(NumberUtils.java:175)
	at org.springframework.util.NumberUtils.convertNumberToTargetClass(NumberUtils.java:108)
	at org.springframework.core.convert.support.NumberToNumberConverterFactory$NumberToNumber.convert(NumberToNumberConverterFactory.java:66)
	at org.springframework.core.convert.support.NumberToNumberConverterFactory$NumberToNumber.convert(NumberToNumberConverterFactory.java:56)
	at org.springframework.core.convert.support.GenericConversionService$ConverterFactoryAdapter.convert(GenericConversionService.java:437)
	at org.springframework.core.convert.support.ConversionUtils.invokeConverter(ConversionUtils.java:41)
	at org.springframework.core.convert.support.GenericConversionService.convert(GenericConversionService.java:192)
	at org.springframework.core.convert.support.GenericConversionService.convert(GenericConversionService.java:175)
	at org.springframework.data.mongodb.core.convert.MappingMongoConverter.doConvert(MappingMongoConverter.java:1547)
	at org.springframework.data.mongodb.core.convert.MappingMongoConverter.doConvert(MappingMongoConverter.java:1540)
	at org.springframework.data.mongodb.core.convert.MappingMongoConverter.getPotentiallyConvertedSimpleRead(MappingMongoConverter.java:1060)
	at org.springframework.data.mongodb.core.convert.MappingMongoConverter.getPotentiallyConvertedSimpleRead(MappingMongoConverter.java:1038)
	at org.springframework.data.mongodb.core.convert.MappingMongoConverter$ConversionContext.convert(MappingMongoConverter.java:1919)
	at org.springframework.data.mongodb.core.convert.MappingMongoConverter$MongoDbPropertyValueProvider.getPropertyValue(MappingMongoConverter.java:1641)
	at org.springframework.data.mongodb.core.convert.MappingMongoConverter.readProperties(MappingMongoConverter.java:481)
	at org.springframework.data.mongodb.core.convert.MappingMongoConverter.populateProperties(MappingMongoConverter.java:394)
	at org.springframework.data.mongodb.core.convert.MappingMongoConverter.read(MappingMongoConverter.java:372)
	at org.springframework.data.mongodb.core.convert.MappingMongoConverter.readDocument(MappingMongoConverter.java:342)
	at org.springframework.data.mongodb.core.convert.MappingMongoConverter.read(MappingMongoConverter.java:278)
	at org.springframework.data.mongodb.core.convert.MappingMongoConverter.read(MappingMongoConverter.java:274)
	at org.springframework.data.mongodb.core.convert.MappingMongoConverter.read(MappingMongoConverter.java:102)
	at org.springframework.data.mongodb.core.ReactiveMongoTemplate$ReadDocumentCallback.doWith(ReactiveMongoTemplate.java:3155)
	at reactor.core.publisher.FluxConcatMap$ConcatMapImmediate.drain(FluxConcatMap.java:374)
	at reactor.core.publisher.FluxConcatMap$ConcatMapImmediate.onNext(FluxConcatMap.java:250)
	at reactor.core.publisher.FluxCreate$BufferAsyncSink.drain(FluxCreate.java:793)
	at reactor.core.publisher.FluxCreate$BufferAsyncSink.next(FluxCreate.java:718)
	at reactor.core.publisher.FluxCreate$SerializedFluxSink.next(FluxCreate.java:154)
	at java.util.ArrayList.forEach(ArrayList.java:1259)
	at com.mongodb.reactivestreams.client.internal.BatchCursorFlux.lambda$recurseCursor$4(BatchCursorFlux.java:94)
	at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.onNext(MonoPeekTerminal.java:171)
	at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.onNext(MonoPeekTerminal.java:180)
	at reactor.core.publisher.FluxPeekFuseable$PeekConditionalSubscriber.onNext(FluxPeekFuseable.java:854)
	at reactor.core.publisher.MonoCreate$DefaultMonoSink.success(MonoCreate.java:160)
	at com.mongodb.reactivestreams.client.internal.MongoOperationPublisher.lambda$sinkToCallback$30(MongoOperationPublisher.java:550)
	at com.mongodb.internal.operation.AsyncQueryBatchCursor.next(AsyncQueryBatchCursor.java:207)
	at com.mongodb.internal.operation.AsyncQueryBatchCursor.next(AsyncQueryBatchCursor.java:146)
	at com.mongodb.reactivestreams.client.internal.BatchCursor.lambda$next$0(BatchCursor.java:35)
	at reactor.core.publisher.MonoCreate.subscribe(MonoCreate.java:57)
	at reactor.core.publisher.Mono.subscribe(Mono.java:4150)
	at reactor.core.publisher.Mono.subscribeWith(Mono.java:4265)
	at reactor.core.publisher.Mono.subscribe(Mono.java:3982)
	at com.mongodb.reactivestreams.client.internal.BatchCursorFlux.recurseCursor(BatchCursorFlux.java:104)
	at com.mongodb.reactivestreams.client.internal.BatchCursorFlux.lambda$subscribe$0(BatchCursorFlux.java:56)
	at reactor.core.publisher.LambdaMonoSubscriber.onNext(LambdaMonoSubscriber.java:171)
	at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onNext(FluxMapFuseable.java:127)
	at reactor.core.publisher.Operators$MonoSubscriber.complete(Operators.java:1815)
	at reactor.core.publisher.MonoFlatMap$FlatMapInner.onNext(MonoFlatMap.java:249)
	at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.onNext(MonoPeekTerminal.java:180)
	at reactor.core.publisher.MonoCreate$DefaultMonoSink.success(MonoCreate.java:160)
	at com.mongodb.reactivestreams.client.internal.MongoOperationPublisher.lambda$sinkToCallback$30(MongoOperationPublisher.java:550)
	at com.mongodb.reactivestreams.client.internal.OperationExecutorImpl.lambda$execute$2(OperationExecutorImpl.java:73)
	at com.mongodb.internal.async.ErrorHandlingResultCallback.onResult(ErrorHandlingResultCallback.java:48)
	at com.mongodb.internal.operation.FindOperation$3.onResult(FindOperation.java:755)
	at com.mongodb.internal.operation.OperationHelper$ReferenceCountedReleasingWrappedCallback.onResult(OperationHelper.java:532)
	at com.mongodb.internal.operation.CommandOperationHelper$10.onResult(CommandOperationHelper.java:483)
	at com.mongodb.internal.async.ErrorHandlingResultCallback.onResult(ErrorHandlingResultCallback.java:48)
	at com.mongodb.internal.connection.DefaultServer$DefaultServerProtocolExecutor$2.onResult(DefaultServer.java:286)
	at com.mongodb.internal.async.ErrorHandlingResultCallback.onResult(ErrorHandlingResultCallback.java:48)
	at com.mongodb.internal.connection.CommandProtocolImpl$1.onResult(CommandProtocolImpl.java:84)
	at com.mongodb.internal.connection.DefaultConnectionPool$PooledConnection$2.onResult(DefaultConnectionPool.java:530)
	at com.mongodb.internal.connection.UsageTrackingInternalConnection$2.onResult(UsageTrackingInternalConnection.java:142)
	at com.mongodb.internal.async.ErrorHandlingResultCallback.onResult(ErrorHandlingResultCallback.java:48)
	at com.mongodb.internal.connection.InternalStreamConnection$2$1.onResult(InternalStreamConnection.java:462)
	at com.mongodb.internal.connection.InternalStreamConnection$2$1.onResult(InternalStreamConnection.java:439)
	at com.mongodb.internal.connection.InternalStreamConnection$MessageHeaderCallback$MessageCallback.onResult(InternalStreamConnection.java:744)
	at com.mongodb.internal.connection.InternalStreamConnection$MessageHeaderCallback$MessageCallback.onResult(InternalStreamConnection.java:711)
	at com.mongodb.internal.connection.InternalStreamConnection$5.completed(InternalStreamConnection.java:581)
	at com.mongodb.internal.connection.InternalStreamConnection$5.completed(InternalStreamConnection.java:578)
	at com.mongodb.connection.netty.NettyStream.readAsync(NettyStream.java:322)
	at com.mongodb.connection.netty.NettyStream.readAsync(NettyStream.java:269)
	at com.mongodb.internal.connection.InternalStreamConnection.readAsync(InternalStreamConnection.java:578)
	at com.mongodb.internal.connection.InternalStreamConnection.access$1100(InternalStreamConnection.java:78)
	at com.mongodb.internal.connection.InternalStreamConnection$MessageHeaderCallback.onResult(InternalStreamConnection.java:701)
	at com.mongodb.internal.connection.InternalStreamConnection$MessageHeaderCallback.onResult(InternalStreamConnection.java:686)
	at com.mongodb.internal.connection.InternalStreamConnection$5.completed(InternalStreamConnection.java:581)
	at com.mongodb.internal.connection.InternalStreamConnection$5.completed(InternalStreamConnection.java:578)
	at com.mongodb.connection.netty.NettyStream.readAsync(NettyStream.java:322)
	at com.mongodb.connection.netty.NettyStream.handleReadResponse(NettyStream.java:350)
	at com.mongodb.connection.netty.NettyStream.access$1200(NettyStream.java:104)
	at com.mongodb.connection.netty.NettyStream$InboundBufferHandler.channelRead0(NettyStream.java:409)
	at com.mongodb.connection.netty.NettyStream$InboundBufferHandler.channelRead0(NettyStream.java:406)
	at io.netty.channel.SimpleChannelInboundHandler.channelRead(SimpleChannelInboundHandler.java:99)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:379)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:365)
	at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:357)
	at io.netty.channel.DefaultChannelPipeline$HeadContext.channelRead(DefaultChannelPipeline.java:1410)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:379)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:365)
	at io.netty.channel.DefaultChannelPipeline.fireChannelRead(DefaultChannelPipeline.java:919)
	at io.netty.channel.nio.AbstractNioByteChannel$NioByteUnsafe.read(AbstractNioByteChannel.java:166)
	at io.netty.channel.nio.NioEventLoop.processSelectedKey(NioEventLoop.java:719)
	at io.netty.channel.nio.NioEventLoop.processSelectedKeysOptimized(NioEventLoop.java:655)
	at io.netty.channel.nio.NioEventLoop.processSelectedKeys(NioEventLoop.java:581)
	at io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:493)
	at io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:989)
	at io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)
	at io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)
	at java.lang.Thread.run(Thread.java:748)
2021-07-19 19:08:48,053 DEBUG [nioEventLoopGroup-3-3] org.springframework.core.log.CompositeLog : [9133031f-5, L:/0:0:0:0:0:0:0:1:8090 - R:/0:0:0:0:0:0:0:1:54137] Encoding [{timestamp=Mon Jul 19 19:08:48 COT 2021, path=/customer/, status=500, error=Internal Server Error, r (truncated)...]
2021-07-19 19:08:48,055 DEBUG [reactor-http-nio-3] org.springframework.core.log.LogFormatUtils : [9133031f-5, L:/0:0:0:0:0:0:0:1:8090 - R:/0:0:0:0:0:0:0:1:54137] Completed 500 INTERNAL_SERVER_ERROR
2021-07-19 19:08:48,517 DEBUG [reactor-http-nio-3] org.springframework.core.log.LogFormatUtils : [9133031f-6, L:/0:0:0:0:0:0:0:1:8090 - R:/0:0:0:0:0:0:0:1:54137] HTTP GET "/customer/"
2021-07-19 19:08:48,518 DEBUG [reactor-http-nio-3] org.springframework.web.reactive.handler.AbstractHandlerMapping : [9133031f-6, L:/0:0:0:0:0:0:0:1:8090 - R:/0:0:0:0:0:0:0:1:54137] Mapped to com.bank.manage.customer.controller.CustomerController#getAllCustomers()
2021-07-19 19:08:48,519 INFO [reactor-http-nio-3] com.bank.manage.customer.controller.CustomerController :  EndPoit get by all customers {} 
2021-07-19 19:08:48,519 DEBUG [reactor-http-nio-3] org.springframework.web.reactive.result.HandlerResultHandlerSupport : [9133031f-6, L:/0:0:0:0:0:0:0:1:8090 - R:/0:0:0:0:0:0:0:1:54137] Found 'Content-Type:application/json' in response
2021-07-19 19:08:48,519 DEBUG [reactor-http-nio-3] org.springframework.web.reactive.result.method.annotation.AbstractMessageWriterResultHandler : [9133031f-6, L:/0:0:0:0:0:0:0:1:8090 - R:/0:0:0:0:0:0:0:1:54137] 0..N [com.bank.manage.customer.persistence.entity.Customer]
2021-07-19 19:08:48,526 DEBUG [nioEventLoopGroup-3-3] org.springframework.core.log.CompositeLog : [9133031f-6, L:/0:0:0:0:0:0:0:1:8090 - R:/0:0:0:0:0:0:0:1:54137] Resolved [ConversionFailedException: Failed to convert from type [java.lang.Double] to type [java.lang.Integer] for value '9.89898968968E11'; nested exception is java.lang.IllegalArgumentException: Could not convert number [9.89898968968E11] of type [java.lang.Double] to target class [java.lang.Integer]: overflow] for HTTP GET /customer/
2021-07-19 19:08:48,527 ERROR [nioEventLoopGroup-3-3] org.springframework.core.log.CompositeLog : [9133031f-6, L:/0:0:0:0:0:0:0:1:8090 - R:/0:0:0:0:0:0:0:1:54137]  500 Server Error for HTTP GET "/customer/"
org.springframework.core.convert.ConversionFailedException: Failed to convert from type [java.lang.Double] to type [java.lang.Integer] for value '9.89898968968E11'; nested exception is java.lang.IllegalArgumentException: Could not convert number [9.89898968968E11] of type [java.lang.Double] to target class [java.lang.Integer]: overflow
	at org.springframework.core.convert.support.ConversionUtils.invokeConverter(ConversionUtils.java:47)
	Suppressed: reactor.core.publisher.FluxOnAssembly$OnAssemblyException: 
Error has been observed at the following site(s):
	|_ checkpoint ⇢ Handler com.bank.manage.customer.controller.CustomerController#getAllCustomers() [DispatcherHandler]
	|_ checkpoint ⇢ org.springframework.boot.actuate.metrics.web.reactive.server.MetricsWebFilter [DefaultWebFilterChain]
	|_ checkpoint ⇢ HTTP GET "/customer/" [ExceptionHandlingWebHandler]
Stack trace:
		at org.springframework.core.convert.support.ConversionUtils.invokeConverter(ConversionUtils.java:47)
		at org.springframework.core.convert.support.GenericConversionService.convert(GenericConversionService.java:192)
		at org.springframework.core.convert.support.GenericConversionService.convert(GenericConversionService.java:175)
		at org.springframework.data.mongodb.core.convert.MappingMongoConverter.doConvert(MappingMongoConverter.java:1547)
		at org.springframework.data.mongodb.core.convert.MappingMongoConverter.doConvert(MappingMongoConverter.java:1540)
		at org.springframework.data.mongodb.core.convert.MappingMongoConverter.getPotentiallyConvertedSimpleRead(MappingMongoConverter.java:1060)
		at org.springframework.data.mongodb.core.convert.MappingMongoConverter.getPotentiallyConvertedSimpleRead(MappingMongoConverter.java:1038)
		at org.springframework.data.mongodb.core.convert.MappingMongoConverter$ConversionContext.convert(MappingMongoConverter.java:1919)
		at org.springframework.data.mongodb.core.convert.MappingMongoConverter$MongoDbPropertyValueProvider.getPropertyValue(MappingMongoConverter.java:1641)
		at org.springframework.data.mongodb.core.convert.MappingMongoConverter.readProperties(MappingMongoConverter.java:481)
		at org.springframework.data.mongodb.core.convert.MappingMongoConverter.populateProperties(MappingMongoConverter.java:394)
		at org.springframework.data.mongodb.core.convert.MappingMongoConverter.read(MappingMongoConverter.java:372)
		at org.springframework.data.mongodb.core.convert.MappingMongoConverter.readDocument(MappingMongoConverter.java:342)
		at org.springframework.data.mongodb.core.convert.MappingMongoConverter.read(MappingMongoConverter.java:278)
		at org.springframework.data.mongodb.core.convert.MappingMongoConverter.read(MappingMongoConverter.java:274)
		at org.springframework.data.mongodb.core.convert.MappingMongoConverter.read(MappingMongoConverter.java:102)
		at org.springframework.data.mongodb.core.ReactiveMongoTemplate$ReadDocumentCallback.doWith(ReactiveMongoTemplate.java:3155)
		at reactor.core.publisher.FluxConcatMap$ConcatMapImmediate.drain(FluxConcatMap.java:374)
		at reactor.core.publisher.FluxConcatMap$ConcatMapImmediate.onNext(FluxConcatMap.java:250)
		at reactor.core.publisher.FluxCreate$BufferAsyncSink.drain(FluxCreate.java:793)
		at reactor.core.publisher.FluxCreate$BufferAsyncSink.next(FluxCreate.java:718)
		at reactor.core.publisher.FluxCreate$SerializedFluxSink.next(FluxCreate.java:154)
		at java.util.ArrayList.forEach(ArrayList.java:1259)
		at com.mongodb.reactivestreams.client.internal.BatchCursorFlux.lambda$recurseCursor$4(BatchCursorFlux.java:94)
		at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.onNext(MonoPeekTerminal.java:171)
		at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.onNext(MonoPeekTerminal.java:180)
		at reactor.core.publisher.FluxPeekFuseable$PeekConditionalSubscriber.onNext(FluxPeekFuseable.java:854)
		at reactor.core.publisher.MonoCreate$DefaultMonoSink.success(MonoCreate.java:160)
		at com.mongodb.reactivestreams.client.internal.MongoOperationPublisher.lambda$sinkToCallback$30(MongoOperationPublisher.java:550)
		at com.mongodb.internal.operation.AsyncQueryBatchCursor.next(AsyncQueryBatchCursor.java:207)
		at com.mongodb.internal.operation.AsyncQueryBatchCursor.next(AsyncQueryBatchCursor.java:146)
		at com.mongodb.reactivestreams.client.internal.BatchCursor.lambda$next$0(BatchCursor.java:35)
		at reactor.core.publisher.MonoCreate.subscribe(MonoCreate.java:57)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4150)
		at reactor.core.publisher.Mono.subscribeWith(Mono.java:4265)
		at reactor.core.publisher.Mono.subscribe(Mono.java:3982)
		at com.mongodb.reactivestreams.client.internal.BatchCursorFlux.recurseCursor(BatchCursorFlux.java:104)
		at com.mongodb.reactivestreams.client.internal.BatchCursorFlux.lambda$subscribe$0(BatchCursorFlux.java:56)
		at reactor.core.publisher.LambdaMonoSubscriber.onNext(LambdaMonoSubscriber.java:171)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onNext(FluxMapFuseable.java:127)
		at reactor.core.publisher.Operators$MonoSubscriber.complete(Operators.java:1815)
		at reactor.core.publisher.MonoFlatMap$FlatMapInner.onNext(MonoFlatMap.java:249)
		at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.onNext(MonoPeekTerminal.java:180)
		at reactor.core.publisher.MonoCreate$DefaultMonoSink.success(MonoCreate.java:160)
		at com.mongodb.reactivestreams.client.internal.MongoOperationPublisher.lambda$sinkToCallback$30(MongoOperationPublisher.java:550)
		at com.mongodb.reactivestreams.client.internal.OperationExecutorImpl.lambda$execute$2(OperationExecutorImpl.java:73)
		at com.mongodb.internal.async.ErrorHandlingResultCallback.onResult(ErrorHandlingResultCallback.java:48)
		at com.mongodb.internal.operation.FindOperation$3.onResult(FindOperation.java:755)
		at com.mongodb.internal.operation.OperationHelper$ReferenceCountedReleasingWrappedCallback.onResult(OperationHelper.java:532)
		at com.mongodb.internal.operation.CommandOperationHelper$10.onResult(CommandOperationHelper.java:483)
		at com.mongodb.internal.async.ErrorHandlingResultCallback.onResult(ErrorHandlingResultCallback.java:48)
		at com.mongodb.internal.connection.DefaultServer$DefaultServerProtocolExecutor$2.onResult(DefaultServer.java:286)
		at com.mongodb.internal.async.ErrorHandlingResultCallback.onResult(ErrorHandlingResultCallback.java:48)
		at com.mongodb.internal.connection.CommandProtocolImpl$1.onResult(CommandProtocolImpl.java:84)
		at com.mongodb.internal.connection.DefaultConnectionPool$PooledConnection$2.onResult(DefaultConnectionPool.java:530)
		at com.mongodb.internal.connection.UsageTrackingInternalConnection$2.onResult(UsageTrackingInternalConnection.java:142)
		at com.mongodb.internal.async.ErrorHandlingResultCallback.onResult(ErrorHandlingResultCallback.java:48)
		at com.mongodb.internal.connection.InternalStreamConnection$2$1.onResult(InternalStreamConnection.java:462)
		at com.mongodb.internal.connection.InternalStreamConnection$2$1.onResult(InternalStreamConnection.java:439)
		at com.mongodb.internal.connection.InternalStreamConnection$MessageHeaderCallback$MessageCallback.onResult(InternalStreamConnection.java:744)
		at com.mongodb.internal.connection.InternalStreamConnection$MessageHeaderCallback$MessageCallback.onResult(InternalStreamConnection.java:711)
		at com.mongodb.internal.connection.InternalStreamConnection$5.completed(InternalStreamConnection.java:581)
		at com.mongodb.internal.connection.InternalStreamConnection$5.completed(InternalStreamConnection.java:578)
		at com.mongodb.connection.netty.NettyStream.readAsync(NettyStream.java:322)
		at com.mongodb.connection.netty.NettyStream.readAsync(NettyStream.java:269)
		at com.mongodb.internal.connection.InternalStreamConnection.readAsync(InternalStreamConnection.java:578)
		at com.mongodb.internal.connection.InternalStreamConnection.access$1100(InternalStreamConnection.java:78)
		at com.mongodb.internal.connection.InternalStreamConnection$MessageHeaderCallback.onResult(InternalStreamConnection.java:701)
		at com.mongodb.internal.connection.InternalStreamConnection$MessageHeaderCallback.onResult(InternalStreamConnection.java:686)
		at com.mongodb.internal.connection.InternalStreamConnection$5.completed(InternalStreamConnection.java:581)
		at com.mongodb.internal.connection.InternalStreamConnection$5.completed(InternalStreamConnection.java:578)
		at com.mongodb.connection.netty.NettyStream.readAsync(NettyStream.java:322)
		at com.mongodb.connection.netty.NettyStream.handleReadResponse(NettyStream.java:350)
		at com.mongodb.connection.netty.NettyStream.access$1200(NettyStream.java:104)
		at com.mongodb.connection.netty.NettyStream$InboundBufferHandler.channelRead0(NettyStream.java:409)
		at com.mongodb.connection.netty.NettyStream$InboundBufferHandler.channelRead0(NettyStream.java:406)
		at io.netty.channel.SimpleChannelInboundHandler.channelRead(SimpleChannelInboundHandler.java:99)
		at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:379)
		at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:365)
		at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:357)
		at io.netty.channel.DefaultChannelPipeline$HeadContext.channelRead(DefaultChannelPipeline.java:1410)
		at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:379)
		at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:365)
		at io.netty.channel.DefaultChannelPipeline.fireChannelRead(DefaultChannelPipeline.java:919)
		at io.netty.channel.nio.AbstractNioByteChannel$NioByteUnsafe.read(AbstractNioByteChannel.java:166)
		at io.netty.channel.nio.NioEventLoop.processSelectedKey(NioEventLoop.java:719)
		at io.netty.channel.nio.NioEventLoop.processSelectedKeysOptimized(NioEventLoop.java:655)
		at io.netty.channel.nio.NioEventLoop.processSelectedKeys(NioEventLoop.java:581)
		at io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:493)
		at io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:989)
		at io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)
		at io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)
		at java.lang.Thread.run(Thread.java:748)
Caused by: java.lang.IllegalArgumentException: Could not convert number [9.89898968968E11] of type [java.lang.Double] to target class [java.lang.Integer]: overflow
	at org.springframework.util.NumberUtils.raiseOverflowException(NumberUtils.java:175)
	at org.springframework.util.NumberUtils.convertNumberToTargetClass(NumberUtils.java:108)
	at org.springframework.core.convert.support.NumberToNumberConverterFactory$NumberToNumber.convert(NumberToNumberConverterFactory.java:66)
	at org.springframework.core.convert.support.NumberToNumberConverterFactory$NumberToNumber.convert(NumberToNumberConverterFactory.java:56)
	at org.springframework.core.convert.support.GenericConversionService$ConverterFactoryAdapter.convert(GenericConversionService.java:437)
	at org.springframework.core.convert.support.ConversionUtils.invokeConverter(ConversionUtils.java:41)
	at org.springframework.core.convert.support.GenericConversionService.convert(GenericConversionService.java:192)
	at org.springframework.core.convert.support.GenericConversionService.convert(GenericConversionService.java:175)
	at org.springframework.data.mongodb.core.convert.MappingMongoConverter.doConvert(MappingMongoConverter.java:1547)
	at org.springframework.data.mongodb.core.convert.MappingMongoConverter.doConvert(MappingMongoConverter.java:1540)
	at org.springframework.data.mongodb.core.convert.MappingMongoConverter.getPotentiallyConvertedSimpleRead(MappingMongoConverter.java:1060)
	at org.springframework.data.mongodb.core.convert.MappingMongoConverter.getPotentiallyConvertedSimpleRead(MappingMongoConverter.java:1038)
	at org.springframework.data.mongodb.core.convert.MappingMongoConverter$ConversionContext.convert(MappingMongoConverter.java:1919)
	at org.springframework.data.mongodb.core.convert.MappingMongoConverter$MongoDbPropertyValueProvider.getPropertyValue(MappingMongoConverter.java:1641)
	at org.springframework.data.mongodb.core.convert.MappingMongoConverter.readProperties(MappingMongoConverter.java:481)
	at org.springframework.data.mongodb.core.convert.MappingMongoConverter.populateProperties(MappingMongoConverter.java:394)
	at org.springframework.data.mongodb.core.convert.MappingMongoConverter.read(MappingMongoConverter.java:372)
	at org.springframework.data.mongodb.core.convert.MappingMongoConverter.readDocument(MappingMongoConverter.java:342)
	at org.springframework.data.mongodb.core.convert.MappingMongoConverter.read(MappingMongoConverter.java:278)
	at org.springframework.data.mongodb.core.convert.MappingMongoConverter.read(MappingMongoConverter.java:274)
	at org.springframework.data.mongodb.core.convert.MappingMongoConverter.read(MappingMongoConverter.java:102)
	at org.springframework.data.mongodb.core.ReactiveMongoTemplate$ReadDocumentCallback.doWith(ReactiveMongoTemplate.java:3155)
	at reactor.core.publisher.FluxConcatMap$ConcatMapImmediate.drain(FluxConcatMap.java:374)
	at reactor.core.publisher.FluxConcatMap$ConcatMapImmediate.onNext(FluxConcatMap.java:250)
	at reactor.core.publisher.FluxCreate$BufferAsyncSink.drain(FluxCreate.java:793)
	at reactor.core.publisher.FluxCreate$BufferAsyncSink.next(FluxCreate.java:718)
	at reactor.core.publisher.FluxCreate$SerializedFluxSink.next(FluxCreate.java:154)
	at java.util.ArrayList.forEach(ArrayList.java:1259)
	at com.mongodb.reactivestreams.client.internal.BatchCursorFlux.lambda$recurseCursor$4(BatchCursorFlux.java:94)
	at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.onNext(MonoPeekTerminal.java:171)
	at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.onNext(MonoPeekTerminal.java:180)
	at reactor.core.publisher.FluxPeekFuseable$PeekConditionalSubscriber.onNext(FluxPeekFuseable.java:854)
	at reactor.core.publisher.MonoCreate$DefaultMonoSink.success(MonoCreate.java:160)
	at com.mongodb.reactivestreams.client.internal.MongoOperationPublisher.lambda$sinkToCallback$30(MongoOperationPublisher.java:550)
	at com.mongodb.internal.operation.AsyncQueryBatchCursor.next(AsyncQueryBatchCursor.java:207)
	at com.mongodb.internal.operation.AsyncQueryBatchCursor.next(AsyncQueryBatchCursor.java:146)
	at com.mongodb.reactivestreams.client.internal.BatchCursor.lambda$next$0(BatchCursor.java:35)
	at reactor.core.publisher.MonoCreate.subscribe(MonoCreate.java:57)
	at reactor.core.publisher.Mono.subscribe(Mono.java:4150)
	at reactor.core.publisher.Mono.subscribeWith(Mono.java:4265)
	at reactor.core.publisher.Mono.subscribe(Mono.java:3982)
	at com.mongodb.reactivestreams.client.internal.BatchCursorFlux.recurseCursor(BatchCursorFlux.java:104)
	at com.mongodb.reactivestreams.client.internal.BatchCursorFlux.lambda$subscribe$0(BatchCursorFlux.java:56)
	at reactor.core.publisher.LambdaMonoSubscriber.onNext(LambdaMonoSubscriber.java:171)
	at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onNext(FluxMapFuseable.java:127)
	at reactor.core.publisher.Operators$MonoSubscriber.complete(Operators.java:1815)
	at reactor.core.publisher.MonoFlatMap$FlatMapInner.onNext(MonoFlatMap.java:249)
	at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.onNext(MonoPeekTerminal.java:180)
	at reactor.core.publisher.MonoCreate$DefaultMonoSink.success(MonoCreate.java:160)
	at com.mongodb.reactivestreams.client.internal.MongoOperationPublisher.lambda$sinkToCallback$30(MongoOperationPublisher.java:550)
	at com.mongodb.reactivestreams.client.internal.OperationExecutorImpl.lambda$execute$2(OperationExecutorImpl.java:73)
	at com.mongodb.internal.async.ErrorHandlingResultCallback.onResult(ErrorHandlingResultCallback.java:48)
	at com.mongodb.internal.operation.FindOperation$3.onResult(FindOperation.java:755)
	at com.mongodb.internal.operation.OperationHelper$ReferenceCountedReleasingWrappedCallback.onResult(OperationHelper.java:532)
	at com.mongodb.internal.operation.CommandOperationHelper$10.onResult(CommandOperationHelper.java:483)
	at com.mongodb.internal.async.ErrorHandlingResultCallback.onResult(ErrorHandlingResultCallback.java:48)
	at com.mongodb.internal.connection.DefaultServer$DefaultServerProtocolExecutor$2.onResult(DefaultServer.java:286)
	at com.mongodb.internal.async.ErrorHandlingResultCallback.onResult(ErrorHandlingResultCallback.java:48)
	at com.mongodb.internal.connection.CommandProtocolImpl$1.onResult(CommandProtocolImpl.java:84)
	at com.mongodb.internal.connection.DefaultConnectionPool$PooledConnection$2.onResult(DefaultConnectionPool.java:530)
	at com.mongodb.internal.connection.UsageTrackingInternalConnection$2.onResult(UsageTrackingInternalConnection.java:142)
	at com.mongodb.internal.async.ErrorHandlingResultCallback.onResult(ErrorHandlingResultCallback.java:48)
	at com.mongodb.internal.connection.InternalStreamConnection$2$1.onResult(InternalStreamConnection.java:462)
	at com.mongodb.internal.connection.InternalStreamConnection$2$1.onResult(InternalStreamConnection.java:439)
	at com.mongodb.internal.connection.InternalStreamConnection$MessageHeaderCallback$MessageCallback.onResult(InternalStreamConnection.java:744)
	at com.mongodb.internal.connection.InternalStreamConnection$MessageHeaderCallback$MessageCallback.onResult(InternalStreamConnection.java:711)
	at com.mongodb.internal.connection.InternalStreamConnection$5.completed(InternalStreamConnection.java:581)
	at com.mongodb.internal.connection.InternalStreamConnection$5.completed(InternalStreamConnection.java:578)
	at com.mongodb.connection.netty.NettyStream.readAsync(NettyStream.java:322)
	at com.mongodb.connection.netty.NettyStream.readAsync(NettyStream.java:269)
	at com.mongodb.internal.connection.InternalStreamConnection.readAsync(InternalStreamConnection.java:578)
	at com.mongodb.internal.connection.InternalStreamConnection.access$1100(InternalStreamConnection.java:78)
	at com.mongodb.internal.connection.InternalStreamConnection$MessageHeaderCallback.onResult(InternalStreamConnection.java:701)
	at com.mongodb.internal.connection.InternalStreamConnection$MessageHeaderCallback.onResult(InternalStreamConnection.java:686)
	at com.mongodb.internal.connection.InternalStreamConnection$5.completed(InternalStreamConnection.java:581)
	at com.mongodb.internal.connection.InternalStreamConnection$5.completed(InternalStreamConnection.java:578)
	at com.mongodb.connection.netty.NettyStream.readAsync(NettyStream.java:322)
	at com.mongodb.connection.netty.NettyStream.handleReadResponse(NettyStream.java:350)
	at com.mongodb.connection.netty.NettyStream.access$1200(NettyStream.java:104)
	at com.mongodb.connection.netty.NettyStream$InboundBufferHandler.channelRead0(NettyStream.java:409)
	at com.mongodb.connection.netty.NettyStream$InboundBufferHandler.channelRead0(NettyStream.java:406)
	at io.netty.channel.SimpleChannelInboundHandler.channelRead(SimpleChannelInboundHandler.java:99)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:379)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:365)
	at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:357)
	at io.netty.channel.DefaultChannelPipeline$HeadContext.channelRead(DefaultChannelPipeline.java:1410)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:379)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:365)
	at io.netty.channel.DefaultChannelPipeline.fireChannelRead(DefaultChannelPipeline.java:919)
	at io.netty.channel.nio.AbstractNioByteChannel$NioByteUnsafe.read(AbstractNioByteChannel.java:166)
	at io.netty.channel.nio.NioEventLoop.processSelectedKey(NioEventLoop.java:719)
	at io.netty.channel.nio.NioEventLoop.processSelectedKeysOptimized(NioEventLoop.java:655)
	at io.netty.channel.nio.NioEventLoop.processSelectedKeys(NioEventLoop.java:581)
	at io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:493)
	at io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:989)
	at io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)
	at io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)
	at java.lang.Thread.run(Thread.java:748)
2021-07-19 19:08:48,528 DEBUG [nioEventLoopGroup-3-3] org.springframework.core.log.CompositeLog : [9133031f-6, L:/0:0:0:0:0:0:0:1:8090 - R:/0:0:0:0:0:0:0:1:54137] Encoding [{timestamp=Mon Jul 19 19:08:48 COT 2021, path=/customer/, status=500, error=Internal Server Error, r (truncated)...]
2021-07-19 19:08:48,530 DEBUG [reactor-http-nio-3] org.springframework.core.log.LogFormatUtils : [9133031f-6, L:/0:0:0:0:0:0:0:1:8090 - R:/0:0:0:0:0:0:0:1:54137] Completed 500 INTERNAL_SERVER_ERROR
2021-07-19 19:08:49,061 DEBUG [reactor-http-nio-3] org.springframework.core.log.LogFormatUtils : [9133031f-7, L:/0:0:0:0:0:0:0:1:8090 - R:/0:0:0:0:0:0:0:1:54137] HTTP GET "/customer/"
2021-07-19 19:08:49,062 DEBUG [reactor-http-nio-3] org.springframework.web.reactive.handler.AbstractHandlerMapping : [9133031f-7, L:/0:0:0:0:0:0:0:1:8090 - R:/0:0:0:0:0:0:0:1:54137] Mapped to com.bank.manage.customer.controller.CustomerController#getAllCustomers()
2021-07-19 19:08:49,062 INFO [reactor-http-nio-3] com.bank.manage.customer.controller.CustomerController :  EndPoit get by all customers {} 
2021-07-19 19:08:49,063 DEBUG [reactor-http-nio-3] org.springframework.web.reactive.result.HandlerResultHandlerSupport : [9133031f-7, L:/0:0:0:0:0:0:0:1:8090 - R:/0:0:0:0:0:0:0:1:54137] Found 'Content-Type:application/json' in response
2021-07-19 19:08:49,063 DEBUG [reactor-http-nio-3] org.springframework.web.reactive.result.method.annotation.AbstractMessageWriterResultHandler : [9133031f-7, L:/0:0:0:0:0:0:0:1:8090 - R:/0:0:0:0:0:0:0:1:54137] 0..N [com.bank.manage.customer.persistence.entity.Customer]
2021-07-19 19:08:49,068 DEBUG [nioEventLoopGroup-3-3] org.springframework.core.log.CompositeLog : [9133031f-7, L:/0:0:0:0:0:0:0:1:8090 - R:/0:0:0:0:0:0:0:1:54137] Resolved [ConversionFailedException: Failed to convert from type [java.lang.Double] to type [java.lang.Integer] for value '9.89898968968E11'; nested exception is java.lang.IllegalArgumentException: Could not convert number [9.89898968968E11] of type [java.lang.Double] to target class [java.lang.Integer]: overflow] for HTTP GET /customer/
2021-07-19 19:08:49,068 ERROR [nioEventLoopGroup-3-3] org.springframework.core.log.CompositeLog : [9133031f-7, L:/0:0:0:0:0:0:0:1:8090 - R:/0:0:0:0:0:0:0:1:54137]  500 Server Error for HTTP GET "/customer/"
org.springframework.core.convert.ConversionFailedException: Failed to convert from type [java.lang.Double] to type [java.lang.Integer] for value '9.89898968968E11'; nested exception is java.lang.IllegalArgumentException: Could not convert number [9.89898968968E11] of type [java.lang.Double] to target class [java.lang.Integer]: overflow
	at org.springframework.core.convert.support.ConversionUtils.invokeConverter(ConversionUtils.java:47)
	Suppressed: reactor.core.publisher.FluxOnAssembly$OnAssemblyException: 
Error has been observed at the following site(s):
	|_ checkpoint ⇢ Handler com.bank.manage.customer.controller.CustomerController#getAllCustomers() [DispatcherHandler]
	|_ checkpoint ⇢ org.springframework.boot.actuate.metrics.web.reactive.server.MetricsWebFilter [DefaultWebFilterChain]
	|_ checkpoint ⇢ HTTP GET "/customer/" [ExceptionHandlingWebHandler]
Stack trace:
		at org.springframework.core.convert.support.ConversionUtils.invokeConverter(ConversionUtils.java:47)
		at org.springframework.core.convert.support.GenericConversionService.convert(GenericConversionService.java:192)
		at org.springframework.core.convert.support.GenericConversionService.convert(GenericConversionService.java:175)
		at org.springframework.data.mongodb.core.convert.MappingMongoConverter.doConvert(MappingMongoConverter.java:1547)
		at org.springframework.data.mongodb.core.convert.MappingMongoConverter.doConvert(MappingMongoConverter.java:1540)
		at org.springframework.data.mongodb.core.convert.MappingMongoConverter.getPotentiallyConvertedSimpleRead(MappingMongoConverter.java:1060)
		at org.springframework.data.mongodb.core.convert.MappingMongoConverter.getPotentiallyConvertedSimpleRead(MappingMongoConverter.java:1038)
		at org.springframework.data.mongodb.core.convert.MappingMongoConverter$ConversionContext.convert(MappingMongoConverter.java:1919)
		at org.springframework.data.mongodb.core.convert.MappingMongoConverter$MongoDbPropertyValueProvider.getPropertyValue(MappingMongoConverter.java:1641)
		at org.springframework.data.mongodb.core.convert.MappingMongoConverter.readProperties(MappingMongoConverter.java:481)
		at org.springframework.data.mongodb.core.convert.MappingMongoConverter.populateProperties(MappingMongoConverter.java:394)
		at org.springframework.data.mongodb.core.convert.MappingMongoConverter.read(MappingMongoConverter.java:372)
		at org.springframework.data.mongodb.core.convert.MappingMongoConverter.readDocument(MappingMongoConverter.java:342)
		at org.springframework.data.mongodb.core.convert.MappingMongoConverter.read(MappingMongoConverter.java:278)
		at org.springframework.data.mongodb.core.convert.MappingMongoConverter.read(MappingMongoConverter.java:274)
		at org.springframework.data.mongodb.core.convert.MappingMongoConverter.read(MappingMongoConverter.java:102)
		at org.springframework.data.mongodb.core.ReactiveMongoTemplate$ReadDocumentCallback.doWith(ReactiveMongoTemplate.java:3155)
		at reactor.core.publisher.FluxConcatMap$ConcatMapImmediate.drain(FluxConcatMap.java:374)
		at reactor.core.publisher.FluxConcatMap$ConcatMapImmediate.onNext(FluxConcatMap.java:250)
		at reactor.core.publisher.FluxCreate$BufferAsyncSink.drain(FluxCreate.java:793)
		at reactor.core.publisher.FluxCreate$BufferAsyncSink.next(FluxCreate.java:718)
		at reactor.core.publisher.FluxCreate$SerializedFluxSink.next(FluxCreate.java:154)
		at java.util.ArrayList.forEach(ArrayList.java:1259)
		at com.mongodb.reactivestreams.client.internal.BatchCursorFlux.lambda$recurseCursor$4(BatchCursorFlux.java:94)
		at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.onNext(MonoPeekTerminal.java:171)
		at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.onNext(MonoPeekTerminal.java:180)
		at reactor.core.publisher.FluxPeekFuseable$PeekConditionalSubscriber.onNext(FluxPeekFuseable.java:854)
		at reactor.core.publisher.MonoCreate$DefaultMonoSink.success(MonoCreate.java:160)
		at com.mongodb.reactivestreams.client.internal.MongoOperationPublisher.lambda$sinkToCallback$30(MongoOperationPublisher.java:550)
		at com.mongodb.internal.operation.AsyncQueryBatchCursor.next(AsyncQueryBatchCursor.java:207)
		at com.mongodb.internal.operation.AsyncQueryBatchCursor.next(AsyncQueryBatchCursor.java:146)
		at com.mongodb.reactivestreams.client.internal.BatchCursor.lambda$next$0(BatchCursor.java:35)
		at reactor.core.publisher.MonoCreate.subscribe(MonoCreate.java:57)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4150)
		at reactor.core.publisher.Mono.subscribeWith(Mono.java:4265)
		at reactor.core.publisher.Mono.subscribe(Mono.java:3982)
		at com.mongodb.reactivestreams.client.internal.BatchCursorFlux.recurseCursor(BatchCursorFlux.java:104)
		at com.mongodb.reactivestreams.client.internal.BatchCursorFlux.lambda$subscribe$0(BatchCursorFlux.java:56)
		at reactor.core.publisher.LambdaMonoSubscriber.onNext(LambdaMonoSubscriber.java:171)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onNext(FluxMapFuseable.java:127)
		at reactor.core.publisher.Operators$MonoSubscriber.complete(Operators.java:1815)
		at reactor.core.publisher.MonoFlatMap$FlatMapInner.onNext(MonoFlatMap.java:249)
		at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.onNext(MonoPeekTerminal.java:180)
		at reactor.core.publisher.MonoCreate$DefaultMonoSink.success(MonoCreate.java:160)
		at com.mongodb.reactivestreams.client.internal.MongoOperationPublisher.lambda$sinkToCallback$30(MongoOperationPublisher.java:550)
		at com.mongodb.reactivestreams.client.internal.OperationExecutorImpl.lambda$execute$2(OperationExecutorImpl.java:73)
		at com.mongodb.internal.async.ErrorHandlingResultCallback.onResult(ErrorHandlingResultCallback.java:48)
		at com.mongodb.internal.operation.FindOperation$3.onResult(FindOperation.java:755)
		at com.mongodb.internal.operation.OperationHelper$ReferenceCountedReleasingWrappedCallback.onResult(OperationHelper.java:532)
		at com.mongodb.internal.operation.CommandOperationHelper$10.onResult(CommandOperationHelper.java:483)
		at com.mongodb.internal.async.ErrorHandlingResultCallback.onResult(ErrorHandlingResultCallback.java:48)
		at com.mongodb.internal.connection.DefaultServer$DefaultServerProtocolExecutor$2.onResult(DefaultServer.java:286)
		at com.mongodb.internal.async.ErrorHandlingResultCallback.onResult(ErrorHandlingResultCallback.java:48)
		at com.mongodb.internal.connection.CommandProtocolImpl$1.onResult(CommandProtocolImpl.java:84)
		at com.mongodb.internal.connection.DefaultConnectionPool$PooledConnection$2.onResult(DefaultConnectionPool.java:530)
		at com.mongodb.internal.connection.UsageTrackingInternalConnection$2.onResult(UsageTrackingInternalConnection.java:142)
		at com.mongodb.internal.async.ErrorHandlingResultCallback.onResult(ErrorHandlingResultCallback.java:48)
		at com.mongodb.internal.connection.InternalStreamConnection$2$1.onResult(InternalStreamConnection.java:462)
		at com.mongodb.internal.connection.InternalStreamConnection$2$1.onResult(InternalStreamConnection.java:439)
		at com.mongodb.internal.connection.InternalStreamConnection$MessageHeaderCallback$MessageCallback.onResult(InternalStreamConnection.java:744)
		at com.mongodb.internal.connection.InternalStreamConnection$MessageHeaderCallback$MessageCallback.onResult(InternalStreamConnection.java:711)
		at com.mongodb.internal.connection.InternalStreamConnection$5.completed(InternalStreamConnection.java:581)
		at com.mongodb.internal.connection.InternalStreamConnection$5.completed(InternalStreamConnection.java:578)
		at com.mongodb.connection.netty.NettyStream.readAsync(NettyStream.java:322)
		at com.mongodb.connection.netty.NettyStream.readAsync(NettyStream.java:269)
		at com.mongodb.internal.connection.InternalStreamConnection.readAsync(InternalStreamConnection.java:578)
		at com.mongodb.internal.connection.InternalStreamConnection.access$1100(InternalStreamConnection.java:78)
		at com.mongodb.internal.connection.InternalStreamConnection$MessageHeaderCallback.onResult(InternalStreamConnection.java:701)
		at com.mongodb.internal.connection.InternalStreamConnection$MessageHeaderCallback.onResult(InternalStreamConnection.java:686)
		at com.mongodb.internal.connection.InternalStreamConnection$5.completed(InternalStreamConnection.java:581)
		at com.mongodb.internal.connection.InternalStreamConnection$5.completed(InternalStreamConnection.java:578)
		at com.mongodb.connection.netty.NettyStream.readAsync(NettyStream.java:322)
		at com.mongodb.connection.netty.NettyStream.handleReadResponse(NettyStream.java:350)
		at com.mongodb.connection.netty.NettyStream.access$1200(NettyStream.java:104)
		at com.mongodb.connection.netty.NettyStream$InboundBufferHandler.channelRead0(NettyStream.java:409)
		at com.mongodb.connection.netty.NettyStream$InboundBufferHandler.channelRead0(NettyStream.java:406)
		at io.netty.channel.SimpleChannelInboundHandler.channelRead(SimpleChannelInboundHandler.java:99)
		at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:379)
		at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:365)
		at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:357)
		at io.netty.channel.DefaultChannelPipeline$HeadContext.channelRead(DefaultChannelPipeline.java:1410)
		at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:379)
		at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:365)
		at io.netty.channel.DefaultChannelPipeline.fireChannelRead(DefaultChannelPipeline.java:919)
		at io.netty.channel.nio.AbstractNioByteChannel$NioByteUnsafe.read(AbstractNioByteChannel.java:166)
		at io.netty.channel.nio.NioEventLoop.processSelectedKey(NioEventLoop.java:719)
		at io.netty.channel.nio.NioEventLoop.processSelectedKeysOptimized(NioEventLoop.java:655)
		at io.netty.channel.nio.NioEventLoop.processSelectedKeys(NioEventLoop.java:581)
		at io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:493)
		at io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:989)
		at io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)
		at io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)
		at java.lang.Thread.run(Thread.java:748)
Caused by: java.lang.IllegalArgumentException: Could not convert number [9.89898968968E11] of type [java.lang.Double] to target class [java.lang.Integer]: overflow
	at org.springframework.util.NumberUtils.raiseOverflowException(NumberUtils.java:175)
	at org.springframework.util.NumberUtils.convertNumberToTargetClass(NumberUtils.java:108)
	at org.springframework.core.convert.support.NumberToNumberConverterFactory$NumberToNumber.convert(NumberToNumberConverterFactory.java:66)
	at org.springframework.core.convert.support.NumberToNumberConverterFactory$NumberToNumber.convert(NumberToNumberConverterFactory.java:56)
	at org.springframework.core.convert.support.GenericConversionService$ConverterFactoryAdapter.convert(GenericConversionService.java:437)
	at org.springframework.core.convert.support.ConversionUtils.invokeConverter(ConversionUtils.java:41)
	at org.springframework.core.convert.support.GenericConversionService.convert(GenericConversionService.java:192)
	at org.springframework.core.convert.support.GenericConversionService.convert(GenericConversionService.java:175)
	at org.springframework.data.mongodb.core.convert.MappingMongoConverter.doConvert(MappingMongoConverter.java:1547)
	at org.springframework.data.mongodb.core.convert.MappingMongoConverter.doConvert(MappingMongoConverter.java:1540)
	at org.springframework.data.mongodb.core.convert.MappingMongoConverter.getPotentiallyConvertedSimpleRead(MappingMongoConverter.java:1060)
	at org.springframework.data.mongodb.core.convert.MappingMongoConverter.getPotentiallyConvertedSimpleRead(MappingMongoConverter.java:1038)
	at org.springframework.data.mongodb.core.convert.MappingMongoConverter$ConversionContext.convert(MappingMongoConverter.java:1919)
	at org.springframework.data.mongodb.core.convert.MappingMongoConverter$MongoDbPropertyValueProvider.getPropertyValue(MappingMongoConverter.java:1641)
	at org.springframework.data.mongodb.core.convert.MappingMongoConverter.readProperties(MappingMongoConverter.java:481)
	at org.springframework.data.mongodb.core.convert.MappingMongoConverter.populateProperties(MappingMongoConverter.java:394)
	at org.springframework.data.mongodb.core.convert.MappingMongoConverter.read(MappingMongoConverter.java:372)
	at org.springframework.data.mongodb.core.convert.MappingMongoConverter.readDocument(MappingMongoConverter.java:342)
	at org.springframework.data.mongodb.core.convert.MappingMongoConverter.read(MappingMongoConverter.java:278)
	at org.springframework.data.mongodb.core.convert.MappingMongoConverter.read(MappingMongoConverter.java:274)
	at org.springframework.data.mongodb.core.convert.MappingMongoConverter.read(MappingMongoConverter.java:102)
	at org.springframework.data.mongodb.core.ReactiveMongoTemplate$ReadDocumentCallback.doWith(ReactiveMongoTemplate.java:3155)
	at reactor.core.publisher.FluxConcatMap$ConcatMapImmediate.drain(FluxConcatMap.java:374)
	at reactor.core.publisher.FluxConcatMap$ConcatMapImmediate.onNext(FluxConcatMap.java:250)
	at reactor.core.publisher.FluxCreate$BufferAsyncSink.drain(FluxCreate.java:793)
	at reactor.core.publisher.FluxCreate$BufferAsyncSink.next(FluxCreate.java:718)
	at reactor.core.publisher.FluxCreate$SerializedFluxSink.next(FluxCreate.java:154)
	at java.util.ArrayList.forEach(ArrayList.java:1259)
	at com.mongodb.reactivestreams.client.internal.BatchCursorFlux.lambda$recurseCursor$4(BatchCursorFlux.java:94)
	at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.onNext(MonoPeekTerminal.java:171)
	at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.onNext(MonoPeekTerminal.java:180)
	at reactor.core.publisher.FluxPeekFuseable$PeekConditionalSubscriber.onNext(FluxPeekFuseable.java:854)
	at reactor.core.publisher.MonoCreate$DefaultMonoSink.success(MonoCreate.java:160)
	at com.mongodb.reactivestreams.client.internal.MongoOperationPublisher.lambda$sinkToCallback$30(MongoOperationPublisher.java:550)
	at com.mongodb.internal.operation.AsyncQueryBatchCursor.next(AsyncQueryBatchCursor.java:207)
	at com.mongodb.internal.operation.AsyncQueryBatchCursor.next(AsyncQueryBatchCursor.java:146)
	at com.mongodb.reactivestreams.client.internal.BatchCursor.lambda$next$0(BatchCursor.java:35)
	at reactor.core.publisher.MonoCreate.subscribe(MonoCreate.java:57)
	at reactor.core.publisher.Mono.subscribe(Mono.java:4150)
	at reactor.core.publisher.Mono.subscribeWith(Mono.java:4265)
	at reactor.core.publisher.Mono.subscribe(Mono.java:3982)
	at com.mongodb.reactivestreams.client.internal.BatchCursorFlux.recurseCursor(BatchCursorFlux.java:104)
	at com.mongodb.reactivestreams.client.internal.BatchCursorFlux.lambda$subscribe$0(BatchCursorFlux.java:56)
	at reactor.core.publisher.LambdaMonoSubscriber.onNext(LambdaMonoSubscriber.java:171)
	at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onNext(FluxMapFuseable.java:127)
	at reactor.core.publisher.Operators$MonoSubscriber.complete(Operators.java:1815)
	at reactor.core.publisher.MonoFlatMap$FlatMapInner.onNext(MonoFlatMap.java:249)
	at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.onNext(MonoPeekTerminal.java:180)
	at reactor.core.publisher.MonoCreate$DefaultMonoSink.success(MonoCreate.java:160)
	at com.mongodb.reactivestreams.client.internal.MongoOperationPublisher.lambda$sinkToCallback$30(MongoOperationPublisher.java:550)
	at com.mongodb.reactivestreams.client.internal.OperationExecutorImpl.lambda$execute$2(OperationExecutorImpl.java:73)
	at com.mongodb.internal.async.ErrorHandlingResultCallback.onResult(ErrorHandlingResultCallback.java:48)
	at com.mongodb.internal.operation.FindOperation$3.onResult(FindOperation.java:755)
	at com.mongodb.internal.operation.OperationHelper$ReferenceCountedReleasingWrappedCallback.onResult(OperationHelper.java:532)
	at com.mongodb.internal.operation.CommandOperationHelper$10.onResult(CommandOperationHelper.java:483)
	at com.mongodb.internal.async.ErrorHandlingResultCallback.onResult(ErrorHandlingResultCallback.java:48)
	at com.mongodb.internal.connection.DefaultServer$DefaultServerProtocolExecutor$2.onResult(DefaultServer.java:286)
	at com.mongodb.internal.async.ErrorHandlingResultCallback.onResult(ErrorHandlingResultCallback.java:48)
	at com.mongodb.internal.connection.CommandProtocolImpl$1.onResult(CommandProtocolImpl.java:84)
	at com.mongodb.internal.connection.DefaultConnectionPool$PooledConnection$2.onResult(DefaultConnectionPool.java:530)
	at com.mongodb.internal.connection.UsageTrackingInternalConnection$2.onResult(UsageTrackingInternalConnection.java:142)
	at com.mongodb.internal.async.ErrorHandlingResultCallback.onResult(ErrorHandlingResultCallback.java:48)
	at com.mongodb.internal.connection.InternalStreamConnection$2$1.onResult(InternalStreamConnection.java:462)
	at com.mongodb.internal.connection.InternalStreamConnection$2$1.onResult(InternalStreamConnection.java:439)
	at com.mongodb.internal.connection.InternalStreamConnection$MessageHeaderCallback$MessageCallback.onResult(InternalStreamConnection.java:744)
	at com.mongodb.internal.connection.InternalStreamConnection$MessageHeaderCallback$MessageCallback.onResult(InternalStreamConnection.java:711)
	at com.mongodb.internal.connection.InternalStreamConnection$5.completed(InternalStreamConnection.java:581)
	at com.mongodb.internal.connection.InternalStreamConnection$5.completed(InternalStreamConnection.java:578)
	at com.mongodb.connection.netty.NettyStream.readAsync(NettyStream.java:322)
	at com.mongodb.connection.netty.NettyStream.readAsync(NettyStream.java:269)
	at com.mongodb.internal.connection.InternalStreamConnection.readAsync(InternalStreamConnection.java:578)
	at com.mongodb.internal.connection.InternalStreamConnection.access$1100(InternalStreamConnection.java:78)
	at com.mongodb.internal.connection.InternalStreamConnection$MessageHeaderCallback.onResult(InternalStreamConnection.java:701)
	at com.mongodb.internal.connection.InternalStreamConnection$MessageHeaderCallback.onResult(InternalStreamConnection.java:686)
	at com.mongodb.internal.connection.InternalStreamConnection$5.completed(InternalStreamConnection.java:581)
	at com.mongodb.internal.connection.InternalStreamConnection$5.completed(InternalStreamConnection.java:578)
	at com.mongodb.connection.netty.NettyStream.readAsync(NettyStream.java:322)
	at com.mongodb.connection.netty.NettyStream.handleReadResponse(NettyStream.java:350)
	at com.mongodb.connection.netty.NettyStream.access$1200(NettyStream.java:104)
	at com.mongodb.connection.netty.NettyStream$InboundBufferHandler.channelRead0(NettyStream.java:409)
	at com.mongodb.connection.netty.NettyStream$InboundBufferHandler.channelRead0(NettyStream.java:406)
	at io.netty.channel.SimpleChannelInboundHandler.channelRead(SimpleChannelInboundHandler.java:99)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:379)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:365)
	at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:357)
	at io.netty.channel.DefaultChannelPipeline$HeadContext.channelRead(DefaultChannelPipeline.java:1410)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:379)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:365)
	at io.netty.channel.DefaultChannelPipeline.fireChannelRead(DefaultChannelPipeline.java:919)
	at io.netty.channel.nio.AbstractNioByteChannel$NioByteUnsafe.read(AbstractNioByteChannel.java:166)
	at io.netty.channel.nio.NioEventLoop.processSelectedKey(NioEventLoop.java:719)
	at io.netty.channel.nio.NioEventLoop.processSelectedKeysOptimized(NioEventLoop.java:655)
	at io.netty.channel.nio.NioEventLoop.processSelectedKeys(NioEventLoop.java:581)
	at io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:493)
	at io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:989)
	at io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)
	at io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)
	at java.lang.Thread.run(Thread.java:748)
2021-07-19 19:08:49,070 DEBUG [nioEventLoopGroup-3-3] org.springframework.core.log.CompositeLog : [9133031f-7, L:/0:0:0:0:0:0:0:1:8090 - R:/0:0:0:0:0:0:0:1:54137] Encoding [{timestamp=Mon Jul 19 19:08:49 COT 2021, path=/customer/, status=500, error=Internal Server Error, r (truncated)...]
2021-07-19 19:08:49,072 DEBUG [reactor-http-nio-3] org.springframework.core.log.LogFormatUtils : [9133031f-7, L:/0:0:0:0:0:0:0:1:8090 - R:/0:0:0:0:0:0:0:1:54137] Completed 500 INTERNAL_SERVER_ERROR
2021-07-19 19:09:02,185 DEBUG [DiscoveryClient-CacheRefreshExecutor-0] org.springframework.core.log.CompositeLog : HTTP GET http://localhost:8761/eureka/apps/delta
2021-07-19 19:09:02,186 DEBUG [DiscoveryClient-CacheRefreshExecutor-0] org.springframework.core.log.CompositeLog : Accept=[application/json, application/*+json]
2021-07-19 19:09:02,197 DEBUG [DiscoveryClient-HeartbeatExecutor-0] org.springframework.core.log.CompositeLog : HTTP PUT http://localhost:8761/eureka/apps/CUSTOMER_SERVICE/host.docker.internal:customer_service:8090?status=UP&lastDirtyTimestamp=1626739712202
2021-07-19 19:09:02,209 DEBUG [DiscoveryClient-HeartbeatExecutor-0] org.springframework.core.log.CompositeLog : Accept=[application/json, application/*+json]
2021-07-19 19:09:02,797 DEBUG [DiscoveryClient-CacheRefreshExecutor-0] org.springframework.core.log.CompositeLog : Response 200 OK
2021-07-19 19:09:02,798 DEBUG [DiscoveryClient-CacheRefreshExecutor-0] org.springframework.core.log.CompositeLog : Reading to [org.springframework.cloud.netflix.eureka.http.EurekaApplications]
2021-07-19 19:09:02,843 DEBUG [DiscoveryClient-HeartbeatExecutor-0] org.springframework.core.log.CompositeLog : Response 200 OK
2021-07-19 19:09:32,810 DEBUG [DiscoveryClient-CacheRefreshExecutor-0] org.springframework.core.log.CompositeLog : HTTP GET http://localhost:8761/eureka/apps/delta
2021-07-19 19:09:32,812 DEBUG [DiscoveryClient-CacheRefreshExecutor-0] org.springframework.core.log.CompositeLog : Accept=[application/json, application/*+json]
2021-07-19 19:09:32,818 DEBUG [DiscoveryClient-CacheRefreshExecutor-0] org.springframework.core.log.CompositeLog : Response 200 OK
2021-07-19 19:09:32,819 DEBUG [DiscoveryClient-CacheRefreshExecutor-0] org.springframework.core.log.CompositeLog : Reading to [org.springframework.cloud.netflix.eureka.http.EurekaApplications]
2021-07-19 19:09:32,844 DEBUG [DiscoveryClient-HeartbeatExecutor-0] org.springframework.core.log.CompositeLog : HTTP PUT http://localhost:8761/eureka/apps/CUSTOMER_SERVICE/host.docker.internal:customer_service:8090?status=UP&lastDirtyTimestamp=1626739712202
2021-07-19 19:09:32,845 DEBUG [DiscoveryClient-HeartbeatExecutor-0] org.springframework.core.log.CompositeLog : Accept=[application/json, application/*+json]
2021-07-19 19:09:32,878 DEBUG [DiscoveryClient-HeartbeatExecutor-0] org.springframework.core.log.CompositeLog : Response 200 OK
2021-07-19 19:09:49,678 DEBUG [reactor-http-nio-3] org.springframework.core.log.LogFormatUtils : [9133031f-8, L:/0:0:0:0:0:0:0:1:8090 - R:/0:0:0:0:0:0:0:1:54137] HTTP GET "/customer/60e231e30d2f326bba123479"
2021-07-19 19:09:49,680 DEBUG [reactor-http-nio-3] org.springframework.web.reactive.handler.AbstractHandlerMapping : [9133031f-8, L:/0:0:0:0:0:0:0:1:8090 - R:/0:0:0:0:0:0:0:1:54137] Mapped to com.bank.manage.customer.controller.CustomerController#getCustomerById(String)
2021-07-19 19:09:49,683 DEBUG [nioEventLoopGroup-3-3] org.springframework.web.reactive.result.HandlerResultHandlerSupport : [9133031f-8, L:/0:0:0:0:0:0:0:1:8090 - R:/0:0:0:0:0:0:0:1:54137] Found 'Content-Type:application/json' in response
2021-07-19 19:09:49,684 DEBUG [nioEventLoopGroup-3-3] org.springframework.web.reactive.result.method.annotation.AbstractMessageWriterResultHandler : [9133031f-8, L:/0:0:0:0:0:0:0:1:8090 - R:/0:0:0:0:0:0:0:1:54137] 0..1 [com.bank.manage.customer.persistence.entity.Customer]
2021-07-19 19:09:49,684 DEBUG [nioEventLoopGroup-3-3] org.springframework.core.log.CompositeLog : [9133031f-8, L:/0:0:0:0:0:0:0:1:8090 - R:/0:0:0:0:0:0:0:1:54137] Encoding [Customer(id=60e231e30d2f326bba123479, firstName=Katy, lastName=Puente, document=34563563, documentTy (truncated)...]
2021-07-19 19:09:49,685 DEBUG [reactor-http-nio-3] org.springframework.core.log.LogFormatUtils : [9133031f-8, L:/0:0:0:0:0:0:0:1:8090 - R:/0:0:0:0:0:0:0:1:54137] Completed 200 OK
2021-07-19 19:10:02,824 DEBUG [DiscoveryClient-CacheRefreshExecutor-0] org.springframework.core.log.CompositeLog : HTTP GET http://localhost:8761/eureka/apps/delta
2021-07-19 19:10:02,825 DEBUG [DiscoveryClient-CacheRefreshExecutor-0] org.springframework.core.log.CompositeLog : Accept=[application/json, application/*+json]
2021-07-19 19:10:02,828 DEBUG [DiscoveryClient-CacheRefreshExecutor-0] org.springframework.core.log.CompositeLog : Response 200 OK
2021-07-19 19:10:02,829 DEBUG [DiscoveryClient-CacheRefreshExecutor-0] org.springframework.core.log.CompositeLog : Reading to [org.springframework.cloud.netflix.eureka.http.EurekaApplications]
2021-07-19 19:10:02,882 DEBUG [DiscoveryClient-HeartbeatExecutor-0] org.springframework.core.log.CompositeLog : HTTP PUT http://localhost:8761/eureka/apps/CUSTOMER_SERVICE/host.docker.internal:customer_service:8090?status=UP&lastDirtyTimestamp=1626739712202
2021-07-19 19:10:02,883 DEBUG [DiscoveryClient-HeartbeatExecutor-0] org.springframework.core.log.CompositeLog : Accept=[application/json, application/*+json]
2021-07-19 19:10:02,909 DEBUG [DiscoveryClient-HeartbeatExecutor-0] org.springframework.core.log.CompositeLog : Response 200 OK
2021-07-19 19:10:32,832 DEBUG [DiscoveryClient-CacheRefreshExecutor-0] org.springframework.core.log.CompositeLog : HTTP GET http://localhost:8761/eureka/apps/delta
2021-07-19 19:10:32,834 DEBUG [DiscoveryClient-CacheRefreshExecutor-0] org.springframework.core.log.CompositeLog : Accept=[application/json, application/*+json]
2021-07-19 19:10:32,874 DEBUG [DiscoveryClient-CacheRefreshExecutor-0] org.springframework.core.log.CompositeLog : Response 200 OK
2021-07-19 19:10:32,876 DEBUG [DiscoveryClient-CacheRefreshExecutor-0] org.springframework.core.log.CompositeLog : Reading to [org.springframework.cloud.netflix.eureka.http.EurekaApplications]
2021-07-19 19:10:32,911 DEBUG [DiscoveryClient-HeartbeatExecutor-0] org.springframework.core.log.CompositeLog : HTTP PUT http://localhost:8761/eureka/apps/CUSTOMER_SERVICE/host.docker.internal:customer_service:8090?status=UP&lastDirtyTimestamp=1626739712202
2021-07-19 19:10:32,912 DEBUG [DiscoveryClient-HeartbeatExecutor-0] org.springframework.core.log.CompositeLog : Accept=[application/json, application/*+json]
2021-07-19 19:10:32,931 DEBUG [DiscoveryClient-HeartbeatExecutor-0] org.springframework.core.log.CompositeLog : Response 200 OK
2021-07-19 19:10:44,100 DEBUG [reactor-http-nio-3] org.springframework.core.log.LogFormatUtils : [9133031f-9, L:/0:0:0:0:0:0:0:1:8090 - R:/0:0:0:0:0:0:0:1:54137] HTTP GET "/customer/60e231e30d2f326bba123479"
2021-07-19 19:10:44,101 DEBUG [reactor-http-nio-3] org.springframework.web.reactive.handler.AbstractHandlerMapping : [9133031f-9, L:/0:0:0:0:0:0:0:1:8090 - R:/0:0:0:0:0:0:0:1:54137] Mapped to com.bank.manage.customer.controller.CustomerController#getCustomerById(String)
2021-07-19 19:10:44,134 DEBUG [nioEventLoopGroup-3-3] org.springframework.web.reactive.result.HandlerResultHandlerSupport : [9133031f-9, L:/0:0:0:0:0:0:0:1:8090 - R:/0:0:0:0:0:0:0:1:54137] Found 'Content-Type:application/json' in response
2021-07-19 19:10:44,135 DEBUG [nioEventLoopGroup-3-3] org.springframework.web.reactive.result.method.annotation.AbstractMessageWriterResultHandler : [9133031f-9, L:/0:0:0:0:0:0:0:1:8090 - R:/0:0:0:0:0:0:0:1:54137] 0..1 [com.bank.manage.customer.persistence.entity.Customer]
2021-07-19 19:10:44,135 DEBUG [nioEventLoopGroup-3-3] org.springframework.core.log.CompositeLog : [9133031f-9, L:/0:0:0:0:0:0:0:1:8090 - R:/0:0:0:0:0:0:0:1:54137] Encoding [Customer(id=60e231e30d2f326bba123479, firstName=Katy, lastName=Puente, document=34563563, documentTy (truncated)...]
2021-07-19 19:10:44,137 DEBUG [reactor-http-nio-3] org.springframework.core.log.LogFormatUtils : [9133031f-9, L:/0:0:0:0:0:0:0:1:8090 - R:/0:0:0:0:0:0:0:1:54137] Completed 200 OK
2021-07-19 19:10:49,655 DEBUG [reactor-http-nio-3] org.springframework.core.log.LogFormatUtils : [9133031f-10, L:/0:0:0:0:0:0:0:1:8090 - R:/0:0:0:0:0:0:0:1:54137] HTTP GET "/customer"
2021-07-19 19:10:49,657 DEBUG [reactor-http-nio-3] org.springframework.web.reactive.handler.AbstractHandlerMapping : [9133031f-10, L:/0:0:0:0:0:0:0:1:8090 - R:/0:0:0:0:0:0:0:1:54137] Mapped to com.bank.manage.customer.controller.CustomerController#getAllCustomers()
2021-07-19 19:10:49,658 INFO [reactor-http-nio-3] com.bank.manage.customer.controller.CustomerController :  EndPoit get by all customers {} 
2021-07-19 19:10:49,658 DEBUG [reactor-http-nio-3] org.springframework.web.reactive.result.HandlerResultHandlerSupport : [9133031f-10, L:/0:0:0:0:0:0:0:1:8090 - R:/0:0:0:0:0:0:0:1:54137] Found 'Content-Type:application/json' in response
2021-07-19 19:10:49,659 DEBUG [reactor-http-nio-3] org.springframework.web.reactive.result.method.annotation.AbstractMessageWriterResultHandler : [9133031f-10, L:/0:0:0:0:0:0:0:1:8090 - R:/0:0:0:0:0:0:0:1:54137] 0..N [com.bank.manage.customer.persistence.entity.Customer]
2021-07-19 19:10:49,663 DEBUG [nioEventLoopGroup-3-3] org.springframework.core.log.CompositeLog : [9133031f-10, L:/0:0:0:0:0:0:0:1:8090 - R:/0:0:0:0:0:0:0:1:54137] Encoding [[Customer(id=60e231e30d2f326bba123479, firstName=Katy, lastName=Puente, document=34563563, documentT (truncated)...]
2021-07-19 19:10:49,709 DEBUG [reactor-http-nio-3] org.springframework.core.log.LogFormatUtils : [9133031f-10, L:/0:0:0:0:0:0:0:1:8090 - R:/0:0:0:0:0:0:0:1:54137] Completed 200 OK
2021-07-19 19:11:02,881 DEBUG [DiscoveryClient-CacheRefreshExecutor-0] org.springframework.core.log.CompositeLog : HTTP GET http://localhost:8761/eureka/apps/delta
2021-07-19 19:11:02,882 DEBUG [DiscoveryClient-CacheRefreshExecutor-0] org.springframework.core.log.CompositeLog : Accept=[application/json, application/*+json]
2021-07-19 19:11:02,925 DEBUG [DiscoveryClient-CacheRefreshExecutor-0] org.springframework.core.log.CompositeLog : Response 200 OK
2021-07-19 19:11:02,926 DEBUG [DiscoveryClient-CacheRefreshExecutor-0] org.springframework.core.log.CompositeLog : Reading to [org.springframework.cloud.netflix.eureka.http.EurekaApplications]
2021-07-19 19:11:02,933 DEBUG [DiscoveryClient-HeartbeatExecutor-0] org.springframework.core.log.CompositeLog : HTTP PUT http://localhost:8761/eureka/apps/CUSTOMER_SERVICE/host.docker.internal:customer_service:8090?status=UP&lastDirtyTimestamp=1626739712202
2021-07-19 19:11:02,933 DEBUG [DiscoveryClient-HeartbeatExecutor-0] org.springframework.core.log.CompositeLog : Accept=[application/json, application/*+json]
2021-07-19 19:11:02,936 DEBUG [DiscoveryClient-HeartbeatExecutor-0] org.springframework.core.log.CompositeLog : Response 200 OK
2021-07-19 19:11:32,928 DEBUG [DiscoveryClient-CacheRefreshExecutor-0] org.springframework.core.log.CompositeLog : HTTP GET http://localhost:8761/eureka/apps/delta
2021-07-19 19:11:32,929 DEBUG [DiscoveryClient-CacheRefreshExecutor-0] org.springframework.core.log.CompositeLog : Accept=[application/json, application/*+json]
2021-07-19 19:11:32,932 DEBUG [DiscoveryClient-CacheRefreshExecutor-0] org.springframework.core.log.CompositeLog : Response 200 OK
2021-07-19 19:11:32,933 DEBUG [DiscoveryClient-CacheRefreshExecutor-0] org.springframework.core.log.CompositeLog : Reading to [org.springframework.cloud.netflix.eureka.http.EurekaApplications]
2021-07-19 19:11:32,937 DEBUG [DiscoveryClient-HeartbeatExecutor-0] org.springframework.core.log.CompositeLog : HTTP PUT http://localhost:8761/eureka/apps/CUSTOMER_SERVICE/host.docker.internal:customer_service:8090?status=UP&lastDirtyTimestamp=1626739712202
2021-07-19 19:11:32,937 DEBUG [DiscoveryClient-HeartbeatExecutor-0] org.springframework.core.log.CompositeLog : Accept=[application/json, application/*+json]
2021-07-19 19:11:32,954 DEBUG [DiscoveryClient-HeartbeatExecutor-0] org.springframework.core.log.CompositeLog : Response 200 OK
2021-07-19 19:11:34,472 INFO [RMI TCP Connection(12)-127.0.0.1] com.netflix.discovery.DiscoveryClient$3 : Saw local status change event StatusChangeEvent [timestamp=1626739894472, current=DOWN, previous=UP]
2021-07-19 19:11:34,473 INFO [DiscoveryClient-InstanceInfoReplicator-0] com.netflix.discovery.DiscoveryClient : DiscoveryClient_CUSTOMER_SERVICE/host.docker.internal:customer_service:8090: registering service...
2021-07-19 19:11:34,474 DEBUG [DiscoveryClient-InstanceInfoReplicator-0] org.springframework.core.log.CompositeLog : HTTP POST http://localhost:8761/eureka/apps/CUSTOMER_SERVICE
2021-07-19 19:11:34,474 DEBUG [DiscoveryClient-InstanceInfoReplicator-0] org.springframework.core.log.CompositeLog : Accept=[application/json, application/*+json]
2021-07-19 19:11:34,475 DEBUG [DiscoveryClient-InstanceInfoReplicator-0] org.springframework.core.log.CompositeLog : Writing [InstanceInfo [instanceId = host.docker.internal:customer_service:8090, appName = CUSTOMER_SERVICE, hostName = host.docker.internal, status = DOWN, ipAddr = 192.168.1.12, port = 8090, securePort = 443, dataCenterInfo = com.netflix.appinfo.MyDataCenterInfo@2db6edfc] as "application/json"
2021-07-19 19:11:34,479 DEBUG [DiscoveryClient-InstanceInfoReplicator-0] org.springframework.core.log.CompositeLog : Response 204 NO_CONTENT
2021-07-19 19:11:34,479 INFO [DiscoveryClient-InstanceInfoReplicator-0] com.netflix.discovery.DiscoveryClient : DiscoveryClient_CUSTOMER_SERVICE/host.docker.internal:customer_service:8090 - registration status: 204
2021-07-19 19:11:34,489 INFO [RMI TCP Connection(12)-127.0.0.1] com.mongodb.diagnostics.logging.SLF4JLogger : Closed connection [connectionId{localValue:3, serverValue:27}] to localhost:27017 because the pool has been closed.
2021-07-19 19:11:38,542 INFO [RMI TCP Connection(12)-127.0.0.1] com.netflix.discovery.DiscoveryClient : Shutting down DiscoveryClient ...
2021-07-19 19:11:41,551 INFO [RMI TCP Connection(12)-127.0.0.1] com.netflix.discovery.DiscoveryClient : Unregistering ...
2021-07-19 19:11:41,556 DEBUG [RMI TCP Connection(12)-127.0.0.1] org.springframework.core.log.CompositeLog : HTTP DELETE http://localhost:8761/eureka/apps/CUSTOMER_SERVICE/host.docker.internal:customer_service:8090
2021-07-19 19:11:41,558 DEBUG [RMI TCP Connection(12)-127.0.0.1] org.springframework.core.log.CompositeLog : Accept=[application/json, application/*+json]
2021-07-19 19:11:41,564 DEBUG [RMI TCP Connection(12)-127.0.0.1] org.springframework.core.log.CompositeLog : Response 200 OK
2021-07-19 19:11:41,566 INFO [RMI TCP Connection(12)-127.0.0.1] com.netflix.discovery.DiscoveryClient : DiscoveryClient_CUSTOMER_SERVICE/host.docker.internal:customer_service:8090 - deregister  status: 200
2021-07-19 19:11:41,571 INFO [RMI TCP Connection(12)-127.0.0.1] com.netflix.discovery.DiscoveryClient : Completed shut down of DiscoveryClient
2021-07-19 19:11:50,716 INFO [background-preinit] org.hibernate.validator.internal.util.Version : HV000001: Hibernate Validator 6.2.0.Final
2021-07-19 19:11:52,360 DEBUG [main] org.springframework.core.log.CompositeLog : HTTP GET http://localhost:8888/customer_service/default/main
2021-07-19 19:11:52,434 DEBUG [main] org.springframework.core.log.CompositeLog : Accept=[application/json, application/*+json]
2021-07-19 19:11:54,242 DEBUG [main] org.springframework.core.log.CompositeLog : Response 200 OK
2021-07-19 19:11:54,244 DEBUG [main] org.springframework.core.log.CompositeLog : Reading to [org.springframework.cloud.config.environment.Environment]
2021-07-19 19:11:54,287 INFO [main] org.springframework.boot.SpringApplication : No active profile set, falling back to default profiles: default
2021-07-19 19:11:56,531 INFO [main] com.mongodb.diagnostics.logging.SLF4JLogger : Cluster created with settings {hosts=[localhost:27017], mode=SINGLE, requiredClusterType=UNKNOWN, serverSelectionTimeout='30000 ms'}
2021-07-19 19:11:57,727 DEBUG [main] org.springframework.web.reactive.result.method.AbstractHandlerMethodMapping : 6 mappings in 'requestMappingHandlerMapping'
2021-07-19 19:11:57,764 DEBUG [main] org.springframework.web.reactive.handler.SimpleUrlHandlerMapping : Patterns [/webjars/**, /**] in 'resourceHandlerMapping'
2021-07-19 19:11:58,207 INFO [cluster-ClusterId{value='60f614cc80c3ca7c9e81e3f0', description='null'}-localhost:27017] com.mongodb.diagnostics.logging.SLF4JLogger : Opened connection [connectionId{localValue:1, serverValue:29}] to localhost:27017
2021-07-19 19:11:58,207 INFO [cluster-rtt-ClusterId{value='60f614cc80c3ca7c9e81e3f0', description='null'}-localhost:27017] com.mongodb.diagnostics.logging.SLF4JLogger : Opened connection [connectionId{localValue:2, serverValue:28}] to localhost:27017
2021-07-19 19:11:58,210 INFO [cluster-ClusterId{value='60f614cc80c3ca7c9e81e3f0', description='null'}-localhost:27017] com.mongodb.diagnostics.logging.SLF4JLogger : Monitor thread successfully connected to server with description ServerDescription{address=localhost:27017, type=STANDALONE, state=CONNECTED, ok=true, minWireVersion=0, maxWireVersion=9, maxDocumentSize=16777216, logicalSessionTimeoutMinutes=30, roundTripTimeNanos=52528000}
2021-07-19 19:12:00,670 DEBUG [main] org.springframework.web.reactive.result.method.annotation.ControllerMethodResolver : ControllerAdvice beans: none
2021-07-19 19:12:00,726 DEBUG [main] org.springframework.web.server.adapter.HttpWebHandlerAdapter : enableLoggingRequestDetails='false': form data and headers will be masked to prevent unsafe logging of potentially sensitive data
2021-07-19 19:12:02,586 INFO [main] com.netflix.discovery.DiscoveryClient : Initializing Eureka in region us-east-1
2021-07-19 19:12:02,593 INFO [main] com.netflix.discovery.shared.resolver.aws.ConfigClusterResolver : Resolving eureka endpoints via configuration
2021-07-19 19:12:02,620 INFO [main] com.netflix.discovery.DiscoveryClient : Disable delta property : false
2021-07-19 19:12:02,620 INFO [main] com.netflix.discovery.DiscoveryClient : Single vip registry refresh property : null
2021-07-19 19:12:02,620 INFO [main] com.netflix.discovery.DiscoveryClient : Force full registry fetch : false
2021-07-19 19:12:02,621 INFO [main] com.netflix.discovery.DiscoveryClient : Application is null : false
2021-07-19 19:12:02,621 INFO [main] com.netflix.discovery.DiscoveryClient : Registered Applications size is zero : true
2021-07-19 19:12:02,621 INFO [main] com.netflix.discovery.DiscoveryClient : Application version is -1: true
2021-07-19 19:12:02,621 INFO [main] com.netflix.discovery.DiscoveryClient : Getting all instance registry info from the eureka server
2021-07-19 19:12:03,648 DEBUG [main] org.springframework.core.log.CompositeLog : HTTP GET http://localhost:8761/eureka/apps/
2021-07-19 19:12:03,698 DEBUG [main] org.springframework.core.log.CompositeLog : Accept=[application/json, application/*+json]
2021-07-19 19:12:03,754 DEBUG [main] org.springframework.core.log.CompositeLog : Response 200 OK
2021-07-19 19:12:03,754 DEBUG [main] org.springframework.core.log.CompositeLog : Reading to [org.springframework.cloud.netflix.eureka.http.EurekaApplications]
2021-07-19 19:12:03,762 INFO [main] com.netflix.discovery.DiscoveryClient : The response status is 200
2021-07-19 19:12:03,765 INFO [main] com.netflix.discovery.DiscoveryClient : Starting heartbeat executor: renew interval is: 30
2021-07-19 19:12:03,768 INFO [main] com.netflix.discovery.InstanceInfoReplicator : InstanceInfoReplicator onDemand update allowed rate per min is 4
2021-07-19 19:12:03,773 INFO [main] com.netflix.discovery.DiscoveryClient : Discovery Client initialized at timestamp 1626739923772 with initial instances count: 2
2021-07-19 19:12:03,783 INFO [main] com.netflix.discovery.DiscoveryClient$3 : Saw local status change event StatusChangeEvent [timestamp=1626739923783, current=UP, previous=STARTING]
2021-07-19 19:12:03,786 INFO [DiscoveryClient-InstanceInfoReplicator-0] com.netflix.discovery.DiscoveryClient : DiscoveryClient_CUSTOMER_SERVICE/host.docker.internal:customer_service:8090: registering service...
2021-07-19 19:12:03,796 DEBUG [DiscoveryClient-InstanceInfoReplicator-0] org.springframework.core.log.CompositeLog : HTTP POST http://localhost:8761/eureka/apps/CUSTOMER_SERVICE
2021-07-19 19:12:03,798 DEBUG [DiscoveryClient-InstanceInfoReplicator-0] org.springframework.core.log.CompositeLog : Accept=[application/json, application/*+json]
2021-07-19 19:12:03,806 DEBUG [DiscoveryClient-InstanceInfoReplicator-0] org.springframework.core.log.CompositeLog : Writing [InstanceInfo [instanceId = host.docker.internal:customer_service:8090, appName = CUSTOMER_SERVICE, hostName = host.docker.internal, status = UP, ipAddr = 192.168.1.12, port = 8090, securePort = 443, dataCenterInfo = com.netflix.appinfo.MyDataCenterInfo@10ae6c01] as "application/json"
2021-07-19 19:12:03,827 DEBUG [DiscoveryClient-InstanceInfoReplicator-0] org.springframework.core.log.CompositeLog : Response 204 NO_CONTENT
2021-07-19 19:12:03,828 INFO [DiscoveryClient-InstanceInfoReplicator-0] com.netflix.discovery.DiscoveryClient : DiscoveryClient_CUSTOMER_SERVICE/host.docker.internal:customer_service:8090 - registration status: 204
2021-07-19 19:12:06,001 INFO [main] org.springframework.boot.StartupInfoLogger : Started Application in 16.908 seconds (JVM running for 18.45)
2021-07-19 19:12:33,767 DEBUG [DiscoveryClient-CacheRefreshExecutor-0] org.springframework.core.log.CompositeLog : HTTP GET http://localhost:8761/eureka/apps/delta
2021-07-19 19:12:33,768 DEBUG [DiscoveryClient-CacheRefreshExecutor-0] org.springframework.core.log.CompositeLog : Accept=[application/json, application/*+json]
2021-07-19 19:12:33,769 DEBUG [DiscoveryClient-HeartbeatExecutor-0] org.springframework.core.log.CompositeLog : HTTP PUT http://localhost:8761/eureka/apps/CUSTOMER_SERVICE/host.docker.internal:customer_service:8090?status=UP&lastDirtyTimestamp=1626739923783
2021-07-19 19:12:33,774 DEBUG [DiscoveryClient-CacheRefreshExecutor-0] org.springframework.core.log.CompositeLog : Response 200 OK
2021-07-19 19:12:33,774 DEBUG [DiscoveryClient-CacheRefreshExecutor-0] org.springframework.core.log.CompositeLog : Reading to [org.springframework.cloud.netflix.eureka.http.EurekaApplications]
2021-07-19 19:12:33,783 DEBUG [DiscoveryClient-HeartbeatExecutor-0] org.springframework.core.log.CompositeLog : Accept=[application/json, application/*+json]
2021-07-19 19:12:33,786 DEBUG [DiscoveryClient-HeartbeatExecutor-0] org.springframework.core.log.CompositeLog : Response 200 OK
2021-07-19 19:13:03,779 DEBUG [DiscoveryClient-CacheRefreshExecutor-0] org.springframework.core.log.CompositeLog : HTTP GET http://localhost:8761/eureka/apps/delta
2021-07-19 19:13:03,780 DEBUG [DiscoveryClient-CacheRefreshExecutor-0] org.springframework.core.log.CompositeLog : Accept=[application/json, application/*+json]
2021-07-19 19:13:03,786 DEBUG [DiscoveryClient-CacheRefreshExecutor-0] org.springframework.core.log.CompositeLog : Response 200 OK
2021-07-19 19:13:03,787 DEBUG [DiscoveryClient-CacheRefreshExecutor-0] org.springframework.core.log.CompositeLog : Reading to [org.springframework.cloud.netflix.eureka.http.EurekaApplications]
2021-07-19 19:13:03,788 DEBUG [DiscoveryClient-HeartbeatExecutor-0] org.springframework.core.log.CompositeLog : HTTP PUT http://localhost:8761/eureka/apps/CUSTOMER_SERVICE/host.docker.internal:customer_service:8090?status=UP&lastDirtyTimestamp=1626739923783
2021-07-19 19:13:03,789 DEBUG [DiscoveryClient-HeartbeatExecutor-0] org.springframework.core.log.CompositeLog : Accept=[application/json, application/*+json]
2021-07-19 19:13:03,795 DEBUG [DiscoveryClient-HeartbeatExecutor-0] org.springframework.core.log.CompositeLog : Response 200 OK
2021-07-19 19:13:15,491 DEBUG [reactor-http-nio-3] org.springframework.core.log.LogFormatUtils : [f153a487-1, L:/0:0:0:0:0:0:0:1:8090 - R:/0:0:0:0:0:0:0:1:57630] HTTP GET "/customer"
2021-07-19 19:13:15,516 DEBUG [reactor-http-nio-3] org.springframework.web.reactive.handler.AbstractHandlerMapping : [f153a487-1, L:/0:0:0:0:0:0:0:1:8090 - R:/0:0:0:0:0:0:0:1:57630] Mapped to com.bank.manage.customer.controller.CustomerController#getAllCustomers()
2021-07-19 19:13:15,532 INFO [reactor-http-nio-3] com.bank.manage.customer.controller.CustomerController :  EndPoit get by all customers {} 
2021-07-19 19:13:15,552 DEBUG [reactor-http-nio-3] org.springframework.web.reactive.result.HandlerResultHandlerSupport : [f153a487-1, L:/0:0:0:0:0:0:0:1:8090 - R:/0:0:0:0:0:0:0:1:57630] Found 'Content-Type:application/json' in response
2021-07-19 19:13:15,553 DEBUG [reactor-http-nio-3] org.springframework.web.reactive.result.method.annotation.AbstractMessageWriterResultHandler : [f153a487-1, L:/0:0:0:0:0:0:0:1:8090 - R:/0:0:0:0:0:0:0:1:57630] 0..N [com.bank.manage.customer.persistence.entity.Customer]
2021-07-19 19:13:15,623 INFO [nioEventLoopGroup-3-3] com.mongodb.diagnostics.logging.SLF4JLogger : Opened connection [connectionId{localValue:3, serverValue:30}] to localhost:27017
2021-07-19 19:13:15,687 DEBUG [nioEventLoopGroup-3-3] org.springframework.core.log.CompositeLog : [f153a487-1, L:/0:0:0:0:0:0:0:1:8090 - R:/0:0:0:0:0:0:0:1:57630] Encoding [[Customer(id=60e231e30d2f326bba123479, firstName=Katy, lastName=Puente, document=34563563, documentT (truncated)...]
2021-07-19 19:13:15,710 DEBUG [reactor-http-nio-3] org.springframework.core.log.LogFormatUtils : [f153a487-1, L:/0:0:0:0:0:0:0:1:8090 - R:/0:0:0:0:0:0:0:1:57630] Completed 200 OK
2021-07-19 19:13:33,793 DEBUG [DiscoveryClient-CacheRefreshExecutor-0] org.springframework.core.log.CompositeLog : HTTP GET http://localhost:8761/eureka/apps/delta
2021-07-19 19:13:33,794 DEBUG [DiscoveryClient-CacheRefreshExecutor-0] org.springframework.core.log.CompositeLog : Accept=[application/json, application/*+json]
2021-07-19 19:13:33,799 DEBUG [DiscoveryClient-HeartbeatExecutor-0] org.springframework.core.log.CompositeLog : HTTP PUT http://localhost:8761/eureka/apps/CUSTOMER_SERVICE/host.docker.internal:customer_service:8090?status=UP&lastDirtyTimestamp=1626739923783
2021-07-19 19:13:33,800 DEBUG [DiscoveryClient-HeartbeatExecutor-0] org.springframework.core.log.CompositeLog : Accept=[application/json, application/*+json]
2021-07-19 19:13:33,804 DEBUG [DiscoveryClient-HeartbeatExecutor-0] org.springframework.core.log.CompositeLog : Response 200 OK
2021-07-19 19:13:33,816 DEBUG [DiscoveryClient-CacheRefreshExecutor-0] org.springframework.core.log.CompositeLog : Response 200 OK
2021-07-19 19:13:33,816 DEBUG [DiscoveryClient-CacheRefreshExecutor-0] org.springframework.core.log.CompositeLog : Reading to [org.springframework.cloud.netflix.eureka.http.EurekaApplications]
2021-07-19 19:13:49,304 DEBUG [reactor-http-nio-3] org.springframework.core.log.LogFormatUtils : [f153a487-2, L:/0:0:0:0:0:0:0:1:8090 - R:/0:0:0:0:0:0:0:1:57630] HTTP GET "/customer/60e231e30d2f326bba123479"
2021-07-19 19:13:49,305 DEBUG [reactor-http-nio-3] org.springframework.web.reactive.handler.AbstractHandlerMapping : [f153a487-2, L:/0:0:0:0:0:0:0:1:8090 - R:/0:0:0:0:0:0:0:1:57630] Mapped to com.bank.manage.customer.controller.CustomerController#getCustomerById(String)
2021-07-19 19:13:49,351 DEBUG [reactor-http-nio-3] org.springframework.core.log.CompositeLog : [f153a487-2, L:/0:0:0:0:0:0:0:1:8090 - R:/0:0:0:0:0:0:0:1:57630] Resolved [UndeclaredThrowableException: null] for HTTP GET /customer/60e231e30d2f326bba123479
2021-07-19 19:13:49,353 ERROR [reactor-http-nio-3] org.springframework.core.log.CompositeLog : [f153a487-2, L:/0:0:0:0:0:0:0:1:8090 - R:/0:0:0:0:0:0:0:1:57630]  500 Server Error for HTTP GET "/customer/60e231e30d2f326bba123479"
java.lang.reflect.UndeclaredThrowableException: null
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:767)
	Suppressed: reactor.core.publisher.FluxOnAssembly$OnAssemblyException: 
Error has been observed at the following site(s):
	|_ checkpoint ⇢ org.springframework.boot.actuate.metrics.web.reactive.server.MetricsWebFilter [DefaultWebFilterChain]
	|_ checkpoint ⇢ HTTP GET "/customer/60e231e30d2f326bba123479" [ExceptionHandlingWebHandler]
Stack trace:
		at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:767)
		at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:97)
		at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
		at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:750)
		at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:692)
		at com.bank.manage.customer.controller.CustomerController$$EnhancerBySpringCGLIB$$c4b192c0.getCustomerById(<generated>)
		at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
		at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
		at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
		at java.lang.reflect.Method.invoke(Method.java:498)
		at org.springframework.web.reactive.result.method.InvocableHandlerMethod.lambda$invoke$0(InvocableHandlerMethod.java:146)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:125)
		at reactor.core.publisher.Operators$MonoSubscriber.complete(Operators.java:1815)
		at reactor.core.publisher.MonoZip$ZipCoordinator.signal(MonoZip.java:251)
		at reactor.core.publisher.MonoZip$ZipInner.onNext(MonoZip.java:336)
		at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.onNext(MonoPeekTerminal.java:180)
		at reactor.core.publisher.FluxDefaultIfEmpty$DefaultIfEmptySubscriber.onNext(FluxDefaultIfEmpty.java:100)
		at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onNext(FluxSwitchIfEmpty.java:73)
		at reactor.core.publisher.Operators$ScalarSubscription.request(Operators.java:2397)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.set(Operators.java:2193)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onSubscribe(Operators.java:2067)
		at reactor.core.publisher.FluxFlatMap.trySubscribeScalarMap(FluxFlatMap.java:192)
		at reactor.core.publisher.MonoFlatMap.subscribeOrReturn(MonoFlatMap.java:53)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4135)
		at reactor.core.publisher.MonoZip.subscribe(MonoZip.java:128)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:64)
		at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:52)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.subscribeNext(MonoIgnoreThen.java:236)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.onComplete(MonoIgnoreThen.java:203)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onComplete(MonoFlatMap.java:181)
		at reactor.core.publisher.Operators.complete(Operators.java:136)
		at reactor.core.publisher.MonoZip.subscribe(MonoZip.java:120)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4150)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.subscribeNext(MonoIgnoreThen.java:255)
		at reactor.core.publisher.MonoIgnoreThen.subscribe(MonoIgnoreThen.java:51)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:64)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:157)
		at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onNext(FluxSwitchIfEmpty.java:73)
		at reactor.core.publisher.MonoNext$NextSubscriber.onNext(MonoNext.java:82)
		at reactor.core.publisher.FluxConcatMap$ConcatMapImmediate.innerNext(FluxConcatMap.java:281)
		at reactor.core.publisher.FluxConcatMap$ConcatMapInner.onNext(FluxConcatMap.java:860)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onNext(FluxMapFuseable.java:127)
		at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.onNext(MonoPeekTerminal.java:180)
		at reactor.core.publisher.Operators$ScalarSubscription.request(Operators.java:2397)
		at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.request(MonoPeekTerminal.java:139)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.request(FluxMapFuseable.java:169)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.set(Operators.java:2193)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onSubscribe(Operators.java:2067)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onSubscribe(FluxMapFuseable.java:96)
		at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.onSubscribe(MonoPeekTerminal.java:152)
		at reactor.core.publisher.MonoJust.subscribe(MonoJust.java:54)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4150)
		at reactor.core.publisher.FluxConcatMap$ConcatMapImmediate.drain(FluxConcatMap.java:448)
		at reactor.core.publisher.FluxConcatMap$ConcatMapImmediate.onSubscribe(FluxConcatMap.java:218)
		at reactor.core.publisher.FluxIterable.subscribe(FluxIterable.java:164)
		at reactor.core.publisher.FluxIterable.subscribe(FluxIterable.java:86)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:64)
		at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:52)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:64)
		at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:52)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:64)
		at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:52)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4150)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.subscribeNext(MonoIgnoreThen.java:255)
		at reactor.core.publisher.MonoIgnoreThen.subscribe(MonoIgnoreThen.java:51)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:64)
		at reactor.netty.http.server.HttpServer$HttpServerHandle.onStateChange(HttpServer.java:915)
		at reactor.netty.ReactorNetty$CompositeConnectionObserver.onStateChange(ReactorNetty.java:654)
		at reactor.netty.transport.ServerTransport$ChildObserver.onStateChange(ServerTransport.java:478)
		at reactor.netty.http.server.HttpServerOperations.onInboundNext(HttpServerOperations.java:526)
		at reactor.netty.channel.ChannelOperationsHandler.channelRead(ChannelOperationsHandler.java:94)
		at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:379)
		at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:365)
		at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:357)
		at reactor.netty.http.server.HttpTrafficHandler.channelRead(HttpTrafficHandler.java:209)
		at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:379)
		at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:365)
		at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:357)
		at io.netty.channel.CombinedChannelDuplexHandler$DelegatingChannelHandlerContext.fireChannelRead(CombinedChannelDuplexHandler.java:436)
		at io.netty.handler.codec.ByteToMessageDecoder.fireChannelRead(ByteToMessageDecoder.java:324)
		at io.netty.handler.codec.ByteToMessageDecoder.fireChannelRead(ByteToMessageDecoder.java:311)
		at io.netty.handler.codec.ByteToMessageDecoder.callDecode(ByteToMessageDecoder.java:432)
		at io.netty.handler.codec.ByteToMessageDecoder.channelRead(ByteToMessageDecoder.java:276)
		at io.netty.channel.CombinedChannelDuplexHandler.channelRead(CombinedChannelDuplexHandler.java:251)
		at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:379)
		at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:365)
		at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:357)
		at io.netty.channel.DefaultChannelPipeline$HeadContext.channelRead(DefaultChannelPipeline.java:1410)
		at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:379)
		at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:365)
		at io.netty.channel.DefaultChannelPipeline.fireChannelRead(DefaultChannelPipeline.java:919)
		at io.netty.channel.nio.AbstractNioByteChannel$NioByteUnsafe.read(AbstractNioByteChannel.java:166)
		at io.netty.channel.nio.NioEventLoop.processSelectedKey(NioEventLoop.java:719)
		at io.netty.channel.nio.NioEventLoop.processSelectedKeysOptimized(NioEventLoop.java:655)
		at io.netty.channel.nio.NioEventLoop.processSelectedKeys(NioEventLoop.java:581)
		at io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:493)
		at io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:989)
		at io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)
		at io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)
		at java.lang.Thread.run(Thread.java:748)
Caused by: java.lang.NoSuchMethodException: class reactor.core.publisher.Mono class com.bank.manage.customer.controller.CustomerController.getCustomerByIdFallBackMethod(class java.lang.String,class java.lang.Throwable)
	at io.github.resilience4j.fallback.FallbackMethod.create(FallbackMethod.java:92)
	at io.github.resilience4j.circuitbreaker.configure.CircuitBreakerAspect.circuitBreakerAroundAdvice(CircuitBreakerAspect.java:115)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethodWithGivenArgs(AbstractAspectJAdvice.java:634)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethod(AbstractAspectJAdvice.java:624)
	at org.springframework.aop.aspectj.AspectJAroundAdvice.invoke(AspectJAroundAdvice.java:72)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:175)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:750)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:97)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:750)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:692)
	at com.bank.manage.customer.controller.CustomerController$$EnhancerBySpringCGLIB$$c4b192c0.getCustomerById(<generated>)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.web.reactive.result.method.InvocableHandlerMethod.lambda$invoke$0(InvocableHandlerMethod.java:146)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:125)
	at reactor.core.publisher.Operators$MonoSubscriber.complete(Operators.java:1815)
	at reactor.core.publisher.MonoZip$ZipCoordinator.signal(MonoZip.java:251)
	at reactor.core.publisher.MonoZip$ZipInner.onNext(MonoZip.java:336)
	at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.onNext(MonoPeekTerminal.java:180)
	at reactor.core.publisher.FluxDefaultIfEmpty$DefaultIfEmptySubscriber.onNext(FluxDefaultIfEmpty.java:100)
	at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onNext(FluxSwitchIfEmpty.java:73)
	at reactor.core.publisher.Operators$ScalarSubscription.request(Operators.java:2397)
	at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.set(Operators.java:2193)
	at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onSubscribe(Operators.java:2067)
	at reactor.core.publisher.FluxFlatMap.trySubscribeScalarMap(FluxFlatMap.java:192)
	at reactor.core.publisher.MonoFlatMap.subscribeOrReturn(MonoFlatMap.java:53)
	at reactor.core.publisher.Mono.subscribe(Mono.java:4135)
	at reactor.core.publisher.MonoZip.subscribe(MonoZip.java:128)
	at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:64)
	at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:52)
	at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.subscribeNext(MonoIgnoreThen.java:236)
	at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.onComplete(MonoIgnoreThen.java:203)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.onComplete(MonoFlatMap.java:181)
	at reactor.core.publisher.Operators.complete(Operators.java:136)
	at reactor.core.publisher.MonoZip.subscribe(MonoZip.java:120)
	at reactor.core.publisher.Mono.subscribe(Mono.java:4150)
	at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.subscribeNext(MonoIgnoreThen.java:255)
	at reactor.core.publisher.MonoIgnoreThen.subscribe(MonoIgnoreThen.java:51)
	at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:64)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:157)
	at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onNext(FluxSwitchIfEmpty.java:73)
	at reactor.core.publisher.MonoNext$NextSubscriber.onNext(MonoNext.java:82)
	at reactor.core.publisher.FluxConcatMap$ConcatMapImmediate.innerNext(FluxConcatMap.java:281)
	at reactor.core.publisher.FluxConcatMap$ConcatMapInner.onNext(FluxConcatMap.java:860)
	at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onNext(FluxMapFuseable.java:127)
	at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.onNext(MonoPeekTerminal.java:180)
	at reactor.core.publisher.Operators$ScalarSubscription.request(Operators.java:2397)
	at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.request(MonoPeekTerminal.java:139)
	at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.request(FluxMapFuseable.java:169)
	at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.set(Operators.java:2193)
	at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onSubscribe(Operators.java:2067)
	at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onSubscribe(FluxMapFuseable.java:96)
	at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.onSubscribe(MonoPeekTerminal.java:152)
	at reactor.core.publisher.MonoJust.subscribe(MonoJust.java:54)
	at reactor.core.publisher.Mono.subscribe(Mono.java:4150)
	at reactor.core.publisher.FluxConcatMap$ConcatMapImmediate.drain(FluxConcatMap.java:448)
	at reactor.core.publisher.FluxConcatMap$ConcatMapImmediate.onSubscribe(FluxConcatMap.java:218)
	at reactor.core.publisher.FluxIterable.subscribe(FluxIterable.java:164)
	at reactor.core.publisher.FluxIterable.subscribe(FluxIterable.java:86)
	at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:64)
	at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:52)
	at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:64)
	at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:52)
	at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:64)
	at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:52)
	at reactor.core.publisher.Mono.subscribe(Mono.java:4150)
	at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.subscribeNext(MonoIgnoreThen.java:255)
	at reactor.core.publisher.MonoIgnoreThen.subscribe(MonoIgnoreThen.java:51)
	at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:64)
	at reactor.netty.http.server.HttpServer$HttpServerHandle.onStateChange(HttpServer.java:915)
	at reactor.netty.ReactorNetty$CompositeConnectionObserver.onStateChange(ReactorNetty.java:654)
	at reactor.netty.transport.ServerTransport$ChildObserver.onStateChange(ServerTransport.java:478)
	at reactor.netty.http.server.HttpServerOperations.onInboundNext(HttpServerOperations.java:526)
	at reactor.netty.channel.ChannelOperationsHandler.channelRead(ChannelOperationsHandler.java:94)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:379)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:365)
	at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:357)
	at reactor.netty.http.server.HttpTrafficHandler.channelRead(HttpTrafficHandler.java:209)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:379)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:365)
	at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:357)
	at io.netty.channel.CombinedChannelDuplexHandler$DelegatingChannelHandlerContext.fireChannelRead(CombinedChannelDuplexHandler.java:436)
	at io.netty.handler.codec.ByteToMessageDecoder.fireChannelRead(ByteToMessageDecoder.java:324)
	at io.netty.handler.codec.ByteToMessageDecoder.fireChannelRead(ByteToMessageDecoder.java:311)
	at io.netty.handler.codec.ByteToMessageDecoder.callDecode(ByteToMessageDecoder.java:432)
	at io.netty.handler.codec.ByteToMessageDecoder.channelRead(ByteToMessageDecoder.java:276)
	at io.netty.channel.CombinedChannelDuplexHandler.channelRead(CombinedChannelDuplexHandler.java:251)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:379)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:365)
	at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:357)
	at io.netty.channel.DefaultChannelPipeline$HeadContext.channelRead(DefaultChannelPipeline.java:1410)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:379)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:365)
	at io.netty.channel.DefaultChannelPipeline.fireChannelRead(DefaultChannelPipeline.java:919)
	at io.netty.channel.nio.AbstractNioByteChannel$NioByteUnsafe.read(AbstractNioByteChannel.java:166)
	at io.netty.channel.nio.NioEventLoop.processSelectedKey(NioEventLoop.java:719)
	at io.netty.channel.nio.NioEventLoop.processSelectedKeysOptimized(NioEventLoop.java:655)
	at io.netty.channel.nio.NioEventLoop.processSelectedKeys(NioEventLoop.java:581)
	at io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:493)
	at io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:989)
	at io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)
	at io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)
	at java.lang.Thread.run(Thread.java:748)
2021-07-19 19:13:49,362 DEBUG [reactor-http-nio-3] org.springframework.core.log.CompositeLog : [f153a487-2, L:/0:0:0:0:0:0:0:1:8090 - R:/0:0:0:0:0:0:0:1:57630] Encoding [{timestamp=Mon Jul 19 19:13:49 COT 2021, path=/customer/60e231e30d2f326bba123479, status=500, error= (truncated)...]
2021-07-19 19:13:49,370 DEBUG [reactor-http-nio-3] org.springframework.core.log.LogFormatUtils : [f153a487-2, L:/0:0:0:0:0:0:0:1:8090 - R:/0:0:0:0:0:0:0:1:57630] Completed 500 INTERNAL_SERVER_ERROR
2021-07-19 19:14:03,807 DEBUG [DiscoveryClient-HeartbeatExecutor-0] org.springframework.core.log.CompositeLog : HTTP PUT http://localhost:8761/eureka/apps/CUSTOMER_SERVICE/host.docker.internal:customer_service:8090?status=UP&lastDirtyTimestamp=1626739923783
2021-07-19 19:14:03,809 DEBUG [DiscoveryClient-HeartbeatExecutor-0] org.springframework.core.log.CompositeLog : Accept=[application/json, application/*+json]
2021-07-19 19:14:03,817 DEBUG [DiscoveryClient-HeartbeatExecutor-0] org.springframework.core.log.CompositeLog : Response 200 OK
2021-07-19 19:14:03,818 DEBUG [DiscoveryClient-CacheRefreshExecutor-0] org.springframework.core.log.CompositeLog : HTTP GET http://localhost:8761/eureka/apps/delta
2021-07-19 19:14:03,818 DEBUG [DiscoveryClient-CacheRefreshExecutor-0] org.springframework.core.log.CompositeLog : Accept=[application/json, application/*+json]
2021-07-19 19:14:03,822 DEBUG [DiscoveryClient-CacheRefreshExecutor-0] org.springframework.core.log.CompositeLog : Response 200 OK
2021-07-19 19:14:03,823 DEBUG [DiscoveryClient-CacheRefreshExecutor-0] org.springframework.core.log.CompositeLog : Reading to [org.springframework.cloud.netflix.eureka.http.EurekaApplications]
2021-07-19 19:14:33,820 DEBUG [DiscoveryClient-HeartbeatExecutor-0] org.springframework.core.log.CompositeLog : HTTP PUT http://localhost:8761/eureka/apps/CUSTOMER_SERVICE/host.docker.internal:customer_service:8090?status=UP&lastDirtyTimestamp=1626739923783
2021-07-19 19:14:33,821 DEBUG [DiscoveryClient-HeartbeatExecutor-0] org.springframework.core.log.CompositeLog : Accept=[application/json, application/*+json]
2021-07-19 19:14:33,824 DEBUG [DiscoveryClient-HeartbeatExecutor-0] org.springframework.core.log.CompositeLog : Response 200 OK
2021-07-19 19:14:33,826 DEBUG [DiscoveryClient-CacheRefreshExecutor-0] org.springframework.core.log.CompositeLog : HTTP GET http://localhost:8761/eureka/apps/delta
2021-07-19 19:14:33,826 DEBUG [DiscoveryClient-CacheRefreshExecutor-0] org.springframework.core.log.CompositeLog : Accept=[application/json, application/*+json]
2021-07-19 19:14:33,831 DEBUG [DiscoveryClient-CacheRefreshExecutor-0] org.springframework.core.log.CompositeLog : Response 200 OK
2021-07-19 19:14:33,831 DEBUG [DiscoveryClient-CacheRefreshExecutor-0] org.springframework.core.log.CompositeLog : Reading to [org.springframework.cloud.netflix.eureka.http.EurekaApplications]
2021-07-19 19:14:49,967 DEBUG [reactor-http-nio-3] org.springframework.core.log.LogFormatUtils : [f153a487-3, L:/0:0:0:0:0:0:0:1:8090 - R:/0:0:0:0:0:0:0:1:57630] HTTP GET "/customer/60e231e30d2f326bba123479"
2021-07-19 19:14:49,968 DEBUG [reactor-http-nio-3] org.springframework.web.reactive.handler.AbstractHandlerMapping : [f153a487-3, L:/0:0:0:0:0:0:0:1:8090 - R:/0:0:0:0:0:0:0:1:57630] Mapped to com.bank.manage.customer.controller.CustomerController#getCustomerById(String)
2021-07-19 19:14:49,969 DEBUG [reactor-http-nio-3] org.springframework.core.log.CompositeLog : [f153a487-3, L:/0:0:0:0:0:0:0:1:8090 - R:/0:0:0:0:0:0:0:1:57630] Resolved [UndeclaredThrowableException: null] for HTTP GET /customer/60e231e30d2f326bba123479
2021-07-19 19:14:49,970 ERROR [reactor-http-nio-3] org.springframework.core.log.CompositeLog : [f153a487-3, L:/0:0:0:0:0:0:0:1:8090 - R:/0:0:0:0:0:0:0:1:57630]  500 Server Error for HTTP GET "/customer/60e231e30d2f326bba123479"
java.lang.reflect.UndeclaredThrowableException: null
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:767)
	Suppressed: reactor.core.publisher.FluxOnAssembly$OnAssemblyException: 
Error has been observed at the following site(s):
	|_ checkpoint ⇢ org.springframework.boot.actuate.metrics.web.reactive.server.MetricsWebFilter [DefaultWebFilterChain]
	|_ checkpoint ⇢ HTTP GET "/customer/60e231e30d2f326bba123479" [ExceptionHandlingWebHandler]
Stack trace:
		at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:767)
		at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:97)
		at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
		at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:750)
		at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:692)
		at com.bank.manage.customer.controller.CustomerController$$EnhancerBySpringCGLIB$$c4b192c0.getCustomerById(<generated>)
		at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
		at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
		at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
		at java.lang.reflect.Method.invoke(Method.java:498)
		at org.springframework.web.reactive.result.method.InvocableHandlerMethod.lambda$invoke$0(InvocableHandlerMethod.java:146)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:125)
		at reactor.core.publisher.Operators$MonoSubscriber.complete(Operators.java:1815)
		at reactor.core.publisher.MonoZip$ZipCoordinator.signal(MonoZip.java:251)
		at reactor.core.publisher.MonoZip$ZipInner.onNext(MonoZip.java:336)
		at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.onNext(MonoPeekTerminal.java:180)
		at reactor.core.publisher.FluxDefaultIfEmpty$DefaultIfEmptySubscriber.onNext(FluxDefaultIfEmpty.java:100)
		at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onNext(FluxSwitchIfEmpty.java:73)
		at reactor.core.publisher.Operators$ScalarSubscription.request(Operators.java:2397)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.set(Operators.java:2193)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onSubscribe(Operators.java:2067)
		at reactor.core.publisher.FluxFlatMap.trySubscribeScalarMap(FluxFlatMap.java:192)
		at reactor.core.publisher.MonoFlatMap.subscribeOrReturn(MonoFlatMap.java:53)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4135)
		at reactor.core.publisher.MonoZip.subscribe(MonoZip.java:128)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:64)
		at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:52)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.subscribeNext(MonoIgnoreThen.java:236)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.onComplete(MonoIgnoreThen.java:203)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onComplete(MonoFlatMap.java:181)
		at reactor.core.publisher.Operators.complete(Operators.java:136)
		at reactor.core.publisher.MonoZip.subscribe(MonoZip.java:120)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4150)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.subscribeNext(MonoIgnoreThen.java:255)
		at reactor.core.publisher.MonoIgnoreThen.subscribe(MonoIgnoreThen.java:51)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:64)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:157)
		at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onNext(FluxSwitchIfEmpty.java:73)
		at reactor.core.publisher.MonoNext$NextSubscriber.onNext(MonoNext.java:82)
		at reactor.core.publisher.FluxConcatMap$ConcatMapImmediate.innerNext(FluxConcatMap.java:281)
		at reactor.core.publisher.FluxConcatMap$ConcatMapInner.onNext(FluxConcatMap.java:860)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onNext(FluxMapFuseable.java:127)
		at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.onNext(MonoPeekTerminal.java:180)
		at reactor.core.publisher.Operators$ScalarSubscription.request(Operators.java:2397)
		at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.request(MonoPeekTerminal.java:139)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.request(FluxMapFuseable.java:169)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.set(Operators.java:2193)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onSubscribe(Operators.java:2067)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onSubscribe(FluxMapFuseable.java:96)
		at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.onSubscribe(MonoPeekTerminal.java:152)
		at reactor.core.publisher.MonoJust.subscribe(MonoJust.java:54)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4150)
		at reactor.core.publisher.FluxConcatMap$ConcatMapImmediate.drain(FluxConcatMap.java:448)
		at reactor.core.publisher.FluxConcatMap$ConcatMapImmediate.onSubscribe(FluxConcatMap.java:218)
		at reactor.core.publisher.FluxIterable.subscribe(FluxIterable.java:164)
		at reactor.core.publisher.FluxIterable.subscribe(FluxIterable.java:86)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:64)
		at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:52)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:64)
		at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:52)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:64)
		at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:52)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4150)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.subscribeNext(MonoIgnoreThen.java:255)
		at reactor.core.publisher.MonoIgnoreThen.subscribe(MonoIgnoreThen.java:51)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:64)
		at reactor.netty.http.server.HttpServer$HttpServerHandle.onStateChange(HttpServer.java:915)
		at reactor.netty.ReactorNetty$CompositeConnectionObserver.onStateChange(ReactorNetty.java:654)
		at reactor.netty.transport.ServerTransport$ChildObserver.onStateChange(ServerTransport.java:478)
		at reactor.netty.http.server.HttpServerOperations.onInboundNext(HttpServerOperations.java:526)
		at reactor.netty.channel.ChannelOperationsHandler.channelRead(ChannelOperationsHandler.java:94)
		at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:379)
		at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:365)
		at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:357)
		at reactor.netty.http.server.HttpTrafficHandler.channelRead(HttpTrafficHandler.java:209)
		at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:379)
		at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:365)
		at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:357)
		at io.netty.channel.CombinedChannelDuplexHandler$DelegatingChannelHandlerContext.fireChannelRead(CombinedChannelDuplexHandler.java:436)
		at io.netty.handler.codec.ByteToMessageDecoder.fireChannelRead(ByteToMessageDecoder.java:324)
		at io.netty.handler.codec.ByteToMessageDecoder.fireChannelRead(ByteToMessageDecoder.java:311)
		at io.netty.handler.codec.ByteToMessageDecoder.callDecode(ByteToMessageDecoder.java:432)
		at io.netty.handler.codec.ByteToMessageDecoder.channelRead(ByteToMessageDecoder.java:276)
		at io.netty.channel.CombinedChannelDuplexHandler.channelRead(CombinedChannelDuplexHandler.java:251)
		at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:379)
		at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:365)
		at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:357)
		at io.netty.channel.DefaultChannelPipeline$HeadContext.channelRead(DefaultChannelPipeline.java:1410)
		at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:379)
		at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:365)
		at io.netty.channel.DefaultChannelPipeline.fireChannelRead(DefaultChannelPipeline.java:919)
		at io.netty.channel.nio.AbstractNioByteChannel$NioByteUnsafe.read(AbstractNioByteChannel.java:166)
		at io.netty.channel.nio.NioEventLoop.processSelectedKey(NioEventLoop.java:719)
		at io.netty.channel.nio.NioEventLoop.processSelectedKeysOptimized(NioEventLoop.java:655)
		at io.netty.channel.nio.NioEventLoop.processSelectedKeys(NioEventLoop.java:581)
		at io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:493)
		at io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:989)
		at io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)
		at io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)
		at java.lang.Thread.run(Thread.java:748)
Caused by: java.lang.NoSuchMethodException: class reactor.core.publisher.Mono class com.bank.manage.customer.controller.CustomerController.getCustomerByIdFallBackMethod(class java.lang.String,class java.lang.Throwable)
	at io.github.resilience4j.fallback.FallbackMethod.create(FallbackMethod.java:92)
	at io.github.resilience4j.circuitbreaker.configure.CircuitBreakerAspect.circuitBreakerAroundAdvice(CircuitBreakerAspect.java:115)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethodWithGivenArgs(AbstractAspectJAdvice.java:634)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethod(AbstractAspectJAdvice.java:624)
	at org.springframework.aop.aspectj.AspectJAroundAdvice.invoke(AspectJAroundAdvice.java:72)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:175)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:750)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:97)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:750)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:692)
	at com.bank.manage.customer.controller.CustomerController$$EnhancerBySpringCGLIB$$c4b192c0.getCustomerById(<generated>)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.web.reactive.result.method.InvocableHandlerMethod.lambda$invoke$0(InvocableHandlerMethod.java:146)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:125)
	at reactor.core.publisher.Operators$MonoSubscriber.complete(Operators.java:1815)
	at reactor.core.publisher.MonoZip$ZipCoordinator.signal(MonoZip.java:251)
	at reactor.core.publisher.MonoZip$ZipInner.onNext(MonoZip.java:336)
	at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.onNext(MonoPeekTerminal.java:180)
	at reactor.core.publisher.FluxDefaultIfEmpty$DefaultIfEmptySubscriber.onNext(FluxDefaultIfEmpty.java:100)
	at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onNext(FluxSwitchIfEmpty.java:73)
	at reactor.core.publisher.Operators$ScalarSubscription.request(Operators.java:2397)
	at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.set(Operators.java:2193)
	at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onSubscribe(Operators.java:2067)
	at reactor.core.publisher.FluxFlatMap.trySubscribeScalarMap(FluxFlatMap.java:192)
	at reactor.core.publisher.MonoFlatMap.subscribeOrReturn(MonoFlatMap.java:53)
	at reactor.core.publisher.Mono.subscribe(Mono.java:4135)
	at reactor.core.publisher.MonoZip.subscribe(MonoZip.java:128)
	at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:64)
	at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:52)
	at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.subscribeNext(MonoIgnoreThen.java:236)
	at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.onComplete(MonoIgnoreThen.java:203)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.onComplete(MonoFlatMap.java:181)
	at reactor.core.publisher.Operators.complete(Operators.java:136)
	at reactor.core.publisher.MonoZip.subscribe(MonoZip.java:120)
	at reactor.core.publisher.Mono.subscribe(Mono.java:4150)
	at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.subscribeNext(MonoIgnoreThen.java:255)
	at reactor.core.publisher.MonoIgnoreThen.subscribe(MonoIgnoreThen.java:51)
	at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:64)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:157)
	at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onNext(FluxSwitchIfEmpty.java:73)
	at reactor.core.publisher.MonoNext$NextSubscriber.onNext(MonoNext.java:82)
	at reactor.core.publisher.FluxConcatMap$ConcatMapImmediate.innerNext(FluxConcatMap.java:281)
	at reactor.core.publisher.FluxConcatMap$ConcatMapInner.onNext(FluxConcatMap.java:860)
	at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onNext(FluxMapFuseable.java:127)
	at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.onNext(MonoPeekTerminal.java:180)
	at reactor.core.publisher.Operators$ScalarSubscription.request(Operators.java:2397)
	at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.request(MonoPeekTerminal.java:139)
	at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.request(FluxMapFuseable.java:169)
	at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.set(Operators.java:2193)
	at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onSubscribe(Operators.java:2067)
	at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onSubscribe(FluxMapFuseable.java:96)
	at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.onSubscribe(MonoPeekTerminal.java:152)
	at reactor.core.publisher.MonoJust.subscribe(MonoJust.java:54)
	at reactor.core.publisher.Mono.subscribe(Mono.java:4150)
	at reactor.core.publisher.FluxConcatMap$ConcatMapImmediate.drain(FluxConcatMap.java:448)
	at reactor.core.publisher.FluxConcatMap$ConcatMapImmediate.onSubscribe(FluxConcatMap.java:218)
	at reactor.core.publisher.FluxIterable.subscribe(FluxIterable.java:164)
	at reactor.core.publisher.FluxIterable.subscribe(FluxIterable.java:86)
	at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:64)
	at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:52)
	at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:64)
	at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:52)
	at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:64)
	at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:52)
	at reactor.core.publisher.Mono.subscribe(Mono.java:4150)
	at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.subscribeNext(MonoIgnoreThen.java:255)
	at reactor.core.publisher.MonoIgnoreThen.subscribe(MonoIgnoreThen.java:51)
	at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:64)
	at reactor.netty.http.server.HttpServer$HttpServerHandle.onStateChange(HttpServer.java:915)
	at reactor.netty.ReactorNetty$CompositeConnectionObserver.onStateChange(ReactorNetty.java:654)
	at reactor.netty.transport.ServerTransport$ChildObserver.onStateChange(ServerTransport.java:478)
	at reactor.netty.http.server.HttpServerOperations.onInboundNext(HttpServerOperations.java:526)
	at reactor.netty.channel.ChannelOperationsHandler.channelRead(ChannelOperationsHandler.java:94)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:379)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:365)
	at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:357)
	at reactor.netty.http.server.HttpTrafficHandler.channelRead(HttpTrafficHandler.java:209)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:379)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:365)
	at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:357)
	at io.netty.channel.CombinedChannelDuplexHandler$DelegatingChannelHandlerContext.fireChannelRead(CombinedChannelDuplexHandler.java:436)
	at io.netty.handler.codec.ByteToMessageDecoder.fireChannelRead(ByteToMessageDecoder.java:324)
	at io.netty.handler.codec.ByteToMessageDecoder.fireChannelRead(ByteToMessageDecoder.java:311)
	at io.netty.handler.codec.ByteToMessageDecoder.callDecode(ByteToMessageDecoder.java:432)
	at io.netty.handler.codec.ByteToMessageDecoder.channelRead(ByteToMessageDecoder.java:276)
	at io.netty.channel.CombinedChannelDuplexHandler.channelRead(CombinedChannelDuplexHandler.java:251)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:379)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:365)
	at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:357)
	at io.netty.channel.DefaultChannelPipeline$HeadContext.channelRead(DefaultChannelPipeline.java:1410)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:379)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:365)
	at io.netty.channel.DefaultChannelPipeline.fireChannelRead(DefaultChannelPipeline.java:919)
	at io.netty.channel.nio.AbstractNioByteChannel$NioByteUnsafe.read(AbstractNioByteChannel.java:166)
	at io.netty.channel.nio.NioEventLoop.processSelectedKey(NioEventLoop.java:719)
	at io.netty.channel.nio.NioEventLoop.processSelectedKeysOptimized(NioEventLoop.java:655)
	at io.netty.channel.nio.NioEventLoop.processSelectedKeys(NioEventLoop.java:581)
	at io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:493)
	at io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:989)
	at io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)
	at io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)
	at java.lang.Thread.run(Thread.java:748)
2021-07-19 19:14:49,972 DEBUG [reactor-http-nio-3] org.springframework.core.log.CompositeLog : [f153a487-3, L:/0:0:0:0:0:0:0:1:8090 - R:/0:0:0:0:0:0:0:1:57630] Encoding [{timestamp=Mon Jul 19 19:14:49 COT 2021, path=/customer/60e231e30d2f326bba123479, status=500, error= (truncated)...]
2021-07-19 19:14:49,973 DEBUG [reactor-http-nio-3] org.springframework.core.log.LogFormatUtils : [f153a487-3, L:/0:0:0:0:0:0:0:1:8090 - R:/0:0:0:0:0:0:0:1:57630] Completed 500 INTERNAL_SERVER_ERROR
2021-07-19 19:15:03,826 DEBUG [DiscoveryClient-HeartbeatExecutor-0] org.springframework.core.log.CompositeLog : HTTP PUT http://localhost:8761/eureka/apps/CUSTOMER_SERVICE/host.docker.internal:customer_service:8090?status=UP&lastDirtyTimestamp=1626739923783
2021-07-19 19:15:03,827 DEBUG [DiscoveryClient-HeartbeatExecutor-0] org.springframework.core.log.CompositeLog : Accept=[application/json, application/*+json]
2021-07-19 19:15:03,833 DEBUG [DiscoveryClient-CacheRefreshExecutor-0] org.springframework.core.log.CompositeLog : HTTP GET http://localhost:8761/eureka/apps/delta
2021-07-19 19:15:03,834 DEBUG [DiscoveryClient-CacheRefreshExecutor-0] org.springframework.core.log.CompositeLog : Accept=[application/json, application/*+json]
2021-07-19 19:15:03,846 DEBUG [DiscoveryClient-HeartbeatExecutor-0] org.springframework.core.log.CompositeLog : Response 200 OK
2021-07-19 19:15:03,866 DEBUG [DiscoveryClient-CacheRefreshExecutor-0] org.springframework.core.log.CompositeLog : Response 200 OK
2021-07-19 19:15:03,867 DEBUG [DiscoveryClient-CacheRefreshExecutor-0] org.springframework.core.log.CompositeLog : Reading to [org.springframework.cloud.netflix.eureka.http.EurekaApplications]
2021-07-19 19:15:33,849 DEBUG [DiscoveryClient-HeartbeatExecutor-0] org.springframework.core.log.CompositeLog : HTTP PUT http://localhost:8761/eureka/apps/CUSTOMER_SERVICE/host.docker.internal:customer_service:8090?status=UP&lastDirtyTimestamp=1626739923783
2021-07-19 19:15:33,850 DEBUG [DiscoveryClient-HeartbeatExecutor-0] org.springframework.core.log.CompositeLog : Accept=[application/json, application/*+json]
2021-07-19 19:15:33,869 DEBUG [DiscoveryClient-CacheRefreshExecutor-0] org.springframework.core.log.CompositeLog : HTTP GET http://localhost:8761/eureka/apps/delta
2021-07-19 19:15:33,870 DEBUG [DiscoveryClient-CacheRefreshExecutor-0] org.springframework.core.log.CompositeLog : Accept=[application/json, application/*+json]
2021-07-19 19:15:33,894 DEBUG [DiscoveryClient-HeartbeatExecutor-0] org.springframework.core.log.CompositeLog : Response 200 OK
2021-07-19 19:15:34,006 DEBUG [DiscoveryClient-CacheRefreshExecutor-0] org.springframework.core.log.CompositeLog : Response 200 OK
2021-07-19 19:15:34,006 DEBUG [DiscoveryClient-CacheRefreshExecutor-0] org.springframework.core.log.CompositeLog : Reading to [org.springframework.cloud.netflix.eureka.http.EurekaApplications]
2021-07-19 19:15:38,237 INFO [RMI TCP Connection(12)-127.0.0.1] com.netflix.discovery.DiscoveryClient$3 : Saw local status change event StatusChangeEvent [timestamp=1626740138237, current=DOWN, previous=UP]
2021-07-19 19:15:38,238 INFO [DiscoveryClient-InstanceInfoReplicator-0] com.netflix.discovery.DiscoveryClient : DiscoveryClient_CUSTOMER_SERVICE/host.docker.internal:customer_service:8090: registering service...
2021-07-19 19:15:38,238 DEBUG [DiscoveryClient-InstanceInfoReplicator-0] org.springframework.core.log.CompositeLog : HTTP POST http://localhost:8761/eureka/apps/CUSTOMER_SERVICE
2021-07-19 19:15:38,239 DEBUG [DiscoveryClient-InstanceInfoReplicator-0] org.springframework.core.log.CompositeLog : Accept=[application/json, application/*+json]
2021-07-19 19:15:38,239 DEBUG [DiscoveryClient-InstanceInfoReplicator-0] org.springframework.core.log.CompositeLog : Writing [InstanceInfo [instanceId = host.docker.internal:customer_service:8090, appName = CUSTOMER_SERVICE, hostName = host.docker.internal, status = DOWN, ipAddr = 192.168.1.12, port = 8090, securePort = 443, dataCenterInfo = com.netflix.appinfo.MyDataCenterInfo@10ae6c01] as "application/json"
2021-07-19 19:15:38,253 INFO [RMI TCP Connection(12)-127.0.0.1] com.mongodb.diagnostics.logging.SLF4JLogger : Closed connection [connectionId{localValue:3, serverValue:30}] to localhost:27017 because the pool has been closed.
2021-07-19 19:15:38,604 DEBUG [DiscoveryClient-InstanceInfoReplicator-0] org.springframework.core.log.CompositeLog : Response 204 NO_CONTENT
2021-07-19 19:15:38,605 INFO [DiscoveryClient-InstanceInfoReplicator-0] com.netflix.discovery.DiscoveryClient : DiscoveryClient_CUSTOMER_SERVICE/host.docker.internal:customer_service:8090 - registration status: 204
2021-07-19 19:15:42,294 INFO [RMI TCP Connection(12)-127.0.0.1] com.netflix.discovery.DiscoveryClient : Shutting down DiscoveryClient ...
2021-07-19 19:15:45,302 INFO [RMI TCP Connection(12)-127.0.0.1] com.netflix.discovery.DiscoveryClient : Unregistering ...
2021-07-19 19:15:45,306 DEBUG [RMI TCP Connection(12)-127.0.0.1] org.springframework.core.log.CompositeLog : HTTP DELETE http://localhost:8761/eureka/apps/CUSTOMER_SERVICE/host.docker.internal:customer_service:8090
2021-07-19 19:15:45,307 DEBUG [RMI TCP Connection(12)-127.0.0.1] org.springframework.core.log.CompositeLog : Accept=[application/json, application/*+json]
2021-07-19 19:15:45,336 DEBUG [RMI TCP Connection(12)-127.0.0.1] org.springframework.core.log.CompositeLog : Response 200 OK
2021-07-19 19:15:45,337 INFO [RMI TCP Connection(12)-127.0.0.1] com.netflix.discovery.DiscoveryClient : DiscoveryClient_CUSTOMER_SERVICE/host.docker.internal:customer_service:8090 - deregister  status: 200
2021-07-19 19:15:45,341 INFO [RMI TCP Connection(12)-127.0.0.1] com.netflix.discovery.DiscoveryClient : Completed shut down of DiscoveryClient
2021-07-19 19:15:54,778 INFO [background-preinit] org.hibernate.validator.internal.util.Version : HV000001: Hibernate Validator 6.2.0.Final
2021-07-19 19:15:56,447 DEBUG [main] org.springframework.core.log.CompositeLog : HTTP GET http://localhost:8888/customer_service/default/main
2021-07-19 19:15:56,526 DEBUG [main] org.springframework.core.log.CompositeLog : Accept=[application/json, application/*+json]
2021-07-19 19:15:58,869 DEBUG [main] org.springframework.core.log.CompositeLog : Response 200 OK
2021-07-19 19:15:58,870 DEBUG [main] org.springframework.core.log.CompositeLog : Reading to [org.springframework.cloud.config.environment.Environment]
2021-07-19 19:15:58,908 INFO [main] org.springframework.boot.SpringApplication : No active profile set, falling back to default profiles: default
2021-07-19 19:16:01,158 INFO [main] com.mongodb.diagnostics.logging.SLF4JLogger : Cluster created with settings {hosts=[localhost:27017], mode=SINGLE, requiredClusterType=UNKNOWN, serverSelectionTimeout='30000 ms'}
2021-07-19 19:16:02,355 DEBUG [main] org.springframework.web.reactive.result.method.AbstractHandlerMethodMapping : 6 mappings in 'requestMappingHandlerMapping'
2021-07-19 19:16:02,402 DEBUG [main] org.springframework.web.reactive.handler.SimpleUrlHandlerMapping : Patterns [/webjars/**, /**] in 'resourceHandlerMapping'
2021-07-19 19:16:02,873 INFO [cluster-ClusterId{value='60f615c19b5e9657fc8174be', description='null'}-localhost:27017] com.mongodb.diagnostics.logging.SLF4JLogger : Opened connection [connectionId{localValue:2, serverValue:32}] to localhost:27017
2021-07-19 19:16:02,873 INFO [cluster-rtt-ClusterId{value='60f615c19b5e9657fc8174be', description='null'}-localhost:27017] com.mongodb.diagnostics.logging.SLF4JLogger : Opened connection [connectionId{localValue:1, serverValue:31}] to localhost:27017
2021-07-19 19:16:02,875 INFO [cluster-ClusterId{value='60f615c19b5e9657fc8174be', description='null'}-localhost:27017] com.mongodb.diagnostics.logging.SLF4JLogger : Monitor thread successfully connected to server with description ServerDescription{address=localhost:27017, type=STANDALONE, state=CONNECTED, ok=true, minWireVersion=0, maxWireVersion=9, maxDocumentSize=16777216, logicalSessionTimeoutMinutes=30, roundTripTimeNanos=74825100}
2021-07-19 19:16:05,334 DEBUG [main] org.springframework.web.reactive.result.method.annotation.ControllerMethodResolver : ControllerAdvice beans: none
2021-07-19 19:16:05,391 DEBUG [main] org.springframework.web.server.adapter.HttpWebHandlerAdapter : enableLoggingRequestDetails='false': form data and headers will be masked to prevent unsafe logging of potentially sensitive data
2021-07-19 19:16:07,391 INFO [main] com.netflix.discovery.DiscoveryClient : Initializing Eureka in region us-east-1
2021-07-19 19:16:07,397 INFO [main] com.netflix.discovery.shared.resolver.aws.ConfigClusterResolver : Resolving eureka endpoints via configuration
2021-07-19 19:16:07,424 INFO [main] com.netflix.discovery.DiscoveryClient : Disable delta property : false
2021-07-19 19:16:07,425 INFO [main] com.netflix.discovery.DiscoveryClient : Single vip registry refresh property : null
2021-07-19 19:16:07,425 INFO [main] com.netflix.discovery.DiscoveryClient : Force full registry fetch : false
2021-07-19 19:16:07,425 INFO [main] com.netflix.discovery.DiscoveryClient : Application is null : false
2021-07-19 19:16:07,426 INFO [main] com.netflix.discovery.DiscoveryClient : Registered Applications size is zero : true
2021-07-19 19:16:07,426 INFO [main] com.netflix.discovery.DiscoveryClient : Application version is -1: true
2021-07-19 19:16:07,426 INFO [main] com.netflix.discovery.DiscoveryClient : Getting all instance registry info from the eureka server
2021-07-19 19:16:08,413 DEBUG [main] org.springframework.core.log.CompositeLog : HTTP GET http://localhost:8761/eureka/apps/
2021-07-19 19:16:08,456 DEBUG [main] org.springframework.core.log.CompositeLog : Accept=[application/json, application/*+json]
2021-07-19 19:16:08,506 DEBUG [main] org.springframework.core.log.CompositeLog : Response 200 OK
2021-07-19 19:16:08,507 DEBUG [main] org.springframework.core.log.CompositeLog : Reading to [org.springframework.cloud.netflix.eureka.http.EurekaApplications]
2021-07-19 19:16:08,515 INFO [main] com.netflix.discovery.DiscoveryClient : The response status is 200
2021-07-19 19:16:08,519 INFO [main] com.netflix.discovery.DiscoveryClient : Starting heartbeat executor: renew interval is: 30
2021-07-19 19:16:08,523 INFO [main] com.netflix.discovery.InstanceInfoReplicator : InstanceInfoReplicator onDemand update allowed rate per min is 4
2021-07-19 19:16:08,528 INFO [main] com.netflix.discovery.DiscoveryClient : Discovery Client initialized at timestamp 1626740168527 with initial instances count: 2
2021-07-19 19:16:08,539 INFO [main] com.netflix.discovery.DiscoveryClient$3 : Saw local status change event StatusChangeEvent [timestamp=1626740168539, current=UP, previous=STARTING]
2021-07-19 19:16:08,541 INFO [DiscoveryClient-InstanceInfoReplicator-0] com.netflix.discovery.DiscoveryClient : DiscoveryClient_CUSTOMER_SERVICE/host.docker.internal:customer_service:8090: registering service...
2021-07-19 19:16:08,552 DEBUG [DiscoveryClient-InstanceInfoReplicator-0] org.springframework.core.log.CompositeLog : HTTP POST http://localhost:8761/eureka/apps/CUSTOMER_SERVICE
2021-07-19 19:16:08,554 DEBUG [DiscoveryClient-InstanceInfoReplicator-0] org.springframework.core.log.CompositeLog : Accept=[application/json, application/*+json]
2021-07-19 19:16:08,562 DEBUG [DiscoveryClient-InstanceInfoReplicator-0] org.springframework.core.log.CompositeLog : Writing [InstanceInfo [instanceId = host.docker.internal:customer_service:8090, appName = CUSTOMER_SERVICE, hostName = host.docker.internal, status = UP, ipAddr = 192.168.1.12, port = 8090, securePort = 443, dataCenterInfo = com.netflix.appinfo.MyDataCenterInfo@30b8e495] as "application/json"
2021-07-19 19:16:08,657 DEBUG [DiscoveryClient-InstanceInfoReplicator-0] org.springframework.core.log.CompositeLog : Response 204 NO_CONTENT
2021-07-19 19:16:08,658 INFO [DiscoveryClient-InstanceInfoReplicator-0] com.netflix.discovery.DiscoveryClient : DiscoveryClient_CUSTOMER_SERVICE/host.docker.internal:customer_service:8090 - registration status: 204
2021-07-19 19:16:10,810 INFO [main] org.springframework.boot.StartupInfoLogger : Started Application in 17.702 seconds (JVM running for 19.263)
2021-07-19 19:16:38,520 DEBUG [DiscoveryClient-CacheRefreshExecutor-0] org.springframework.core.log.CompositeLog : HTTP GET http://localhost:8761/eureka/apps/delta
2021-07-19 19:16:38,521 DEBUG [DiscoveryClient-CacheRefreshExecutor-0] org.springframework.core.log.CompositeLog : Accept=[application/json, application/*+json]
2021-07-19 19:16:38,523 DEBUG [DiscoveryClient-HeartbeatExecutor-0] org.springframework.core.log.CompositeLog : HTTP PUT http://localhost:8761/eureka/apps/CUSTOMER_SERVICE/host.docker.internal:customer_service:8090?status=UP&lastDirtyTimestamp=1626740168538
2021-07-19 19:16:38,526 DEBUG [DiscoveryClient-CacheRefreshExecutor-0] org.springframework.core.log.CompositeLog : Response 200 OK
2021-07-19 19:16:38,529 DEBUG [DiscoveryClient-CacheRefreshExecutor-0] org.springframework.core.log.CompositeLog : Reading to [org.springframework.cloud.netflix.eureka.http.EurekaApplications]
2021-07-19 19:16:38,539 DEBUG [DiscoveryClient-HeartbeatExecutor-0] org.springframework.core.log.CompositeLog : Accept=[application/json, application/*+json]
2021-07-19 19:16:38,542 DEBUG [DiscoveryClient-HeartbeatExecutor-0] org.springframework.core.log.CompositeLog : Response 200 OK
2021-07-19 19:16:40,661 DEBUG [reactor-http-nio-3] org.springframework.core.log.LogFormatUtils : [1c15044a-1, L:/0:0:0:0:0:0:0:1:8090 - R:/0:0:0:0:0:0:0:1:52311] HTTP GET "/customer/60e231e30d2f326bba123479"
2021-07-19 19:16:40,686 DEBUG [reactor-http-nio-3] org.springframework.web.reactive.handler.AbstractHandlerMapping : [1c15044a-1, L:/0:0:0:0:0:0:0:1:8090 - R:/0:0:0:0:0:0:0:1:52311] Mapped to com.bank.manage.customer.controller.CustomerController#getCustomerById(String)
2021-07-19 19:16:40,859 INFO [nioEventLoopGroup-3-3] com.mongodb.diagnostics.logging.SLF4JLogger : Opened connection [connectionId{localValue:3, serverValue:33}] to localhost:27017
2021-07-19 19:16:40,921 DEBUG [nioEventLoopGroup-3-3] org.springframework.web.reactive.result.HandlerResultHandlerSupport : [1c15044a-1, L:/0:0:0:0:0:0:0:1:8090 - R:/0:0:0:0:0:0:0:1:52311] Found 'Content-Type:application/json' in response
2021-07-19 19:16:40,922 DEBUG [nioEventLoopGroup-3-3] org.springframework.web.reactive.result.method.annotation.AbstractMessageWriterResultHandler : [1c15044a-1, L:/0:0:0:0:0:0:0:1:8090 - R:/0:0:0:0:0:0:0:1:52311] 0..1 [com.bank.manage.customer.persistence.entity.Customer]
2021-07-19 19:16:40,932 DEBUG [nioEventLoopGroup-3-3] org.springframework.core.log.CompositeLog : [1c15044a-1, L:/0:0:0:0:0:0:0:1:8090 - R:/0:0:0:0:0:0:0:1:52311] Encoding [Customer(id=60e231e30d2f326bba123479, firstName=Katy, lastName=Puente, document=34563563, documentTy (truncated)...]
2021-07-19 19:16:40,946 DEBUG [reactor-http-nio-3] org.springframework.core.log.LogFormatUtils : [1c15044a-1, L:/0:0:0:0:0:0:0:1:8090 - R:/0:0:0:0:0:0:0:1:52311] Completed 200 OK
2021-07-19 19:17:08,534 DEBUG [DiscoveryClient-CacheRefreshExecutor-0] org.springframework.core.log.CompositeLog : HTTP GET http://localhost:8761/eureka/apps/delta
2021-07-19 19:17:08,535 DEBUG [DiscoveryClient-CacheRefreshExecutor-0] org.springframework.core.log.CompositeLog : Accept=[application/json, application/*+json]
2021-07-19 19:17:08,538 DEBUG [DiscoveryClient-CacheRefreshExecutor-0] org.springframework.core.log.CompositeLog : Response 200 OK
2021-07-19 19:17:08,539 DEBUG [DiscoveryClient-CacheRefreshExecutor-0] org.springframework.core.log.CompositeLog : Reading to [org.springframework.cloud.netflix.eureka.http.EurekaApplications]
2021-07-19 19:17:08,544 DEBUG [DiscoveryClient-HeartbeatExecutor-0] org.springframework.core.log.CompositeLog : HTTP PUT http://localhost:8761/eureka/apps/CUSTOMER_SERVICE/host.docker.internal:customer_service:8090?status=UP&lastDirtyTimestamp=1626740168538
2021-07-19 19:17:08,544 DEBUG [DiscoveryClient-HeartbeatExecutor-0] org.springframework.core.log.CompositeLog : Accept=[application/json, application/*+json]
2021-07-19 19:17:08,547 DEBUG [DiscoveryClient-HeartbeatExecutor-0] org.springframework.core.log.CompositeLog : Response 200 OK
2021-07-19 19:17:18,957 DEBUG [reactor-http-nio-3] org.springframework.core.log.LogFormatUtils : [1c15044a-2, L:/0:0:0:0:0:0:0:1:8090 - R:/0:0:0:0:0:0:0:1:52311] HTTP GET "/customer/60e231e30d2f326bba123479"
2021-07-19 19:17:18,958 DEBUG [reactor-http-nio-3] org.springframework.web.reactive.handler.AbstractHandlerMapping : [1c15044a-2, L:/0:0:0:0:0:0:0:1:8090 - R:/0:0:0:0:0:0:0:1:52311] Mapped to com.bank.manage.customer.controller.CustomerController#getCustomerById(String)
2021-07-19 19:17:18,962 DEBUG [nioEventLoopGroup-3-3] org.springframework.web.reactive.result.HandlerResultHandlerSupport : [1c15044a-2, L:/0:0:0:0:0:0:0:1:8090 - R:/0:0:0:0:0:0:0:1:52311] Found 'Content-Type:application/json' in response
2021-07-19 19:17:18,963 DEBUG [nioEventLoopGroup-3-3] org.springframework.web.reactive.result.method.annotation.AbstractMessageWriterResultHandler : [1c15044a-2, L:/0:0:0:0:0:0:0:1:8090 - R:/0:0:0:0:0:0:0:1:52311] 0..1 [com.bank.manage.customer.persistence.entity.Customer]
2021-07-19 19:17:18,963 DEBUG [nioEventLoopGroup-3-3] org.springframework.core.log.CompositeLog : [1c15044a-2, L:/0:0:0:0:0:0:0:1:8090 - R:/0:0:0:0:0:0:0:1:52311] Encoding [Customer(id=60e231e30d2f326bba123479, firstName=Katy, lastName=Puente, document=34563563, documentTy (truncated)...]
2021-07-19 19:17:18,967 DEBUG [reactor-http-nio-3] org.springframework.core.log.LogFormatUtils : [1c15044a-2, L:/0:0:0:0:0:0:0:1:8090 - R:/0:0:0:0:0:0:0:1:52311] Completed 200 OK
2021-07-19 19:17:21,199 DEBUG [reactor-http-nio-3] org.springframework.core.log.LogFormatUtils : [1c15044a-3, L:/0:0:0:0:0:0:0:1:8090 - R:/0:0:0:0:0:0:0:1:52311] HTTP GET "/customer/60e231e30d2f326bba123479"
2021-07-19 19:17:21,208 DEBUG [reactor-http-nio-3] org.springframework.web.reactive.handler.AbstractHandlerMapping : [1c15044a-3, L:/0:0:0:0:0:0:0:1:8090 - R:/0:0:0:0:0:0:0:1:52311] Mapped to com.bank.manage.customer.controller.CustomerController#getCustomerById(String)
2021-07-19 19:17:21,212 DEBUG [nioEventLoopGroup-3-3] org.springframework.web.reactive.result.HandlerResultHandlerSupport : [1c15044a-3, L:/0:0:0:0:0:0:0:1:8090 - R:/0:0:0:0:0:0:0:1:52311] Found 'Content-Type:application/json' in response
2021-07-19 19:17:21,213 DEBUG [nioEventLoopGroup-3-3] org.springframework.web.reactive.result.method.annotation.AbstractMessageWriterResultHandler : [1c15044a-3, L:/0:0:0:0:0:0:0:1:8090 - R:/0:0:0:0:0:0:0:1:52311] 0..1 [com.bank.manage.customer.persistence.entity.Customer]
2021-07-19 19:17:21,213 DEBUG [nioEventLoopGroup-3-3] org.springframework.core.log.CompositeLog : [1c15044a-3, L:/0:0:0:0:0:0:0:1:8090 - R:/0:0:0:0:0:0:0:1:52311] Encoding [Customer(id=60e231e30d2f326bba123479, firstName=Katy, lastName=Puente, document=34563563, documentTy (truncated)...]
2021-07-19 19:17:21,215 DEBUG [reactor-http-nio-3] org.springframework.core.log.LogFormatUtils : [1c15044a-3, L:/0:0:0:0:0:0:0:1:8090 - R:/0:0:0:0:0:0:0:1:52311] Completed 200 OK
2021-07-19 19:17:22,387 DEBUG [reactor-http-nio-3] org.springframework.core.log.LogFormatUtils : [1c15044a-4, L:/0:0:0:0:0:0:0:1:8090 - R:/0:0:0:0:0:0:0:1:52311] HTTP GET "/customer/60e231e30d2f326bba123479"
2021-07-19 19:17:22,388 DEBUG [reactor-http-nio-3] org.springframework.web.reactive.handler.AbstractHandlerMapping : [1c15044a-4, L:/0:0:0:0:0:0:0:1:8090 - R:/0:0:0:0:0:0:0:1:52311] Mapped to com.bank.manage.customer.controller.CustomerController#getCustomerById(String)
2021-07-19 19:17:22,391 DEBUG [nioEventLoopGroup-3-3] org.springframework.web.reactive.result.HandlerResultHandlerSupport : [1c15044a-4, L:/0:0:0:0:0:0:0:1:8090 - R:/0:0:0:0:0:0:0:1:52311] Found 'Content-Type:application/json' in response
2021-07-19 19:17:22,392 DEBUG [nioEventLoopGroup-3-3] org.springframework.web.reactive.result.method.annotation.AbstractMessageWriterResultHandler : [1c15044a-4, L:/0:0:0:0:0:0:0:1:8090 - R:/0:0:0:0:0:0:0:1:52311] 0..1 [com.bank.manage.customer.persistence.entity.Customer]
2021-07-19 19:17:22,392 DEBUG [nioEventLoopGroup-3-3] org.springframework.core.log.CompositeLog : [1c15044a-4, L:/0:0:0:0:0:0:0:1:8090 - R:/0:0:0:0:0:0:0:1:52311] Encoding [Customer(id=60e231e30d2f326bba123479, firstName=Katy, lastName=Puente, document=34563563, documentTy (truncated)...]
2021-07-19 19:17:22,394 DEBUG [reactor-http-nio-3] org.springframework.core.log.LogFormatUtils : [1c15044a-4, L:/0:0:0:0:0:0:0:1:8090 - R:/0:0:0:0:0:0:0:1:52311] Completed 200 OK
2021-07-19 19:17:24,462 DEBUG [reactor-http-nio-3] org.springframework.core.log.LogFormatUtils : [1c15044a-5, L:/0:0:0:0:0:0:0:1:8090 - R:/0:0:0:0:0:0:0:1:52311] HTTP GET "/customer/60e231e30d2f326bba123479"
2021-07-19 19:17:24,462 DEBUG [reactor-http-nio-3] org.springframework.web.reactive.handler.AbstractHandlerMapping : [1c15044a-5, L:/0:0:0:0:0:0:0:1:8090 - R:/0:0:0:0:0:0:0:1:52311] Mapped to com.bank.manage.customer.controller.CustomerController#getCustomerById(String)
2021-07-19 19:17:24,465 DEBUG [nioEventLoopGroup-3-3] org.springframework.web.reactive.result.HandlerResultHandlerSupport : [1c15044a-5, L:/0:0:0:0:0:0:0:1:8090 - R:/0:0:0:0:0:0:0:1:52311] Found 'Content-Type:application/json' in response
2021-07-19 19:17:24,466 DEBUG [nioEventLoopGroup-3-3] org.springframework.web.reactive.result.method.annotation.AbstractMessageWriterResultHandler : [1c15044a-5, L:/0:0:0:0:0:0:0:1:8090 - R:/0:0:0:0:0:0:0:1:52311] 0..1 [com.bank.manage.customer.persistence.entity.Customer]
2021-07-19 19:17:24,466 DEBUG [nioEventLoopGroup-3-3] org.springframework.core.log.CompositeLog : [1c15044a-5, L:/0:0:0:0:0:0:0:1:8090 - R:/0:0:0:0:0:0:0:1:52311] Encoding [Customer(id=60e231e30d2f326bba123479, firstName=Katy, lastName=Puente, document=34563563, documentTy (truncated)...]
2021-07-19 19:17:24,468 DEBUG [reactor-http-nio-3] org.springframework.core.log.LogFormatUtils : [1c15044a-5, L:/0:0:0:0:0:0:0:1:8090 - R:/0:0:0:0:0:0:0:1:52311] Completed 200 OK
2021-07-19 19:17:26,568 DEBUG [reactor-http-nio-3] org.springframework.core.log.LogFormatUtils : [1c15044a-6, L:/0:0:0:0:0:0:0:1:8090 - R:/0:0:0:0:0:0:0:1:52311] HTTP GET "/customer/60e231e30d2f326bba123479"
2021-07-19 19:17:26,587 DEBUG [reactor-http-nio-3] org.springframework.web.reactive.handler.AbstractHandlerMapping : [1c15044a-6, L:/0:0:0:0:0:0:0:1:8090 - R:/0:0:0:0:0:0:0:1:52311] Mapped to com.bank.manage.customer.controller.CustomerController#getCustomerById(String)
2021-07-19 19:17:26,591 DEBUG [nioEventLoopGroup-3-3] org.springframework.web.reactive.result.HandlerResultHandlerSupport : [1c15044a-6, L:/0:0:0:0:0:0:0:1:8090 - R:/0:0:0:0:0:0:0:1:52311] Found 'Content-Type:application/json' in response
2021-07-19 19:17:26,591 DEBUG [nioEventLoopGroup-3-3] org.springframework.web.reactive.result.method.annotation.AbstractMessageWriterResultHandler : [1c15044a-6, L:/0:0:0:0:0:0:0:1:8090 - R:/0:0:0:0:0:0:0:1:52311] 0..1 [com.bank.manage.customer.persistence.entity.Customer]
2021-07-19 19:17:26,592 DEBUG [nioEventLoopGroup-3-3] org.springframework.core.log.CompositeLog : [1c15044a-6, L:/0:0:0:0:0:0:0:1:8090 - R:/0:0:0:0:0:0:0:1:52311] Encoding [Customer(id=60e231e30d2f326bba123479, firstName=Katy, lastName=Puente, document=34563563, documentTy (truncated)...]
2021-07-19 19:17:26,593 DEBUG [reactor-http-nio-3] org.springframework.core.log.LogFormatUtils : [1c15044a-6, L:/0:0:0:0:0:0:0:1:8090 - R:/0:0:0:0:0:0:0:1:52311] Completed 200 OK
2021-07-19 19:17:38,541 DEBUG [DiscoveryClient-CacheRefreshExecutor-0] org.springframework.core.log.CompositeLog : HTTP GET http://localhost:8761/eureka/apps/delta
2021-07-19 19:17:38,542 DEBUG [DiscoveryClient-CacheRefreshExecutor-0] org.springframework.core.log.CompositeLog : Accept=[application/json, application/*+json]
2021-07-19 19:17:38,546 DEBUG [DiscoveryClient-CacheRefreshExecutor-0] org.springframework.core.log.CompositeLog : Response 200 OK
2021-07-19 19:17:38,546 DEBUG [DiscoveryClient-CacheRefreshExecutor-0] org.springframework.core.log.CompositeLog : Reading to [org.springframework.cloud.netflix.eureka.http.EurekaApplications]
2021-07-19 19:17:38,549 DEBUG [DiscoveryClient-HeartbeatExecutor-0] org.springframework.core.log.CompositeLog : HTTP PUT http://localhost:8761/eureka/apps/CUSTOMER_SERVICE/host.docker.internal:customer_service:8090?status=UP&lastDirtyTimestamp=1626740168538
2021-07-19 19:17:38,549 DEBUG [DiscoveryClient-HeartbeatExecutor-0] org.springframework.core.log.CompositeLog : Accept=[application/json, application/*+json]
2021-07-19 19:17:38,554 DEBUG [DiscoveryClient-HeartbeatExecutor-0] org.springframework.core.log.CompositeLog : Response 200 OK
2021-07-19 19:18:08,549 DEBUG [DiscoveryClient-CacheRefreshExecutor-0] org.springframework.core.log.CompositeLog : HTTP GET http://localhost:8761/eureka/apps/delta
2021-07-19 19:18:08,550 DEBUG [DiscoveryClient-CacheRefreshExecutor-0] org.springframework.core.log.CompositeLog : Accept=[application/json, application/*+json]
2021-07-19 19:18:08,554 DEBUG [DiscoveryClient-CacheRefreshExecutor-0] org.springframework.core.log.CompositeLog : Response 200 OK
2021-07-19 19:18:08,554 DEBUG [DiscoveryClient-CacheRefreshExecutor-0] org.springframework.core.log.CompositeLog : Reading to [org.springframework.cloud.netflix.eureka.http.EurekaApplications]
2021-07-19 19:18:08,555 DEBUG [DiscoveryClient-HeartbeatExecutor-0] org.springframework.core.log.CompositeLog : HTTP PUT http://localhost:8761/eureka/apps/CUSTOMER_SERVICE/host.docker.internal:customer_service:8090?status=UP&lastDirtyTimestamp=1626740168538
2021-07-19 19:18:08,555 DEBUG [DiscoveryClient-HeartbeatExecutor-0] org.springframework.core.log.CompositeLog : Accept=[application/json, application/*+json]
2021-07-19 19:18:08,559 DEBUG [DiscoveryClient-HeartbeatExecutor-0] org.springframework.core.log.CompositeLog : Response 200 OK
2021-07-19 19:18:38,556 DEBUG [DiscoveryClient-CacheRefreshExecutor-0] org.springframework.core.log.CompositeLog : HTTP GET http://localhost:8761/eureka/apps/delta
2021-07-19 19:18:38,557 DEBUG [DiscoveryClient-CacheRefreshExecutor-0] org.springframework.core.log.CompositeLog : Accept=[application/json, application/*+json]
2021-07-19 19:18:38,559 DEBUG [DiscoveryClient-CacheRefreshExecutor-0] org.springframework.core.log.CompositeLog : Response 200 OK
2021-07-19 19:18:38,560 DEBUG [DiscoveryClient-CacheRefreshExecutor-0] org.springframework.core.log.CompositeLog : Reading to [org.springframework.cloud.netflix.eureka.http.EurekaApplications]
2021-07-19 19:18:38,560 DEBUG [DiscoveryClient-HeartbeatExecutor-0] org.springframework.core.log.CompositeLog : HTTP PUT http://localhost:8761/eureka/apps/CUSTOMER_SERVICE/host.docker.internal:customer_service:8090?status=UP&lastDirtyTimestamp=1626740168538
2021-07-19 19:18:38,561 DEBUG [DiscoveryClient-HeartbeatExecutor-0] org.springframework.core.log.CompositeLog : Accept=[application/json, application/*+json]
2021-07-19 19:18:38,564 DEBUG [DiscoveryClient-HeartbeatExecutor-0] org.springframework.core.log.CompositeLog : Response 200 OK
2021-07-19 19:18:52,754 DEBUG [reactor-http-nio-3] org.springframework.core.log.LogFormatUtils : [1c15044a-7, L:/0:0:0:0:0:0:0:1:8090 - R:/0:0:0:0:0:0:0:1:52311] HTTP GET "/customer/60e231e30d2f326bba123479"
2021-07-19 19:18:52,755 DEBUG [reactor-http-nio-3] org.springframework.web.reactive.handler.AbstractHandlerMapping : [1c15044a-7, L:/0:0:0:0:0:0:0:1:8090 - R:/0:0:0:0:0:0:0:1:52311] Mapped to com.bank.manage.customer.controller.CustomerController#getCustomerById(String)
2021-07-19 19:18:52,761 DEBUG [nioEventLoopGroup-3-3] org.springframework.web.reactive.result.HandlerResultHandlerSupport : [1c15044a-7, L:/0:0:0:0:0:0:0:1:8090 - R:/0:0:0:0:0:0:0:1:52311] Found 'Content-Type:application/json' in response
2021-07-19 19:18:52,762 DEBUG [nioEventLoopGroup-3-3] org.springframework.web.reactive.result.method.annotation.AbstractMessageWriterResultHandler : [1c15044a-7, L:/0:0:0:0:0:0:0:1:8090 - R:/0:0:0:0:0:0:0:1:52311] 0..1 [com.bank.manage.customer.persistence.entity.Customer]
2021-07-19 19:18:52,762 DEBUG [nioEventLoopGroup-3-3] org.springframework.core.log.CompositeLog : [1c15044a-7, L:/0:0:0:0:0:0:0:1:8090 - R:/0:0:0:0:0:0:0:1:52311] Encoding [Customer(id=60e231e30d2f326bba123479, firstName=Katy, lastName=Puente, document=34563563, documentTy (truncated)...]
2021-07-19 19:18:52,764 DEBUG [reactor-http-nio-3] org.springframework.core.log.LogFormatUtils : [1c15044a-7, L:/0:0:0:0:0:0:0:1:8090 - R:/0:0:0:0:0:0:0:1:52311] Completed 200 OK
2021-07-19 19:18:53,740 DEBUG [reactor-http-nio-3] org.springframework.core.log.LogFormatUtils : [1c15044a-8, L:/0:0:0:0:0:0:0:1:8090 - R:/0:0:0:0:0:0:0:1:52311] HTTP GET "/customer/60e231e30d2f326bba123479"
2021-07-19 19:18:53,741 DEBUG [reactor-http-nio-3] org.springframework.web.reactive.handler.AbstractHandlerMapping : [1c15044a-8, L:/0:0:0:0:0:0:0:1:8090 - R:/0:0:0:0:0:0:0:1:52311] Mapped to com.bank.manage.customer.controller.CustomerController#getCustomerById(String)
2021-07-19 19:18:53,747 DEBUG [nioEventLoopGroup-3-3] org.springframework.web.reactive.result.HandlerResultHandlerSupport : [1c15044a-8, L:/0:0:0:0:0:0:0:1:8090 - R:/0:0:0:0:0:0:0:1:52311] Found 'Content-Type:application/json' in response
2021-07-19 19:18:53,747 DEBUG [nioEventLoopGroup-3-3] org.springframework.web.reactive.result.method.annotation.AbstractMessageWriterResultHandler : [1c15044a-8, L:/0:0:0:0:0:0:0:1:8090 - R:/0:0:0:0:0:0:0:1:52311] 0..1 [com.bank.manage.customer.persistence.entity.Customer]
2021-07-19 19:18:53,748 DEBUG [nioEventLoopGroup-3-3] org.springframework.core.log.CompositeLog : [1c15044a-8, L:/0:0:0:0:0:0:0:1:8090 - R:/0:0:0:0:0:0:0:1:52311] Encoding [Customer(id=60e231e30d2f326bba123479, firstName=Katy, lastName=Puente, document=34563563, documentTy (truncated)...]
2021-07-19 19:18:53,750 DEBUG [reactor-http-nio-3] org.springframework.core.log.LogFormatUtils : [1c15044a-8, L:/0:0:0:0:0:0:0:1:8090 - R:/0:0:0:0:0:0:0:1:52311] Completed 200 OK
2021-07-19 19:18:54,681 DEBUG [reactor-http-nio-3] org.springframework.core.log.LogFormatUtils : [1c15044a-9, L:/0:0:0:0:0:0:0:1:8090 - R:/0:0:0:0:0:0:0:1:52311] HTTP GET "/customer/60e231e30d2f326bba123479"
2021-07-19 19:18:54,682 DEBUG [reactor-http-nio-3] org.springframework.web.reactive.handler.AbstractHandlerMapping : [1c15044a-9, L:/0:0:0:0:0:0:0:1:8090 - R:/0:0:0:0:0:0:0:1:52311] Mapped to com.bank.manage.customer.controller.CustomerController#getCustomerById(String)
2021-07-19 19:18:54,686 DEBUG [nioEventLoopGroup-3-3] org.springframework.web.reactive.result.HandlerResultHandlerSupport : [1c15044a-9, L:/0:0:0:0:0:0:0:1:8090 - R:/0:0:0:0:0:0:0:1:52311] Found 'Content-Type:application/json' in response
2021-07-19 19:18:54,687 DEBUG [nioEventLoopGroup-3-3] org.springframework.web.reactive.result.method.annotation.AbstractMessageWriterResultHandler : [1c15044a-9, L:/0:0:0:0:0:0:0:1:8090 - R:/0:0:0:0:0:0:0:1:52311] 0..1 [com.bank.manage.customer.persistence.entity.Customer]
2021-07-19 19:18:54,688 DEBUG [nioEventLoopGroup-3-3] org.springframework.core.log.CompositeLog : [1c15044a-9, L:/0:0:0:0:0:0:0:1:8090 - R:/0:0:0:0:0:0:0:1:52311] Encoding [Customer(id=60e231e30d2f326bba123479, firstName=Katy, lastName=Puente, document=34563563, documentTy (truncated)...]
2021-07-19 19:18:54,691 DEBUG [reactor-http-nio-3] org.springframework.core.log.LogFormatUtils : [1c15044a-9, L:/0:0:0:0:0:0:0:1:8090 - R:/0:0:0:0:0:0:0:1:52311] Completed 200 OK
2021-07-19 19:18:55,784 DEBUG [reactor-http-nio-3] org.springframework.core.log.LogFormatUtils : [1c15044a-10, L:/0:0:0:0:0:0:0:1:8090 - R:/0:0:0:0:0:0:0:1:52311] HTTP GET "/customer/60e231e30d2f326bba123479"
2021-07-19 19:18:55,786 DEBUG [reactor-http-nio-3] org.springframework.web.reactive.handler.AbstractHandlerMapping : [1c15044a-10, L:/0:0:0:0:0:0:0:1:8090 - R:/0:0:0:0:0:0:0:1:52311] Mapped to com.bank.manage.customer.controller.CustomerController#getCustomerById(String)
2021-07-19 19:18:55,792 DEBUG [nioEventLoopGroup-3-3] org.springframework.web.reactive.result.HandlerResultHandlerSupport : [1c15044a-10, L:/0:0:0:0:0:0:0:1:8090 - R:/0:0:0:0:0:0:0:1:52311] Found 'Content-Type:application/json' in response
2021-07-19 19:18:55,792 DEBUG [nioEventLoopGroup-3-3] org.springframework.web.reactive.result.method.annotation.AbstractMessageWriterResultHandler : [1c15044a-10, L:/0:0:0:0:0:0:0:1:8090 - R:/0:0:0:0:0:0:0:1:52311] 0..1 [com.bank.manage.customer.persistence.entity.Customer]
2021-07-19 19:18:55,793 DEBUG [nioEventLoopGroup-3-3] org.springframework.core.log.CompositeLog : [1c15044a-10, L:/0:0:0:0:0:0:0:1:8090 - R:/0:0:0:0:0:0:0:1:52311] Encoding [Customer(id=60e231e30d2f326bba123479, firstName=Katy, lastName=Puente, document=34563563, documentTy (truncated)...]
2021-07-19 19:18:55,795 DEBUG [reactor-http-nio-3] org.springframework.core.log.LogFormatUtils : [1c15044a-10, L:/0:0:0:0:0:0:0:1:8090 - R:/0:0:0:0:0:0:0:1:52311] Completed 200 OK
2021-07-19 19:18:58,085 DEBUG [reactor-http-nio-3] org.springframework.core.log.LogFormatUtils : [1c15044a-11, L:/0:0:0:0:0:0:0:1:8090 - R:/0:0:0:0:0:0:0:1:52311] HTTP GET "/customer/60e231e30d2f326bba123479"
2021-07-19 19:18:58,086 DEBUG [reactor-http-nio-3] org.springframework.web.reactive.handler.AbstractHandlerMapping : [1c15044a-11, L:/0:0:0:0:0:0:0:1:8090 - R:/0:0:0:0:0:0:0:1:52311] Mapped to com.bank.manage.customer.controller.CustomerController#getCustomerById(String)
2021-07-19 19:18:58,091 DEBUG [nioEventLoopGroup-3-3] org.springframework.web.reactive.result.HandlerResultHandlerSupport : [1c15044a-11, L:/0:0:0:0:0:0:0:1:8090 - R:/0:0:0:0:0:0:0:1:52311] Found 'Content-Type:application/json' in response
2021-07-19 19:18:58,091 DEBUG [nioEventLoopGroup-3-3] org.springframework.web.reactive.result.method.annotation.AbstractMessageWriterResultHandler : [1c15044a-11, L:/0:0:0:0:0:0:0:1:8090 - R:/0:0:0:0:0:0:0:1:52311] 0..1 [com.bank.manage.customer.persistence.entity.Customer]
2021-07-19 19:18:58,092 DEBUG [nioEventLoopGroup-3-3] org.springframework.core.log.CompositeLog : [1c15044a-11, L:/0:0:0:0:0:0:0:1:8090 - R:/0:0:0:0:0:0:0:1:52311] Encoding [Customer(id=60e231e30d2f326bba123479, firstName=Katy, lastName=Puente, document=34563563, documentTy (truncated)...]
2021-07-19 19:18:58,093 DEBUG [reactor-http-nio-3] org.springframework.core.log.LogFormatUtils : [1c15044a-11, L:/0:0:0:0:0:0:0:1:8090 - R:/0:0:0:0:0:0:0:1:52311] Completed 200 OK
2021-07-19 19:18:58,986 DEBUG [reactor-http-nio-3] org.springframework.core.log.LogFormatUtils : [1c15044a-12, L:/0:0:0:0:0:0:0:1:8090 - R:/0:0:0:0:0:0:0:1:52311] HTTP GET "/customer/60e231e30d2f326bba123479"
2021-07-19 19:18:58,988 DEBUG [reactor-http-nio-3] org.springframework.web.reactive.handler.AbstractHandlerMapping : [1c15044a-12, L:/0:0:0:0:0:0:0:1:8090 - R:/0:0:0:0:0:0:0:1:52311] Mapped to com.bank.manage.customer.controller.CustomerController#getCustomerById(String)
2021-07-19 19:18:58,992 DEBUG [nioEventLoopGroup-3-3] org.springframework.web.reactive.result.HandlerResultHandlerSupport : [1c15044a-12, L:/0:0:0:0:0:0:0:1:8090 - R:/0:0:0:0:0:0:0:1:52311] Found 'Content-Type:application/json' in response
2021-07-19 19:18:58,992 DEBUG [nioEventLoopGroup-3-3] org.springframework.web.reactive.result.method.annotation.AbstractMessageWriterResultHandler : [1c15044a-12, L:/0:0:0:0:0:0:0:1:8090 - R:/0:0:0:0:0:0:0:1:52311] 0..1 [com.bank.manage.customer.persistence.entity.Customer]
2021-07-19 19:18:58,993 DEBUG [nioEventLoopGroup-3-3] org.springframework.core.log.CompositeLog : [1c15044a-12, L:/0:0:0:0:0:0:0:1:8090 - R:/0:0:0:0:0:0:0:1:52311] Encoding [Customer(id=60e231e30d2f326bba123479, firstName=Katy, lastName=Puente, document=34563563, documentTy (truncated)...]
2021-07-19 19:18:58,995 DEBUG [reactor-http-nio-3] org.springframework.core.log.LogFormatUtils : [1c15044a-12, L:/0:0:0:0:0:0:0:1:8090 - R:/0:0:0:0:0:0:0:1:52311] Completed 200 OK
2021-07-19 19:18:59,779 DEBUG [reactor-http-nio-3] org.springframework.core.log.LogFormatUtils : [1c15044a-13, L:/0:0:0:0:0:0:0:1:8090 - R:/0:0:0:0:0:0:0:1:52311] HTTP GET "/customer/60e231e30d2f326bba123479"
2021-07-19 19:18:59,779 DEBUG [reactor-http-nio-3] org.springframework.web.reactive.handler.AbstractHandlerMapping : [1c15044a-13, L:/0:0:0:0:0:0:0:1:8090 - R:/0:0:0:0:0:0:0:1:52311] Mapped to com.bank.manage.customer.controller.CustomerController#getCustomerById(String)
2021-07-19 19:18:59,782 DEBUG [nioEventLoopGroup-3-3] org.springframework.web.reactive.result.HandlerResultHandlerSupport : [1c15044a-13, L:/0:0:0:0:0:0:0:1:8090 - R:/0:0:0:0:0:0:0:1:52311] Found 'Content-Type:application/json' in response
2021-07-19 19:18:59,783 DEBUG [nioEventLoopGroup-3-3] org.springframework.web.reactive.result.method.annotation.AbstractMessageWriterResultHandler : [1c15044a-13, L:/0:0:0:0:0:0:0:1:8090 - R:/0:0:0:0:0:0:0:1:52311] 0..1 [com.bank.manage.customer.persistence.entity.Customer]
2021-07-19 19:18:59,783 DEBUG [nioEventLoopGroup-3-3] org.springframework.core.log.CompositeLog : [1c15044a-13, L:/0:0:0:0:0:0:0:1:8090 - R:/0:0:0:0:0:0:0:1:52311] Encoding [Customer(id=60e231e30d2f326bba123479, firstName=Katy, lastName=Puente, document=34563563, documentTy (truncated)...]
2021-07-19 19:18:59,784 DEBUG [reactor-http-nio-3] org.springframework.core.log.LogFormatUtils : [1c15044a-13, L:/0:0:0:0:0:0:0:1:8090 - R:/0:0:0:0:0:0:0:1:52311] Completed 200 OK
2021-07-19 19:19:01,654 DEBUG [reactor-http-nio-3] org.springframework.core.log.LogFormatUtils : [1c15044a-14, L:/0:0:0:0:0:0:0:1:8090 - R:/0:0:0:0:0:0:0:1:52311] HTTP GET "/customer/60e231e30d2f326bba123479"
2021-07-19 19:19:01,655 DEBUG [reactor-http-nio-3] org.springframework.web.reactive.handler.AbstractHandlerMapping : [1c15044a-14, L:/0:0:0:0:0:0:0:1:8090 - R:/0:0:0:0:0:0:0:1:52311] Mapped to com.bank.manage.customer.controller.CustomerController#getCustomerById(String)
2021-07-19 19:19:01,659 DEBUG [nioEventLoopGroup-3-3] org.springframework.web.reactive.result.HandlerResultHandlerSupport : [1c15044a-14, L:/0:0:0:0:0:0:0:1:8090 - R:/0:0:0:0:0:0:0:1:52311] Found 'Content-Type:application/json' in response
2021-07-19 19:19:01,659 DEBUG [nioEventLoopGroup-3-3] org.springframework.web.reactive.result.method.annotation.AbstractMessageWriterResultHandler : [1c15044a-14, L:/0:0:0:0:0:0:0:1:8090 - R:/0:0:0:0:0:0:0:1:52311] 0..1 [com.bank.manage.customer.persistence.entity.Customer]
2021-07-19 19:19:01,659 DEBUG [nioEventLoopGroup-3-3] org.springframework.core.log.CompositeLog : [1c15044a-14, L:/0:0:0:0:0:0:0:1:8090 - R:/0:0:0:0:0:0:0:1:52311] Encoding [Customer(id=60e231e30d2f326bba123479, firstName=Katy, lastName=Puente, document=34563563, documentTy (truncated)...]
2021-07-19 19:19:01,661 DEBUG [reactor-http-nio-3] org.springframework.core.log.LogFormatUtils : [1c15044a-14, L:/0:0:0:0:0:0:0:1:8090 - R:/0:0:0:0:0:0:0:1:52311] Completed 200 OK
2021-07-19 19:19:01,900 DEBUG [reactor-http-nio-3] org.springframework.core.log.LogFormatUtils : [1c15044a-15, L:/0:0:0:0:0:0:0:1:8090 - R:/0:0:0:0:0:0:0:1:52311] HTTP GET "/customer/60e231e30d2f326bba123479"
2021-07-19 19:19:01,901 DEBUG [reactor-http-nio-3] org.springframework.web.reactive.handler.AbstractHandlerMapping : [1c15044a-15, L:/0:0:0:0:0:0:0:1:8090 - R:/0:0:0:0:0:0:0:1:52311] Mapped to com.bank.manage.customer.controller.CustomerController#getCustomerById(String)
2021-07-19 19:19:01,905 DEBUG [nioEventLoopGroup-3-3] org.springframework.web.reactive.result.HandlerResultHandlerSupport : [1c15044a-15, L:/0:0:0:0:0:0:0:1:8090 - R:/0:0:0:0:0:0:0:1:52311] Found 'Content-Type:application/json' in response
2021-07-19 19:19:01,905 DEBUG [nioEventLoopGroup-3-3] org.springframework.web.reactive.result.method.annotation.AbstractMessageWriterResultHandler : [1c15044a-15, L:/0:0:0:0:0:0:0:1:8090 - R:/0:0:0:0:0:0:0:1:52311] 0..1 [com.bank.manage.customer.persistence.entity.Customer]
2021-07-19 19:19:01,906 DEBUG [nioEventLoopGroup-3-3] org.springframework.core.log.CompositeLog : [1c15044a-15, L:/0:0:0:0:0:0:0:1:8090 - R:/0:0:0:0:0:0:0:1:52311] Encoding [Customer(id=60e231e30d2f326bba123479, firstName=Katy, lastName=Puente, document=34563563, documentTy (truncated)...]
2021-07-19 19:19:01,907 DEBUG [reactor-http-nio-3] org.springframework.core.log.LogFormatUtils : [1c15044a-15, L:/0:0:0:0:0:0:0:1:8090 - R:/0:0:0:0:0:0:0:1:52311] Completed 200 OK
2021-07-19 19:19:02,213 DEBUG [reactor-http-nio-3] org.springframework.core.log.LogFormatUtils : [1c15044a-16, L:/0:0:0:0:0:0:0:1:8090 - R:/0:0:0:0:0:0:0:1:52311] HTTP GET "/customer/60e231e30d2f326bba123479"
2021-07-19 19:19:02,214 DEBUG [reactor-http-nio-3] org.springframework.web.reactive.handler.AbstractHandlerMapping : [1c15044a-16, L:/0:0:0:0:0:0:0:1:8090 - R:/0:0:0:0:0:0:0:1:52311] Mapped to com.bank.manage.customer.controller.CustomerController#getCustomerById(String)
2021-07-19 19:19:02,217 DEBUG [nioEventLoopGroup-3-3] org.springframework.web.reactive.result.HandlerResultHandlerSupport : [1c15044a-16, L:/0:0:0:0:0:0:0:1:8090 - R:/0:0:0:0:0:0:0:1:52311] Found 'Content-Type:application/json' in response
2021-07-19 19:19:02,218 DEBUG [nioEventLoopGroup-3-3] org.springframework.web.reactive.result.method.annotation.AbstractMessageWriterResultHandler : [1c15044a-16, L:/0:0:0:0:0:0:0:1:8090 - R:/0:0:0:0:0:0:0:1:52311] 0..1 [com.bank.manage.customer.persistence.entity.Customer]
2021-07-19 19:19:02,218 DEBUG [nioEventLoopGroup-3-3] org.springframework.core.log.CompositeLog : [1c15044a-16, L:/0:0:0:0:0:0:0:1:8090 - R:/0:0:0:0:0:0:0:1:52311] Encoding [Customer(id=60e231e30d2f326bba123479, firstName=Katy, lastName=Puente, document=34563563, documentTy (truncated)...]
2021-07-19 19:19:02,220 DEBUG [reactor-http-nio-3] org.springframework.core.log.LogFormatUtils : [1c15044a-16, L:/0:0:0:0:0:0:0:1:8090 - R:/0:0:0:0:0:0:0:1:52311] Completed 200 OK
2021-07-19 19:19:08,563 DEBUG [DiscoveryClient-CacheRefreshExecutor-0] org.springframework.core.log.CompositeLog : HTTP GET http://localhost:8761/eureka/apps/delta
2021-07-19 19:19:08,564 DEBUG [DiscoveryClient-CacheRefreshExecutor-0] org.springframework.core.log.CompositeLog : Accept=[application/json, application/*+json]
2021-07-19 19:19:08,566 DEBUG [DiscoveryClient-HeartbeatExecutor-0] org.springframework.core.log.CompositeLog : HTTP PUT http://localhost:8761/eureka/apps/CUSTOMER_SERVICE/host.docker.internal:customer_service:8090?status=UP&lastDirtyTimestamp=1626740168538
2021-07-19 19:19:08,566 DEBUG [DiscoveryClient-CacheRefreshExecutor-0] org.springframework.core.log.CompositeLog : Response 200 OK
2021-07-19 19:19:08,566 DEBUG [DiscoveryClient-HeartbeatExecutor-0] org.springframework.core.log.CompositeLog : Accept=[application/json, application/*+json]
2021-07-19 19:19:08,567 DEBUG [DiscoveryClient-CacheRefreshExecutor-0] org.springframework.core.log.CompositeLog : Reading to [org.springframework.cloud.netflix.eureka.http.EurekaApplications]
2021-07-19 19:19:08,570 DEBUG [DiscoveryClient-HeartbeatExecutor-0] org.springframework.core.log.CompositeLog : Response 200 OK
2021-07-19 19:19:38,570 DEBUG [DiscoveryClient-CacheRefreshExecutor-0] org.springframework.core.log.CompositeLog : HTTP GET http://localhost:8761/eureka/apps/delta
2021-07-19 19:19:38,571 DEBUG [DiscoveryClient-CacheRefreshExecutor-0] org.springframework.core.log.CompositeLog : Accept=[application/json, application/*+json]
2021-07-19 19:19:38,573 DEBUG [DiscoveryClient-HeartbeatExecutor-0] org.springframework.core.log.CompositeLog : HTTP PUT http://localhost:8761/eureka/apps/CUSTOMER_SERVICE/host.docker.internal:customer_service:8090?status=UP&lastDirtyTimestamp=1626740168538
2021-07-19 19:19:38,574 DEBUG [DiscoveryClient-HeartbeatExecutor-0] org.springframework.core.log.CompositeLog : Accept=[application/json, application/*+json]
2021-07-19 19:19:38,574 DEBUG [DiscoveryClient-CacheRefreshExecutor-0] org.springframework.core.log.CompositeLog : Response 200 OK
2021-07-19 19:19:38,575 DEBUG [DiscoveryClient-CacheRefreshExecutor-0] org.springframework.core.log.CompositeLog : Reading to [org.springframework.cloud.netflix.eureka.http.EurekaApplications]
2021-07-19 19:19:38,577 DEBUG [DiscoveryClient-HeartbeatExecutor-0] org.springframework.core.log.CompositeLog : Response 200 OK
2021-07-19 19:20:08,579 DEBUG [DiscoveryClient-CacheRefreshExecutor-0] org.springframework.core.log.CompositeLog : HTTP GET http://localhost:8761/eureka/apps/delta
2021-07-19 19:20:08,580 DEBUG [DiscoveryClient-CacheRefreshExecutor-0] org.springframework.core.log.CompositeLog : Accept=[application/json, application/*+json]
2021-07-19 19:20:08,581 DEBUG [DiscoveryClient-HeartbeatExecutor-0] org.springframework.core.log.CompositeLog : HTTP PUT http://localhost:8761/eureka/apps/CUSTOMER_SERVICE/host.docker.internal:customer_service:8090?status=UP&lastDirtyTimestamp=1626740168538
2021-07-19 19:20:08,582 DEBUG [DiscoveryClient-HeartbeatExecutor-0] org.springframework.core.log.CompositeLog : Accept=[application/json, application/*+json]
2021-07-19 19:20:08,586 DEBUG [DiscoveryClient-CacheRefreshExecutor-0] org.springframework.core.log.CompositeLog : Response 200 OK
2021-07-19 19:20:08,588 DEBUG [DiscoveryClient-CacheRefreshExecutor-0] org.springframework.core.log.CompositeLog : Reading to [org.springframework.cloud.netflix.eureka.http.EurekaApplications]
2021-07-19 19:20:08,589 DEBUG [DiscoveryClient-HeartbeatExecutor-0] org.springframework.core.log.CompositeLog : Response 200 OK
2021-07-19 19:20:38,591 DEBUG [DiscoveryClient-CacheRefreshExecutor-0] org.springframework.core.log.CompositeLog : HTTP GET http://localhost:8761/eureka/apps/delta
2021-07-19 19:20:38,591 DEBUG [DiscoveryClient-HeartbeatExecutor-0] org.springframework.core.log.CompositeLog : HTTP PUT http://localhost:8761/eureka/apps/CUSTOMER_SERVICE/host.docker.internal:customer_service:8090?status=UP&lastDirtyTimestamp=1626740168538
2021-07-19 19:20:38,592 DEBUG [DiscoveryClient-HeartbeatExecutor-0] org.springframework.core.log.CompositeLog : Accept=[application/json, application/*+json]
2021-07-19 19:20:38,592 DEBUG [DiscoveryClient-CacheRefreshExecutor-0] org.springframework.core.log.CompositeLog : Accept=[application/json, application/*+json]
2021-07-19 19:20:38,598 DEBUG [DiscoveryClient-HeartbeatExecutor-0] org.springframework.core.log.CompositeLog : Response 200 OK
2021-07-19 19:20:38,834 DEBUG [DiscoveryClient-CacheRefreshExecutor-0] org.springframework.core.log.CompositeLog : Response 200 OK
2021-07-19 19:20:38,835 DEBUG [DiscoveryClient-CacheRefreshExecutor-0] org.springframework.core.log.CompositeLog : Reading to [org.springframework.cloud.netflix.eureka.http.EurekaApplications]
2021-07-19 19:21:07,428 INFO [AsyncResolver-bootstrap-executor-0] com.netflix.discovery.shared.resolver.aws.ConfigClusterResolver : Resolving eureka endpoints via configuration
2021-07-19 19:21:08,601 DEBUG [DiscoveryClient-HeartbeatExecutor-0] org.springframework.core.log.CompositeLog : HTTP PUT http://localhost:8761/eureka/apps/CUSTOMER_SERVICE/host.docker.internal:customer_service:8090?status=UP&lastDirtyTimestamp=1626740168538
2021-07-19 19:21:08,603 DEBUG [DiscoveryClient-HeartbeatExecutor-0] org.springframework.core.log.CompositeLog : Accept=[application/json, application/*+json]
2021-07-19 19:21:08,611 DEBUG [DiscoveryClient-HeartbeatExecutor-0] org.springframework.core.log.CompositeLog : Response 200 OK
2021-07-19 19:21:08,837 DEBUG [DiscoveryClient-CacheRefreshExecutor-0] org.springframework.core.log.CompositeLog : HTTP GET http://localhost:8761/eureka/apps/delta
2021-07-19 19:21:08,838 DEBUG [DiscoveryClient-CacheRefreshExecutor-0] org.springframework.core.log.CompositeLog : Accept=[application/json, application/*+json]
2021-07-19 19:21:08,841 DEBUG [DiscoveryClient-CacheRefreshExecutor-0] org.springframework.core.log.CompositeLog : Response 200 OK
2021-07-19 19:21:08,841 DEBUG [DiscoveryClient-CacheRefreshExecutor-0] org.springframework.core.log.CompositeLog : Reading to [org.springframework.cloud.netflix.eureka.http.EurekaApplications]
2021-07-19 19:21:38,615 DEBUG [DiscoveryClient-HeartbeatExecutor-0] org.springframework.core.log.CompositeLog : HTTP PUT http://localhost:8761/eureka/apps/CUSTOMER_SERVICE/host.docker.internal:customer_service:8090?status=UP&lastDirtyTimestamp=1626740168538
2021-07-19 19:21:38,616 DEBUG [DiscoveryClient-HeartbeatExecutor-0] org.springframework.core.log.CompositeLog : Accept=[application/json, application/*+json]
2021-07-19 19:21:38,624 DEBUG [DiscoveryClient-HeartbeatExecutor-0] org.springframework.core.log.CompositeLog : Response 200 OK
2021-07-19 19:21:38,844 DEBUG [DiscoveryClient-CacheRefreshExecutor-0] org.springframework.core.log.CompositeLog : HTTP GET http://localhost:8761/eureka/apps/delta
2021-07-19 19:21:38,844 DEBUG [DiscoveryClient-CacheRefreshExecutor-0] org.springframework.core.log.CompositeLog : Accept=[application/json, application/*+json]
2021-07-19 19:21:38,847 DEBUG [DiscoveryClient-CacheRefreshExecutor-0] org.springframework.core.log.CompositeLog : Response 200 OK
2021-07-19 19:21:38,857 DEBUG [DiscoveryClient-CacheRefreshExecutor-0] org.springframework.core.log.CompositeLog : Reading to [org.springframework.cloud.netflix.eureka.http.EurekaApplications]
2021-07-19 19:22:08,628 DEBUG [DiscoveryClient-HeartbeatExecutor-0] org.springframework.core.log.CompositeLog : HTTP PUT http://localhost:8761/eureka/apps/CUSTOMER_SERVICE/host.docker.internal:customer_service:8090?status=UP&lastDirtyTimestamp=1626740168538
2021-07-19 19:22:08,629 DEBUG [DiscoveryClient-HeartbeatExecutor-0] org.springframework.core.log.CompositeLog : Accept=[application/json, application/*+json]
2021-07-19 19:22:08,633 DEBUG [DiscoveryClient-HeartbeatExecutor-0] org.springframework.core.log.CompositeLog : Response 200 OK
2021-07-19 19:22:08,859 DEBUG [DiscoveryClient-CacheRefreshExecutor-0] org.springframework.core.log.CompositeLog : HTTP GET http://localhost:8761/eureka/apps/delta
2021-07-19 19:22:08,860 DEBUG [DiscoveryClient-CacheRefreshExecutor-0] org.springframework.core.log.CompositeLog : Accept=[application/json, application/*+json]
2021-07-19 19:22:08,863 DEBUG [DiscoveryClient-CacheRefreshExecutor-0] org.springframework.core.log.CompositeLog : Response 200 OK
2021-07-19 19:22:08,863 DEBUG [DiscoveryClient-CacheRefreshExecutor-0] org.springframework.core.log.CompositeLog : Reading to [org.springframework.cloud.netflix.eureka.http.EurekaApplications]
2021-07-19 19:22:11,334 DEBUG [reactor-http-nio-3] org.springframework.core.log.LogFormatUtils : [1c15044a-17, L:/0:0:0:0:0:0:0:1:8090 - R:/0:0:0:0:0:0:0:1:52311] HTTP GET "/customer/60e231e30d2f326bba123479"
2021-07-19 19:22:11,335 DEBUG [reactor-http-nio-3] org.springframework.web.reactive.handler.AbstractHandlerMapping : [1c15044a-17, L:/0:0:0:0:0:0:0:1:8090 - R:/0:0:0:0:0:0:0:1:52311] Mapped to com.bank.manage.customer.controller.CustomerController#getCustomerById(String)
2021-07-19 19:22:11,338 DEBUG [nioEventLoopGroup-3-3] org.springframework.web.reactive.result.HandlerResultHandlerSupport : [1c15044a-17, L:/0:0:0:0:0:0:0:1:8090 - R:/0:0:0:0:0:0:0:1:52311] Found 'Content-Type:application/json' in response
2021-07-19 19:22:11,339 DEBUG [nioEventLoopGroup-3-3] org.springframework.web.reactive.result.method.annotation.AbstractMessageWriterResultHandler : [1c15044a-17, L:/0:0:0:0:0:0:0:1:8090 - R:/0:0:0:0:0:0:0:1:52311] 0..1 [com.bank.manage.customer.persistence.entity.Customer]
2021-07-19 19:22:11,339 DEBUG [nioEventLoopGroup-3-3] org.springframework.core.log.CompositeLog : [1c15044a-17, L:/0:0:0:0:0:0:0:1:8090 - R:/0:0:0:0:0:0:0:1:52311] Encoding [Customer(id=60e231e30d2f326bba123479, firstName=Katy, lastName=Puente, document=34563563, documentTy (truncated)...]
2021-07-19 19:22:11,340 DEBUG [reactor-http-nio-3] org.springframework.core.log.LogFormatUtils : [1c15044a-17, L:/0:0:0:0:0:0:0:1:8090 - R:/0:0:0:0:0:0:0:1:52311] Completed 200 OK
2021-07-19 19:22:38,635 DEBUG [DiscoveryClient-HeartbeatExecutor-0] org.springframework.core.log.CompositeLog : HTTP PUT http://localhost:8761/eureka/apps/CUSTOMER_SERVICE/host.docker.internal:customer_service:8090?status=UP&lastDirtyTimestamp=1626740168538
2021-07-19 19:22:38,638 DEBUG [DiscoveryClient-HeartbeatExecutor-0] org.springframework.core.log.CompositeLog : Accept=[application/json, application/*+json]
2021-07-19 19:22:38,645 DEBUG [DiscoveryClient-HeartbeatExecutor-0] org.springframework.core.log.CompositeLog : Response 200 OK
2021-07-19 19:22:38,865 DEBUG [DiscoveryClient-CacheRefreshExecutor-0] org.springframework.core.log.CompositeLog : HTTP GET http://localhost:8761/eureka/apps/delta
2021-07-19 19:22:38,866 DEBUG [DiscoveryClient-CacheRefreshExecutor-0] org.springframework.core.log.CompositeLog : Accept=[application/json, application/*+json]
2021-07-19 19:22:38,869 DEBUG [DiscoveryClient-CacheRefreshExecutor-0] org.springframework.core.log.CompositeLog : Response 200 OK
2021-07-19 19:22:38,870 DEBUG [DiscoveryClient-CacheRefreshExecutor-0] org.springframework.core.log.CompositeLog : Reading to [org.springframework.cloud.netflix.eureka.http.EurekaApplications]
2021-07-19 19:23:08,647 DEBUG [DiscoveryClient-HeartbeatExecutor-0] org.springframework.core.log.CompositeLog : HTTP PUT http://localhost:8761/eureka/apps/CUSTOMER_SERVICE/host.docker.internal:customer_service:8090?status=UP&lastDirtyTimestamp=1626740168538
2021-07-19 19:23:08,648 DEBUG [DiscoveryClient-HeartbeatExecutor-0] org.springframework.core.log.CompositeLog : Accept=[application/json, application/*+json]
2021-07-19 19:23:08,652 DEBUG [DiscoveryClient-HeartbeatExecutor-0] org.springframework.core.log.CompositeLog : Response 200 OK
2021-07-19 19:23:08,871 DEBUG [DiscoveryClient-CacheRefreshExecutor-0] org.springframework.core.log.CompositeLog : HTTP GET http://localhost:8761/eureka/apps/delta
2021-07-19 19:23:08,871 DEBUG [DiscoveryClient-CacheRefreshExecutor-0] org.springframework.core.log.CompositeLog : Accept=[application/json, application/*+json]
2021-07-19 19:23:08,875 DEBUG [DiscoveryClient-CacheRefreshExecutor-0] org.springframework.core.log.CompositeLog : Response 200 OK
2021-07-19 19:23:08,875 DEBUG [DiscoveryClient-CacheRefreshExecutor-0] org.springframework.core.log.CompositeLog : Reading to [org.springframework.cloud.netflix.eureka.http.EurekaApplications]
2021-07-19 19:23:38,655 DEBUG [DiscoveryClient-HeartbeatExecutor-0] org.springframework.core.log.CompositeLog : HTTP PUT http://localhost:8761/eureka/apps/CUSTOMER_SERVICE/host.docker.internal:customer_service:8090?status=UP&lastDirtyTimestamp=1626740168538
2021-07-19 19:23:38,656 DEBUG [DiscoveryClient-HeartbeatExecutor-0] org.springframework.core.log.CompositeLog : Accept=[application/json, application/*+json]
2021-07-19 19:23:38,659 DEBUG [DiscoveryClient-HeartbeatExecutor-0] org.springframework.core.log.CompositeLog : Response 200 OK
2021-07-19 19:23:38,877 DEBUG [DiscoveryClient-CacheRefreshExecutor-0] org.springframework.core.log.CompositeLog : HTTP GET http://localhost:8761/eureka/apps/delta
2021-07-19 19:23:39,035 DEBUG [DiscoveryClient-CacheRefreshExecutor-0] org.springframework.core.log.CompositeLog : Accept=[application/json, application/*+json]
2021-07-19 19:23:39,039 DEBUG [DiscoveryClient-CacheRefreshExecutor-0] org.springframework.core.log.CompositeLog : Response 200 OK
2021-07-19 19:23:39,040 DEBUG [DiscoveryClient-CacheRefreshExecutor-0] org.springframework.core.log.CompositeLog : Reading to [org.springframework.cloud.netflix.eureka.http.EurekaApplications]
2021-07-19 19:24:08,660 DEBUG [DiscoveryClient-HeartbeatExecutor-0] org.springframework.core.log.CompositeLog : HTTP PUT http://localhost:8761/eureka/apps/CUSTOMER_SERVICE/host.docker.internal:customer_service:8090?status=UP&lastDirtyTimestamp=1626740168538
2021-07-19 19:24:08,661 DEBUG [DiscoveryClient-HeartbeatExecutor-0] org.springframework.core.log.CompositeLog : Accept=[application/json, application/*+json]
2021-07-19 19:24:08,675 DEBUG [DiscoveryClient-HeartbeatExecutor-0] org.springframework.core.log.CompositeLog : Response 200 OK
2021-07-19 19:24:09,045 DEBUG [DiscoveryClient-CacheRefreshExecutor-0] org.springframework.core.log.CompositeLog : HTTP GET http://localhost:8761/eureka/apps/delta
2021-07-19 19:24:09,046 DEBUG [DiscoveryClient-CacheRefreshExecutor-0] org.springframework.core.log.CompositeLog : Accept=[application/json, application/*+json]
2021-07-19 19:24:09,050 DEBUG [DiscoveryClient-CacheRefreshExecutor-0] org.springframework.core.log.CompositeLog : Response 200 OK
2021-07-19 19:24:09,050 DEBUG [DiscoveryClient-CacheRefreshExecutor-0] org.springframework.core.log.CompositeLog : Reading to [org.springframework.cloud.netflix.eureka.http.EurekaApplications]
2021-07-19 19:24:38,678 DEBUG [DiscoveryClient-HeartbeatExecutor-0] org.springframework.core.log.CompositeLog : HTTP PUT http://localhost:8761/eureka/apps/CUSTOMER_SERVICE/host.docker.internal:customer_service:8090?status=UP&lastDirtyTimestamp=1626740168538
2021-07-19 19:24:38,680 DEBUG [DiscoveryClient-HeartbeatExecutor-0] org.springframework.core.log.CompositeLog : Accept=[application/json, application/*+json]
2021-07-19 19:24:38,688 DEBUG [DiscoveryClient-HeartbeatExecutor-0] org.springframework.core.log.CompositeLog : Response 200 OK
2021-07-19 19:24:39,053 DEBUG [DiscoveryClient-CacheRefreshExecutor-0] org.springframework.core.log.CompositeLog : HTTP GET http://localhost:8761/eureka/apps/delta
2021-07-19 19:24:39,054 DEBUG [DiscoveryClient-CacheRefreshExecutor-0] org.springframework.core.log.CompositeLog : Accept=[application/json, application/*+json]
2021-07-19 19:24:39,056 DEBUG [DiscoveryClient-CacheRefreshExecutor-0] org.springframework.core.log.CompositeLog : Response 200 OK
2021-07-19 19:24:39,057 DEBUG [DiscoveryClient-CacheRefreshExecutor-0] org.springframework.core.log.CompositeLog : Reading to [org.springframework.cloud.netflix.eureka.http.EurekaApplications]
2021-07-19 19:25:08,690 DEBUG [DiscoveryClient-HeartbeatExecutor-0] org.springframework.core.log.CompositeLog : HTTP PUT http://localhost:8761/eureka/apps/CUSTOMER_SERVICE/host.docker.internal:customer_service:8090?status=UP&lastDirtyTimestamp=1626740168538
2021-07-19 19:25:08,691 DEBUG [DiscoveryClient-HeartbeatExecutor-0] org.springframework.core.log.CompositeLog : Accept=[application/json, application/*+json]
2021-07-19 19:25:08,843 DEBUG [DiscoveryClient-HeartbeatExecutor-0] org.springframework.core.log.CompositeLog : Response 200 OK
2021-07-19 19:25:09,058 DEBUG [DiscoveryClient-CacheRefreshExecutor-0] org.springframework.core.log.CompositeLog : HTTP GET http://localhost:8761/eureka/apps/delta
2021-07-19 19:25:09,058 DEBUG [DiscoveryClient-CacheRefreshExecutor-0] org.springframework.core.log.CompositeLog : Accept=[application/json, application/*+json]
2021-07-19 19:25:09,062 DEBUG [DiscoveryClient-CacheRefreshExecutor-0] org.springframework.core.log.CompositeLog : Response 200 OK
2021-07-19 19:25:09,062 DEBUG [DiscoveryClient-CacheRefreshExecutor-0] org.springframework.core.log.CompositeLog : Reading to [org.springframework.cloud.netflix.eureka.http.EurekaApplications]
2021-07-19 19:25:38,845 DEBUG [DiscoveryClient-HeartbeatExecutor-0] org.springframework.core.log.CompositeLog : HTTP PUT http://localhost:8761/eureka/apps/CUSTOMER_SERVICE/host.docker.internal:customer_service:8090?status=UP&lastDirtyTimestamp=1626740168538
2021-07-19 19:25:38,847 DEBUG [DiscoveryClient-HeartbeatExecutor-0] org.springframework.core.log.CompositeLog : Accept=[application/json, application/*+json]
2021-07-19 19:25:38,851 DEBUG [DiscoveryClient-HeartbeatExecutor-0] org.springframework.core.log.CompositeLog : Response 200 OK
2021-07-19 19:25:39,064 DEBUG [DiscoveryClient-CacheRefreshExecutor-0] org.springframework.core.log.CompositeLog : HTTP GET http://localhost:8761/eureka/apps/delta
2021-07-19 19:25:39,065 DEBUG [DiscoveryClient-CacheRefreshExecutor-0] org.springframework.core.log.CompositeLog : Accept=[application/json, application/*+json]
2021-07-19 19:25:39,068 DEBUG [DiscoveryClient-CacheRefreshExecutor-0] org.springframework.core.log.CompositeLog : Response 200 OK
2021-07-19 19:25:39,069 DEBUG [DiscoveryClient-CacheRefreshExecutor-0] org.springframework.core.log.CompositeLog : Reading to [org.springframework.cloud.netflix.eureka.http.EurekaApplications]
2021-07-19 19:26:07,430 INFO [AsyncResolver-bootstrap-executor-0] com.netflix.discovery.shared.resolver.aws.ConfigClusterResolver : Resolving eureka endpoints via configuration
2021-07-19 19:26:08,854 DEBUG [DiscoveryClient-HeartbeatExecutor-0] org.springframework.core.log.CompositeLog : HTTP PUT http://localhost:8761/eureka/apps/CUSTOMER_SERVICE/host.docker.internal:customer_service:8090?status=UP&lastDirtyTimestamp=1626740168538
2021-07-19 19:26:08,856 DEBUG [DiscoveryClient-HeartbeatExecutor-0] org.springframework.core.log.CompositeLog : Accept=[application/json, application/*+json]
2021-07-19 19:26:08,865 DEBUG [DiscoveryClient-HeartbeatExecutor-0] org.springframework.core.log.CompositeLog : Response 200 OK
2021-07-19 19:26:09,070 DEBUG [DiscoveryClient-CacheRefreshExecutor-0] org.springframework.core.log.CompositeLog : HTTP GET http://localhost:8761/eureka/apps/delta
2021-07-19 19:26:09,071 DEBUG [DiscoveryClient-CacheRefreshExecutor-0] org.springframework.core.log.CompositeLog : Accept=[application/json, application/*+json]
2021-07-19 19:26:09,092 DEBUG [DiscoveryClient-CacheRefreshExecutor-0] org.springframework.core.log.CompositeLog : Response 200 OK
2021-07-19 19:26:09,092 DEBUG [DiscoveryClient-CacheRefreshExecutor-0] org.springframework.core.log.CompositeLog : Reading to [org.springframework.cloud.netflix.eureka.http.EurekaApplications]
2021-07-19 19:26:38,867 DEBUG [DiscoveryClient-HeartbeatExecutor-0] org.springframework.core.log.CompositeLog : HTTP PUT http://localhost:8761/eureka/apps/CUSTOMER_SERVICE/host.docker.internal:customer_service:8090?status=UP&lastDirtyTimestamp=1626740168538
2021-07-19 19:26:39,094 DEBUG [DiscoveryClient-CacheRefreshExecutor-0] org.springframework.core.log.CompositeLog : HTTP GET http://localhost:8761/eureka/apps/delta
2021-07-19 19:26:39,422 DEBUG [DiscoveryClient-CacheRefreshExecutor-0] org.springframework.core.log.CompositeLog : Accept=[application/json, application/*+json]
2021-07-19 19:26:39,424 DEBUG [DiscoveryClient-HeartbeatExecutor-0] org.springframework.core.log.CompositeLog : Accept=[application/json, application/*+json]
2021-07-19 19:26:39,427 DEBUG [DiscoveryClient-CacheRefreshExecutor-0] org.springframework.core.log.CompositeLog : Response 200 OK
2021-07-19 19:26:39,429 DEBUG [DiscoveryClient-HeartbeatExecutor-0] org.springframework.core.log.CompositeLog : Response 200 OK
2021-07-19 19:26:39,693 DEBUG [DiscoveryClient-CacheRefreshExecutor-0] org.springframework.core.log.CompositeLog : Reading to [org.springframework.cloud.netflix.eureka.http.EurekaApplications]
2021-07-19 19:27:09,695 DEBUG [DiscoveryClient-HeartbeatExecutor-0] org.springframework.core.log.CompositeLog : HTTP PUT http://localhost:8761/eureka/apps/CUSTOMER_SERVICE/host.docker.internal:customer_service:8090?status=UP&lastDirtyTimestamp=1626740168538
2021-07-19 19:27:09,696 DEBUG [DiscoveryClient-HeartbeatExecutor-0] org.springframework.core.log.CompositeLog : Accept=[application/json, application/*+json]
2021-07-19 19:27:09,697 DEBUG [DiscoveryClient-CacheRefreshExecutor-0] org.springframework.core.log.CompositeLog : HTTP GET http://localhost:8761/eureka/apps/delta
2021-07-19 19:27:09,697 DEBUG [DiscoveryClient-CacheRefreshExecutor-0] org.springframework.core.log.CompositeLog : Accept=[application/json, application/*+json]
2021-07-19 19:27:09,701 DEBUG [DiscoveryClient-HeartbeatExecutor-0] org.springframework.core.log.CompositeLog : Response 200 OK
2021-07-19 19:27:09,790 DEBUG [DiscoveryClient-CacheRefreshExecutor-0] org.springframework.core.log.CompositeLog : Response 200 OK
2021-07-19 19:27:09,791 DEBUG [DiscoveryClient-CacheRefreshExecutor-0] org.springframework.core.log.CompositeLog : Reading to [org.springframework.cloud.netflix.eureka.http.EurekaApplications]
2021-07-19 19:27:39,702 DEBUG [DiscoveryClient-HeartbeatExecutor-0] org.springframework.core.log.CompositeLog : HTTP PUT http://localhost:8761/eureka/apps/CUSTOMER_SERVICE/host.docker.internal:customer_service:8090?status=UP&lastDirtyTimestamp=1626740168538
2021-07-19 19:27:39,703 DEBUG [DiscoveryClient-HeartbeatExecutor-0] org.springframework.core.log.CompositeLog : Accept=[application/json, application/*+json]
2021-07-19 19:27:39,794 DEBUG [DiscoveryClient-CacheRefreshExecutor-0] org.springframework.core.log.CompositeLog : HTTP GET http://localhost:8761/eureka/apps/delta
2021-07-19 19:27:39,795 DEBUG [DiscoveryClient-CacheRefreshExecutor-0] org.springframework.core.log.CompositeLog : Accept=[application/json, application/*+json]
2021-07-19 19:27:39,798 DEBUG [DiscoveryClient-CacheRefreshExecutor-0] org.springframework.core.log.CompositeLog : Response 200 OK
2021-07-19 19:27:39,799 DEBUG [DiscoveryClient-CacheRefreshExecutor-0] org.springframework.core.log.CompositeLog : Reading to [org.springframework.cloud.netflix.eureka.http.EurekaApplications]
2021-07-19 19:27:39,847 DEBUG [DiscoveryClient-HeartbeatExecutor-0] org.springframework.core.log.CompositeLog : Response 200 OK
2021-07-19 19:28:09,801 DEBUG [DiscoveryClient-CacheRefreshExecutor-0] org.springframework.core.log.CompositeLog : HTTP GET http://localhost:8761/eureka/apps/delta
2021-07-19 19:28:09,802 DEBUG [DiscoveryClient-CacheRefreshExecutor-0] org.springframework.core.log.CompositeLog : Accept=[application/json, application/*+json]
2021-07-19 19:28:09,849 DEBUG [DiscoveryClient-HeartbeatExecutor-0] org.springframework.core.log.CompositeLog : HTTP PUT http://localhost:8761/eureka/apps/CUSTOMER_SERVICE/host.docker.internal:customer_service:8090?status=UP&lastDirtyTimestamp=1626740168538
2021-07-19 19:28:09,850 DEBUG [DiscoveryClient-HeartbeatExecutor-0] org.springframework.core.log.CompositeLog : Accept=[application/json, application/*+json]
2021-07-19 19:28:09,853 DEBUG [DiscoveryClient-HeartbeatExecutor-0] org.springframework.core.log.CompositeLog : Response 200 OK
2021-07-19 21:58:38,372 DEBUG [DiscoveryClient-CacheRefreshExecutor-0] org.springframework.core.log.CompositeLog : Response 200 OK
2021-07-19 21:58:38,374 DEBUG [DiscoveryClient-CacheRefreshExecutor-0] org.springframework.core.log.CompositeLog : Reading to [org.springframework.cloud.netflix.eureka.http.EurekaApplications]
2021-07-19 21:58:38,406 DEBUG [DiscoveryClient-HeartbeatExecutor-0] org.springframework.core.log.CompositeLog : HTTP PUT http://localhost:8761/eureka/apps/CUSTOMER_SERVICE/host.docker.internal:customer_service:8090?status=UP&lastDirtyTimestamp=1626740168538
2021-07-19 21:58:38,423 DEBUG [DiscoveryClient-HeartbeatExecutor-0] org.springframework.core.log.CompositeLog : Accept=[application/json, application/*+json]
2021-07-19 21:58:41,462 DEBUG [DiscoveryClient-HeartbeatExecutor-0] org.springframework.core.log.CompositeLog : Response 200 OK
2021-07-19 21:59:08,387 DEBUG [DiscoveryClient-CacheRefreshExecutor-0] org.springframework.core.log.CompositeLog : HTTP GET http://localhost:8761/eureka/apps/delta
2021-07-19 21:59:08,408 DEBUG [DiscoveryClient-CacheRefreshExecutor-0] org.springframework.core.log.CompositeLog : Accept=[application/json, application/*+json]
2021-07-19 21:59:08,831 DEBUG [DiscoveryClient-CacheRefreshExecutor-0] org.springframework.core.log.CompositeLog : Response 200 OK
2021-07-19 21:59:08,831 DEBUG [DiscoveryClient-CacheRefreshExecutor-0] org.springframework.core.log.CompositeLog : Reading to [org.springframework.cloud.netflix.eureka.http.EurekaApplications]
2021-07-19 21:59:11,681 DEBUG [DiscoveryClient-HeartbeatExecutor-0] org.springframework.core.log.CompositeLog : HTTP PUT http://localhost:8761/eureka/apps/CUSTOMER_SERVICE/host.docker.internal:customer_service:8090?status=UP&lastDirtyTimestamp=1626740168538
2021-07-19 21:59:11,682 DEBUG [DiscoveryClient-HeartbeatExecutor-0] org.springframework.core.log.CompositeLog : Accept=[application/json, application/*+json]
2021-07-19 21:59:11,726 DEBUG [DiscoveryClient-HeartbeatExecutor-0] org.springframework.core.log.CompositeLog : Response 200 OK
2021-07-19 21:59:38,834 DEBUG [DiscoveryClient-CacheRefreshExecutor-0] org.springframework.core.log.CompositeLog : HTTP GET http://localhost:8761/eureka/apps/delta
2021-07-19 21:59:38,835 DEBUG [DiscoveryClient-CacheRefreshExecutor-0] org.springframework.core.log.CompositeLog : Accept=[application/json, application/*+json]
2021-07-19 21:59:41,217 DEBUG [DiscoveryClient-CacheRefreshExecutor-0] org.springframework.core.log.CompositeLog : Response 200 OK
2021-07-19 21:59:41,299 DEBUG [DiscoveryClient-CacheRefreshExecutor-0] org.springframework.core.log.CompositeLog : Reading to [org.springframework.cloud.netflix.eureka.http.EurekaApplications]
2021-07-19 21:59:41,728 DEBUG [DiscoveryClient-HeartbeatExecutor-0] org.springframework.core.log.CompositeLog : HTTP PUT http://localhost:8761/eureka/apps/CUSTOMER_SERVICE/host.docker.internal:customer_service:8090?status=UP&lastDirtyTimestamp=1626740168538
2021-07-19 21:59:42,052 DEBUG [DiscoveryClient-HeartbeatExecutor-0] org.springframework.core.log.CompositeLog : Accept=[application/json, application/*+json]
2021-07-19 21:59:42,375 DEBUG [DiscoveryClient-HeartbeatExecutor-0] org.springframework.core.log.CompositeLog : Response 200 OK
2021-07-19 22:00:11,303 DEBUG [DiscoveryClient-CacheRefreshExecutor-0] org.springframework.core.log.CompositeLog : HTTP GET http://localhost:8761/eureka/apps/delta
2021-07-19 22:00:11,304 DEBUG [DiscoveryClient-CacheRefreshExecutor-0] org.springframework.core.log.CompositeLog : Accept=[application/json, application/*+json]
2021-07-19 22:00:11,707 DEBUG [DiscoveryClient-CacheRefreshExecutor-0] org.springframework.core.log.CompositeLog : Response 200 OK
2021-07-19 22:00:11,707 DEBUG [DiscoveryClient-CacheRefreshExecutor-0] org.springframework.core.log.CompositeLog : Reading to [org.springframework.cloud.netflix.eureka.http.EurekaApplications]
2021-07-19 22:00:12,598 DEBUG [DiscoveryClient-HeartbeatExecutor-0] org.springframework.core.log.CompositeLog : HTTP PUT http://localhost:8761/eureka/apps/CUSTOMER_SERVICE/host.docker.internal:customer_service:8090?status=UP&lastDirtyTimestamp=1626740168538
2021-07-19 22:00:12,599 DEBUG [DiscoveryClient-HeartbeatExecutor-0] org.springframework.core.log.CompositeLog : Accept=[application/json, application/*+json]
2021-07-19 22:00:12,881 DEBUG [DiscoveryClient-HeartbeatExecutor-0] org.springframework.core.log.CompositeLog : Response 200 OK
2021-07-19 22:00:41,711 DEBUG [DiscoveryClient-CacheRefreshExecutor-0] org.springframework.core.log.CompositeLog : HTTP GET http://localhost:8761/eureka/apps/delta
2021-07-19 22:00:41,714 DEBUG [DiscoveryClient-CacheRefreshExecutor-0] org.springframework.core.log.CompositeLog : Accept=[application/json, application/*+json]
2021-07-19 22:00:41,829 DEBUG [DiscoveryClient-CacheRefreshExecutor-0] org.springframework.core.log.CompositeLog : Response 200 OK
2021-07-19 22:00:41,830 DEBUG [DiscoveryClient-CacheRefreshExecutor-0] org.springframework.core.log.CompositeLog : Reading to [org.springframework.cloud.netflix.eureka.http.EurekaApplications]
2021-07-19 22:00:42,883 DEBUG [DiscoveryClient-HeartbeatExecutor-0] org.springframework.core.log.CompositeLog : HTTP PUT http://localhost:8761/eureka/apps/CUSTOMER_SERVICE/host.docker.internal:customer_service:8090?status=UP&lastDirtyTimestamp=1626740168538
2021-07-19 22:00:42,884 DEBUG [DiscoveryClient-HeartbeatExecutor-0] org.springframework.core.log.CompositeLog : Accept=[application/json, application/*+json]
2021-07-19 22:00:43,151 DEBUG [DiscoveryClient-HeartbeatExecutor-0] org.springframework.core.log.CompositeLog : Response 200 OK
2021-07-19 22:01:11,833 DEBUG [DiscoveryClient-CacheRefreshExecutor-0] org.springframework.core.log.CompositeLog : HTTP GET http://localhost:8761/eureka/apps/delta
2021-07-19 22:01:11,835 DEBUG [DiscoveryClient-CacheRefreshExecutor-0] org.springframework.core.log.CompositeLog : Accept=[application/json, application/*+json]
2021-07-19 22:01:11,910 DEBUG [DiscoveryClient-CacheRefreshExecutor-0] org.springframework.core.log.CompositeLog : Response 200 OK
2021-07-19 22:01:11,912 DEBUG [DiscoveryClient-CacheRefreshExecutor-0] org.springframework.core.log.CompositeLog : Reading to [org.springframework.cloud.netflix.eureka.http.EurekaApplications]
2021-07-19 22:01:13,154 DEBUG [DiscoveryClient-HeartbeatExecutor-0] org.springframework.core.log.CompositeLog : HTTP PUT http://localhost:8761/eureka/apps/CUSTOMER_SERVICE/host.docker.internal:customer_service:8090?status=UP&lastDirtyTimestamp=1626740168538
2021-07-19 22:01:13,156 DEBUG [DiscoveryClient-HeartbeatExecutor-0] org.springframework.core.log.CompositeLog : Accept=[application/json, application/*+json]
2021-07-19 22:01:13,217 DEBUG [DiscoveryClient-HeartbeatExecutor-0] org.springframework.core.log.CompositeLog : Response 200 OK
2021-07-19 22:01:32,485 INFO [AsyncResolver-bootstrap-executor-0] com.netflix.discovery.shared.resolver.aws.ConfigClusterResolver : Resolving eureka endpoints via configuration
2021-07-19 22:01:41,916 DEBUG [DiscoveryClient-CacheRefreshExecutor-0] org.springframework.core.log.CompositeLog : HTTP GET http://localhost:8761/eureka/apps/delta
2021-07-19 22:01:41,919 DEBUG [DiscoveryClient-CacheRefreshExecutor-0] org.springframework.core.log.CompositeLog : Accept=[application/json, application/*+json]
2021-07-19 22:01:42,049 DEBUG [DiscoveryClient-CacheRefreshExecutor-0] org.springframework.core.log.CompositeLog : Response 200 OK
2021-07-19 22:01:42,049 DEBUG [DiscoveryClient-CacheRefreshExecutor-0] org.springframework.core.log.CompositeLog : Reading to [org.springframework.cloud.netflix.eureka.http.EurekaApplications]
2021-07-19 22:01:43,221 DEBUG [DiscoveryClient-HeartbeatExecutor-0] org.springframework.core.log.CompositeLog : HTTP PUT http://localhost:8761/eureka/apps/CUSTOMER_SERVICE/host.docker.internal:customer_service:8090?status=UP&lastDirtyTimestamp=1626740168538
2021-07-19 22:01:43,326 DEBUG [DiscoveryClient-HeartbeatExecutor-0] org.springframework.core.log.CompositeLog : Accept=[application/json, application/*+json]
2021-07-19 22:01:43,374 DEBUG [DiscoveryClient-HeartbeatExecutor-0] org.springframework.core.log.CompositeLog : Response 200 OK
2021-07-19 22:02:12,053 DEBUG [DiscoveryClient-CacheRefreshExecutor-0] org.springframework.core.log.CompositeLog : HTTP GET http://localhost:8761/eureka/apps/delta
2021-07-19 22:02:12,055 DEBUG [DiscoveryClient-CacheRefreshExecutor-0] org.springframework.core.log.CompositeLog : Accept=[application/json, application/*+json]
2021-07-19 22:02:12,078 DEBUG [DiscoveryClient-CacheRefreshExecutor-0] org.springframework.core.log.CompositeLog : Response 200 OK
2021-07-19 22:02:12,080 DEBUG [DiscoveryClient-CacheRefreshExecutor-0] org.springframework.core.log.CompositeLog : Reading to [org.springframework.cloud.netflix.eureka.http.EurekaApplications]
2021-07-19 22:02:13,506 DEBUG [DiscoveryClient-HeartbeatExecutor-0] org.springframework.core.log.CompositeLog : HTTP PUT http://localhost:8761/eureka/apps/CUSTOMER_SERVICE/host.docker.internal:customer_service:8090?status=UP&lastDirtyTimestamp=1626740168538
2021-07-19 22:02:13,507 DEBUG [DiscoveryClient-HeartbeatExecutor-0] org.springframework.core.log.CompositeLog : Accept=[application/json, application/*+json]
2021-07-19 22:02:13,541 DEBUG [DiscoveryClient-HeartbeatExecutor-0] org.springframework.core.log.CompositeLog : Response 200 OK
2021-07-19 22:02:42,084 DEBUG [DiscoveryClient-CacheRefreshExecutor-0] org.springframework.core.log.CompositeLog : HTTP GET http://localhost:8761/eureka/apps/delta
2021-07-19 22:02:42,087 DEBUG [DiscoveryClient-CacheRefreshExecutor-0] org.springframework.core.log.CompositeLog : Accept=[application/json, application/*+json]
2021-07-19 22:02:42,211 DEBUG [DiscoveryClient-CacheRefreshExecutor-0] org.springframework.core.log.CompositeLog : Response 200 OK
2021-07-19 22:02:42,211 DEBUG [DiscoveryClient-CacheRefreshExecutor-0] org.springframework.core.log.CompositeLog : Reading to [org.springframework.cloud.netflix.eureka.http.EurekaApplications]
2021-07-19 22:02:43,543 DEBUG [DiscoveryClient-HeartbeatExecutor-0] org.springframework.core.log.CompositeLog : HTTP PUT http://localhost:8761/eureka/apps/CUSTOMER_SERVICE/host.docker.internal:customer_service:8090?status=UP&lastDirtyTimestamp=1626740168538
2021-07-19 22:02:43,544 DEBUG [DiscoveryClient-HeartbeatExecutor-0] org.springframework.core.log.CompositeLog : Accept=[application/json, application/*+json]
2021-07-19 22:02:43,827 DEBUG [DiscoveryClient-HeartbeatExecutor-0] org.springframework.core.log.CompositeLog : Response 200 OK
2021-07-19 22:03:12,214 DEBUG [DiscoveryClient-CacheRefreshExecutor-0] org.springframework.core.log.CompositeLog : HTTP GET http://localhost:8761/eureka/apps/delta
2021-07-19 22:03:12,497 DEBUG [DiscoveryClient-CacheRefreshExecutor-0] org.springframework.core.log.CompositeLog : Accept=[application/json, application/*+json]
2021-07-19 22:03:12,601 DEBUG [DiscoveryClient-CacheRefreshExecutor-0] org.springframework.core.log.CompositeLog : Response 200 OK
2021-07-19 22:03:12,604 DEBUG [DiscoveryClient-CacheRefreshExecutor-0] org.springframework.core.log.CompositeLog : Reading to [org.springframework.cloud.netflix.eureka.http.EurekaApplications]
2021-07-19 22:03:13,831 DEBUG [DiscoveryClient-HeartbeatExecutor-0] org.springframework.core.log.CompositeLog : HTTP PUT http://localhost:8761/eureka/apps/CUSTOMER_SERVICE/host.docker.internal:customer_service:8090?status=UP&lastDirtyTimestamp=1626740168538
2021-07-19 22:03:13,832 DEBUG [DiscoveryClient-HeartbeatExecutor-0] org.springframework.core.log.CompositeLog : Accept=[application/json, application/*+json]
2021-07-19 22:03:13,839 DEBUG [DiscoveryClient-HeartbeatExecutor-0] org.springframework.core.log.CompositeLog : Response 200 OK
2021-07-19 22:03:42,610 DEBUG [DiscoveryClient-CacheRefreshExecutor-0] org.springframework.core.log.CompositeLog : HTTP GET http://localhost:8761/eureka/apps/delta
2021-07-19 22:03:42,612 DEBUG [DiscoveryClient-CacheRefreshExecutor-0] org.springframework.core.log.CompositeLog : Accept=[application/json, application/*+json]
2021-07-19 22:03:42,616 DEBUG [DiscoveryClient-CacheRefreshExecutor-0] org.springframework.core.log.CompositeLog : Response 200 OK
2021-07-19 22:03:42,617 DEBUG [DiscoveryClient-CacheRefreshExecutor-0] org.springframework.core.log.CompositeLog : Reading to [org.springframework.cloud.netflix.eureka.http.EurekaApplications]
2021-07-19 22:03:43,843 DEBUG [DiscoveryClient-HeartbeatExecutor-0] org.springframework.core.log.CompositeLog : HTTP PUT http://localhost:8761/eureka/apps/CUSTOMER_SERVICE/host.docker.internal:customer_service:8090?status=UP&lastDirtyTimestamp=1626740168538
2021-07-19 22:03:43,845 DEBUG [DiscoveryClient-HeartbeatExecutor-0] org.springframework.core.log.CompositeLog : Accept=[application/json, application/*+json]
2021-07-19 22:03:43,900 DEBUG [DiscoveryClient-HeartbeatExecutor-0] org.springframework.core.log.CompositeLog : Response 200 OK
2021-07-19 22:04:12,621 DEBUG [DiscoveryClient-CacheRefreshExecutor-0] org.springframework.core.log.CompositeLog : HTTP GET http://localhost:8761/eureka/apps/delta
2021-07-19 22:04:12,623 DEBUG [DiscoveryClient-CacheRefreshExecutor-0] org.springframework.core.log.CompositeLog : Accept=[application/json, application/*+json]
2021-07-19 22:04:12,645 DEBUG [DiscoveryClient-CacheRefreshExecutor-0] org.springframework.core.log.CompositeLog : Response 200 OK
2021-07-19 22:04:12,647 DEBUG [DiscoveryClient-CacheRefreshExecutor-0] org.springframework.core.log.CompositeLog : Reading to [org.springframework.cloud.netflix.eureka.http.EurekaApplications]
2021-07-19 22:04:13,904 DEBUG [DiscoveryClient-HeartbeatExecutor-0] org.springframework.core.log.CompositeLog : HTTP PUT http://localhost:8761/eureka/apps/CUSTOMER_SERVICE/host.docker.internal:customer_service:8090?status=UP&lastDirtyTimestamp=1626740168538
2021-07-19 22:04:13,906 DEBUG [DiscoveryClient-HeartbeatExecutor-0] org.springframework.core.log.CompositeLog : Accept=[application/json, application/*+json]
2021-07-19 22:04:13,950 DEBUG [DiscoveryClient-HeartbeatExecutor-0] org.springframework.core.log.CompositeLog : Response 200 OK
2021-07-19 22:04:42,651 DEBUG [DiscoveryClient-CacheRefreshExecutor-0] org.springframework.core.log.CompositeLog : HTTP GET http://localhost:8761/eureka/apps/delta
2021-07-19 22:04:42,654 DEBUG [DiscoveryClient-CacheRefreshExecutor-0] org.springframework.core.log.CompositeLog : Accept=[application/json, application/*+json]
2021-07-19 22:04:42,661 DEBUG [DiscoveryClient-CacheRefreshExecutor-0] org.springframework.core.log.CompositeLog : Response 200 OK
2021-07-19 22:04:42,664 DEBUG [DiscoveryClient-CacheRefreshExecutor-0] org.springframework.core.log.CompositeLog : Reading to [org.springframework.cloud.netflix.eureka.http.EurekaApplications]
2021-07-19 22:04:43,956 DEBUG [DiscoveryClient-HeartbeatExecutor-0] org.springframework.core.log.CompositeLog : HTTP PUT http://localhost:8761/eureka/apps/CUSTOMER_SERVICE/host.docker.internal:customer_service:8090?status=UP&lastDirtyTimestamp=1626740168538
2021-07-19 22:04:43,958 DEBUG [DiscoveryClient-HeartbeatExecutor-0] org.springframework.core.log.CompositeLog : Accept=[application/json, application/*+json]
2021-07-19 22:04:43,965 DEBUG [DiscoveryClient-HeartbeatExecutor-0] org.springframework.core.log.CompositeLog : Response 200 OK
2021-07-19 22:05:12,668 DEBUG [DiscoveryClient-CacheRefreshExecutor-0] org.springframework.core.log.CompositeLog : HTTP GET http://localhost:8761/eureka/apps/delta
2021-07-19 22:05:12,669 DEBUG [DiscoveryClient-CacheRefreshExecutor-0] org.springframework.core.log.CompositeLog : Accept=[application/json, application/*+json]
2021-07-19 22:05:12,672 DEBUG [DiscoveryClient-CacheRefreshExecutor-0] org.springframework.core.log.CompositeLog : Response 200 OK
2021-07-19 22:05:12,673 DEBUG [DiscoveryClient-CacheRefreshExecutor-0] org.springframework.core.log.CompositeLog : Reading to [org.springframework.cloud.netflix.eureka.http.EurekaApplications]
2021-07-19 22:05:13,969 DEBUG [DiscoveryClient-HeartbeatExecutor-0] org.springframework.core.log.CompositeLog : HTTP PUT http://localhost:8761/eureka/apps/CUSTOMER_SERVICE/host.docker.internal:customer_service:8090?status=UP&lastDirtyTimestamp=1626740168538
2021-07-19 22:05:13,970 DEBUG [DiscoveryClient-HeartbeatExecutor-0] org.springframework.core.log.CompositeLog : Accept=[application/json, application/*+json]
2021-07-19 22:05:13,974 DEBUG [DiscoveryClient-HeartbeatExecutor-0] org.springframework.core.log.CompositeLog : Response 200 OK
2021-07-19 22:05:42,675 DEBUG [DiscoveryClient-CacheRefreshExecutor-0] org.springframework.core.log.CompositeLog : HTTP GET http://localhost:8761/eureka/apps/delta
2021-07-19 22:05:42,678 DEBUG [DiscoveryClient-CacheRefreshExecutor-0] org.springframework.core.log.CompositeLog : Accept=[application/json, application/*+json]
2021-07-19 22:05:42,687 DEBUG [DiscoveryClient-CacheRefreshExecutor-0] org.springframework.core.log.CompositeLog : Response 200 OK
2021-07-19 22:05:42,689 DEBUG [DiscoveryClient-CacheRefreshExecutor-0] org.springframework.core.log.CompositeLog : Reading to [org.springframework.cloud.netflix.eureka.http.EurekaApplications]
2021-07-19 22:05:43,977 DEBUG [DiscoveryClient-HeartbeatExecutor-0] org.springframework.core.log.CompositeLog : HTTP PUT http://localhost:8761/eureka/apps/CUSTOMER_SERVICE/host.docker.internal:customer_service:8090?status=UP&lastDirtyTimestamp=1626740168538
2021-07-19 22:05:43,979 DEBUG [DiscoveryClient-HeartbeatExecutor-0] org.springframework.core.log.CompositeLog : Accept=[application/json, application/*+json]
2021-07-19 22:05:43,983 DEBUG [DiscoveryClient-HeartbeatExecutor-0] org.springframework.core.log.CompositeLog : Response 200 OK
2021-07-19 22:06:12,693 DEBUG [DiscoveryClient-CacheRefreshExecutor-0] org.springframework.core.log.CompositeLog : HTTP GET http://localhost:8761/eureka/apps/delta
2021-07-19 22:06:12,695 DEBUG [DiscoveryClient-CacheRefreshExecutor-0] org.springframework.core.log.CompositeLog : Accept=[application/json, application/*+json]
2021-07-19 22:06:12,723 DEBUG [DiscoveryClient-CacheRefreshExecutor-0] org.springframework.core.log.CompositeLog : Response 200 OK
2021-07-19 22:06:12,724 DEBUG [DiscoveryClient-CacheRefreshExecutor-0] org.springframework.core.log.CompositeLog : Reading to [org.springframework.cloud.netflix.eureka.http.EurekaApplications]
2021-07-19 22:06:13,985 DEBUG [DiscoveryClient-HeartbeatExecutor-0] org.springframework.core.log.CompositeLog : HTTP PUT http://localhost:8761/eureka/apps/CUSTOMER_SERVICE/host.docker.internal:customer_service:8090?status=UP&lastDirtyTimestamp=1626740168538
2021-07-19 22:06:13,985 DEBUG [DiscoveryClient-HeartbeatExecutor-0] org.springframework.core.log.CompositeLog : Accept=[application/json, application/*+json]
2021-07-19 22:06:14,082 DEBUG [DiscoveryClient-HeartbeatExecutor-0] org.springframework.core.log.CompositeLog : Response 200 OK
2021-07-19 22:06:27,779 INFO [RMI TCP Connection(36)-127.0.0.1] com.netflix.discovery.DiscoveryClient$3 : Saw local status change event StatusChangeEvent [timestamp=1626750387779, current=DOWN, previous=UP]
2021-07-19 22:06:27,780 INFO [DiscoveryClient-InstanceInfoReplicator-0] com.netflix.discovery.DiscoveryClient : DiscoveryClient_CUSTOMER_SERVICE/host.docker.internal:customer_service:8090: registering service...
2021-07-19 22:06:27,781 DEBUG [DiscoveryClient-InstanceInfoReplicator-0] org.springframework.core.log.CompositeLog : HTTP POST http://localhost:8761/eureka/apps/CUSTOMER_SERVICE
2021-07-19 22:06:27,782 DEBUG [DiscoveryClient-InstanceInfoReplicator-0] org.springframework.core.log.CompositeLog : Accept=[application/json, application/*+json]
2021-07-19 22:06:27,787 DEBUG [DiscoveryClient-InstanceInfoReplicator-0] org.springframework.core.log.CompositeLog : Writing [InstanceInfo [instanceId = host.docker.internal:customer_service:8090, appName = CUSTOMER_SERVICE, hostName = host.docker.internal, status = DOWN, ipAddr = 192.168.1.12, port = 8090, securePort = 443, dataCenterInfo = com.netflix.appinfo.MyDataCenterInfo@30b8e495] as "application/json"
2021-07-19 22:06:27,795 DEBUG [DiscoveryClient-InstanceInfoReplicator-0] org.springframework.core.log.CompositeLog : Response 204 NO_CONTENT
2021-07-19 22:06:27,796 INFO [DiscoveryClient-InstanceInfoReplicator-0] com.netflix.discovery.DiscoveryClient : DiscoveryClient_CUSTOMER_SERVICE/host.docker.internal:customer_service:8090 - registration status: 204
2021-07-19 22:06:27,939 INFO [RMI TCP Connection(36)-127.0.0.1] com.mongodb.diagnostics.logging.SLF4JLogger : Closed connection [connectionId{localValue:3, serverValue:33}] to localhost:27017 because the pool has been closed.
2021-07-19 22:06:32,017 INFO [RMI TCP Connection(36)-127.0.0.1] com.netflix.discovery.DiscoveryClient : Shutting down DiscoveryClient ...
2021-07-19 22:06:32,489 INFO [AsyncResolver-bootstrap-executor-0] com.netflix.discovery.shared.resolver.aws.ConfigClusterResolver : Resolving eureka endpoints via configuration
2021-07-19 22:06:35,025 INFO [RMI TCP Connection(36)-127.0.0.1] com.netflix.discovery.DiscoveryClient : Unregistering ...
2021-07-19 22:06:35,026 DEBUG [RMI TCP Connection(36)-127.0.0.1] org.springframework.core.log.CompositeLog : HTTP DELETE http://localhost:8761/eureka/apps/CUSTOMER_SERVICE/host.docker.internal:customer_service:8090
2021-07-19 22:06:35,027 DEBUG [RMI TCP Connection(36)-127.0.0.1] org.springframework.core.log.CompositeLog : Accept=[application/json, application/*+json]
2021-07-19 22:06:35,030 DEBUG [RMI TCP Connection(36)-127.0.0.1] org.springframework.core.log.CompositeLog : Response 200 OK
2021-07-19 22:06:35,031 INFO [RMI TCP Connection(36)-127.0.0.1] com.netflix.discovery.DiscoveryClient : DiscoveryClient_CUSTOMER_SERVICE/host.docker.internal:customer_service:8090 - deregister  status: 200
2021-07-19 22:06:35,036 INFO [RMI TCP Connection(36)-127.0.0.1] com.netflix.discovery.DiscoveryClient : Completed shut down of DiscoveryClient
